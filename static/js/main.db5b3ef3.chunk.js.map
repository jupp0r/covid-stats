{"version":3,"sources":["Loading.tsx","CaseChart.tsx","actions.ts","CountryPicker.tsx","DeathCurve.tsx","Loaded.tsx","Error.tsx","utils.ts","App.tsx","router.ts","data.ts","reducers.ts","epics.ts","store.ts","index.tsx"],"names":["Loading","progress","useSelector","state","covid","done","total","population","selectDataToRenderIntoChart","ui","pickedCountries","map","pickedCountry","name","data","where","row","iso_code","toArray","date","getTime","total_cases","type","CaseChart","options","title","text","chart","height","xAxis","labels","step","yAxis","series","id","highcharts","Highcharts","makeProgressAction","coutrySelector","select","location","distinct","orderBy","toPairs","active","includes","filter","searchText","toLowerCase","startsWith","CountryPicker","dispatch","useDispatch","allCountries","selected","key","style","fontWeight","onClick","_","countryCode","onChange","e","search","target","value","smooth","amount","Math","ceil","abs","results","i","length","x","valuesInAverage","sum","j","undefined","push","console","log","deathCurveSelector","country","deaths","total_deaths","new_deaths","sort","a","b","y","DeathCurve","min","tickInterval","formatter","this","toExponential","Loaded","Error","message","assertNever","store","App","className","href","data-ribbon","parseCovidCSV","of","fromCSV","pipe","df","parseDates","parseInts","parsePopulationCSV","renameSeries","Year","Value","mergeCovidPopulation","populationLatest","groupBy","group","maxYear","summarize","year","Series","max","pop","first","inflate","computeLatestPopulation","join","updateCountriesInPathName","urlString","countries","url","URL","params","URLSearchParams","set","JSON","stringify","toString","errorReducer","action","loadingReducer","get","defaultCountries","parsedCountries","parse","Array","isArray","error","getPickedCountriesFromUrl","routing","response","loadedReducer","newCountries","c","fromXhr","xhr","XMLHttpRequest","responseType","progress$","Observable","subscriber","addEventListener","ev","next","loaded","result$","readyState","status","complete","open","send","result","rootEpic","combineEpics","action$","covidData$","flatMap","update","merge","populationData$","combinedProgress$","item","filterForResult","data$","combinedResults$","zip","initialState","window","epicMiddleware","createEpicMiddleware","configureStore","reducer","middleware","run","subscribe","getState","history","pushState","document","body","scrollTop","rootElement","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.db5b3ef3.chunk.js","sourcesContent":["import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { LoadingState } from \"./store\";\n\nexport const Loading = () => {\n  const progress = useSelector((state: LoadingState) => state.progress);\n  return (\n    <div>\n      <div>\n        loading covid: {progress.covid.done} / {progress.covid.total}\n      </div>\n      <div>\n        loading population: {progress.population.done} /{\" \"}\n        {progress.population.total}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nimport { LoadedState } from \"./store\";\nimport { useSelector } from \"react-redux\";\n\nconst selectDataToRenderIntoChart = (\n  state: LoadedState,\n): {\n  name: string;\n  data: [Date, number][];\n  type: \"line\";\n}[] =>\n  state.ui.pickedCountries.map((pickedCountry: string) => ({\n    name: pickedCountry,\n    data: state.data\n      .where(row => row.iso_code === pickedCountry)\n      .toArray()\n      .map(row => [\n        row.date.getTime(),\n        (row.total_cases * 1000000) / row.population,\n      ]),\n    type: \"line\",\n  }));\n\nexport const CaseChart = () => {\n  const cases = useSelector(selectDataToRenderIntoChart);\n\n  const options: Highcharts.Options = {\n    title: {\n      text: \"Cases over time\",\n    },\n    chart: {\n      height: \"50%\",\n    },\n    xAxis: {\n      type: \"datetime\",\n      title: {\n        text: \"Date\",\n      },\n      labels: {\n        step: 1,\n      },\n    },\n    yAxis: {\n      type: \"logarithmic\",\n      title: {\n        text: \"Cases per 1M population\",\n      },\n    },\n    series: cases,\n  };\n\n  return (\n    <div id=\"cases\">\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </div>\n  );\n};\n","import { IDataFrame } from \"data-forge\";\n\nexport type Action =\n  | InitialAction\n  | ErrorDuringFetchAction\n  | FetchSuccessAction\n  | CountryToggleAction\n  | CountrySearchChangedAction\n  | ProgressAction\n  | UrlUpdatedAction;\n\nexport interface InitialAction {\n  type: \"initialized\";\n}\nexport const makeInitialized = (): InitialAction => ({\n  type: \"initialized\",\n});\n\nexport interface ErrorDuringFetchAction {\n  type: \"error-during-fetch\";\n  message: string;\n}\nexport const makeErrorDuringFetch = (\n  message: string,\n): ErrorDuringFetchAction => ({\n  type: \"error-during-fetch\",\n  message,\n});\n\nexport interface FetchSuccessAction {\n  type: \"fetch-success\";\n  response: IDataFrame;\n}\nexport const makeFetchSuccess = (response: IDataFrame): FetchSuccessAction => ({\n  type: \"fetch-success\",\n  response,\n});\n\nexport interface CountryToggleAction {\n  type: \"country-toggled\";\n  countryCode: string;\n}\nexport const makeCountryToggleAction = (\n  countryCode: string,\n): CountryToggleAction => ({\n  type: \"country-toggled\",\n  countryCode,\n});\n\nexport interface CountrySearchChangedAction {\n  type: \"country-search-changed\";\n  search: string;\n}\n\nexport const makeCoutrySearchChangedAction = (\n  search: string,\n): CountrySearchChangedAction => ({\n  type: \"country-search-changed\",\n  search,\n});\n\nexport interface ProgressAction {\n  type: \"progress\";\n  target: \"covid\" | \"population\";\n  done: number;\n  total: number;\n}\n\nexport const makeProgressAction = (progress: {\n  target: \"covid\" | \"population\";\n  done: number;\n  total: number;\n}): ProgressAction => {\n  return { ...progress, type: \"progress\" };\n};\n\nexport interface UrlUpdatedAction {\n  type: \"url-updated\",\n  url: string\n}\n\nexport const makeUrlUpdated = (url: string): UrlUpdatedAction => ({type: \"url-updated\", url})","import React, { CSSProperties } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { LoadedState } from \"./store\";\n\nimport { includes } from \"lodash/fp\";\nimport {\n  makeCountryToggleAction,\n  makeCoutrySearchChangedAction,\n} from \"./actions\";\n\nconst coutrySelector = (state: LoadedState) =>\n  state.data\n    .select(\n      ({ iso_code, location }: { iso_code: string; location: string }) => ({\n        iso_code,\n        location,\n      }),\n    )\n    .distinct(row => row.iso_code)\n    .orderBy(row => row.location)\n    .toPairs()\n    .map(([_, row]) => ({\n      ...row,\n      active: includes(row.iso_code)(state.ui.pickedCountries),\n    }))\n    .filter(\n      row =>\n        row.active ||\n        (state.ui.searchText !== \"\" &&\n          row.location\n            .toLowerCase()\n            .startsWith(state.ui.searchText.toLowerCase())),\n    );\n\nexport const CountryPicker = () => {\n  const dispatch = useDispatch();\n\n  const boldIfSelected = (selected: boolean): CSSProperties => ({\n    fontWeight: selected ? \"bold\" : \"normal\",\n  });\n\n  const allCountries = useSelector(coutrySelector).map(\n    ({ iso_code, location, active }) => (\n      <li\n        key={iso_code}\n        style={boldIfSelected(active)}\n        onClick={_ => dispatch(makeCountryToggleAction(iso_code))}\n      >\n        {location}\n      </li>\n    ),\n  );\n\n  const searchText = useSelector((state: LoadedState) => state.ui.searchText);\n\n  return (\n    <div>\n      <label>\n        Country Picker\n        <input\n          type=\"text\"\n          name=\"search\"\n          onChange={e =>\n            dispatch(makeCoutrySearchChangedAction(e.target.value))\n          }\n          value={searchText}\n        />\n        <ul id=\"countries\">{allCountries}</ul>\n      </label>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport Highcharts, { SeriesOptionsType } from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nimport { useSelector } from \"react-redux\";\nimport { LoadedState } from \"./store\";\n\nconst smooth = (amount: number, series: number[][]): number[][] => {\n  amount = Math.ceil(Math.abs(amount));\n  let results: Array<Array<number>> = [];\n  for (let i = 0; i < series.length; i++) {\n    let [x] = series[i];\n\n    let valuesInAverage = 0;\n    let sum = 0;\n    for (let j = amount * -1; j <= amount; j++) {\n      if (series[i + j] === undefined) {\n        continue;\n      }\n\n      sum = sum + series[i + j][1];\n      valuesInAverage = valuesInAverage + 1;\n    }\n\n    results.push([x, sum / valuesInAverage]);\n  }\n  console.log(\"smooth results: \", results);\n  return results;\n};\n\nconst deathCurveSelector = (state: LoadedState): SeriesOptionsType[] =>\n  state.ui.pickedCountries.map(country => {\n    const filteredByCountry = state.data.where(row => row.iso_code === country);\n\n    const deaths = filteredByCountry.select(row => ({\n      iso_code: row.iso_code,\n      total_deaths: row.total_deaths,\n      population: row.population,\n      new_deaths: row.new_deaths,\n    }));\n\n    return {\n      name: country,\n      type: \"line\",\n      data: smooth(\n        2,\n        deaths\n          .toArray()\n          .map(row => [\n            row.total_deaths / row.population,\n            row.new_deaths / row.population,\n          ])\n          .sort(([a, _], [b, __]) => (a < b ? -1 : 1)),\n      ).filter(([x, y]) => x !== 0 && y !== 0),\n    };\n  });\n\nexport const DeathCurve = () => {\n  const deaths = useSelector(deathCurveSelector);\n\n  const options: Highcharts.Options = {\n    title: {\n      text: \"Death Curve\",\n    },\n    chart: {\n      height: \"50%\",\n    },\n    xAxis: {\n      type: \"logarithmic\",\n      title: {\n        text: \"Fraction of dead population\",\n      },\n      min: 1e-6,\n      tickInterval: 1,\n      labels: {\n        step: 1,\n        formatter: function () {\n          return this.value.toExponential(0);\n        },\n      },\n    },\n    yAxis: {\n      type: \"logarithmic\",\n      title: {\n        text: \"Fraction of dead population per day (smoothed)\",\n      },\n      min: 1e-7,\n      tickInterval: 1,\n      labels: {\n        step: 1,\n        formatter: function () {\n          return this.value.toExponential(0);\n        },\n      },\n    },\n    series: deaths,\n  };\n\n  return (\n    <div id=\"deathcurve\">\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { CaseChart } from \"./CaseChart\";\nimport { CountryPicker } from \"./CountryPicker\";\nimport { DeathCurve } from \"./DeathCurve\";\n\nexport const Loaded = () => {\n  return (\n    <div>\n      <CountryPicker />\n      <CaseChart />\n      <DeathCurve />\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { ErrorState } from \"./store\";\nimport { useSelector } from \"react-redux\";\n\nexport const Error = () => {\n  const message = useSelector((state: ErrorState) => state.message);\n  return <div>Error: {message}</div>;\n};\n","export function assertNever(x: never): never {\n    throw new Error(\"Unexpected object: \" + x);\n}","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"./App.css\";\nimport \"github-fork-ribbon-css/gh-fork-ribbon.css\";\n\nimport { State } from \"./store\";\n\nimport { Loading } from \"./Loading\";\nimport { Loaded } from \"./Loaded\";\nimport { Error } from \"./Error\";\n\nimport { assertNever } from \"./utils\";\n\nexport const App = () => {\n  const state: State = useSelector<State, State>(_ => _);\n  return (\n    <>\n      <a\n        className=\"github-fork-ribbon right-top\"\n        href=\"https://github.com/jupp0r/covid-stats\"\n        data-ribbon=\"Fork me on GitHub\"\n        title=\"Fork me on GitHub\"\n      >\n        Fork me on GitHub\n      </a>\n      <div className=\"App\">\n        {((state: State) => {\n          switch (state.type) {\n            case \"loading\":\n              return <Loading />;\n            case \"loaded\":\n              return <Loaded />;\n            case \"error\":\n              return <Error />;\n            default:\n              return assertNever(state);\n          }\n        })(state)}\n      </div>\n    </>\n  );\n};\n","import { Action } from \"./actions\";\nimport { State } from \"./store\";\n\nimport { Store } from \"redux\";\n\nimport { makeUrlUpdated } from \"./actions\";\nimport { defaultCountries } from \"./store\";\n\n\nexport const updateCountriesInPathName = (\n  urlString: string,\n  countries: string[],\n): string => {\n  const url = new URL(urlString);\n  const params = new URLSearchParams(url.search);\n  params.set(\"countries[]\", JSON.stringify(countries));\n  url.search = params.toString();\n  return url.toString();\n};\n\nexport const getPickedCountriesFromUrl = (urlString: string): string[] => {\n  const url = new URL(urlString);\n  const params = new URLSearchParams(url.search);\n  const countries = params.get(\"countries[]\");\n  if (!countries) {\n    return defaultCountries;\n  }\n\n  const parsedCountries: string[] = JSON.parse(countries);\n\n  if (!Array.isArray(parsedCountries)) {\n    console.error(\"invalid url params\");\n    return defaultCountries;\n  }\n\n  return parsedCountries;\n};\n\nexport const setupRouting = (store: Store<State, Action>) => {\n  window.addEventListener(\"popstate\", () => {\n    store.dispatch(makeUrlUpdated(window.location.toString()));\n  });\n\n  store.subscribe(() => {\n    const { url } = store.getState().routing;\n    if (window.location.toString() !== url) {\n      window.history.pushState(null, \"\", url);\n      document.body.scrollTop = 0;\n    }\n  });\n};\n","import { Observable, of } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { fromCSV, IDataFrame, Series } from \"data-forge\";\n\ninterface CovidRow {\n  iso_code: string;\n}\n\ninterface PopulationRow {\n  iso_code: string;\n  population: string;\n  year: number;\n}\n\nexport const parseCovidCSV = (data: string): Observable<IDataFrame> =>\n  of(fromCSV(data)).pipe(\n    map((df: IDataFrame): IDataFrame => df.parseDates(\"date\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"total_cases\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"new_cases\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"total_deaths\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"new_deaths\")),\n  );\n\nexport const parsePopulationCSV = (data: string): Observable<IDataFrame> =>\n  of(fromCSV(data)).pipe(\n    map((df: IDataFrame): IDataFrame => df.parseInts([\"Value\", \"Year\"])),\n    map(\n      (df: IDataFrame): IDataFrame =>\n        df.renameSeries({\n          Year: \"year\",\n          \"Country Code\": \"iso_code\",\n          Value: \"population\",\n        }),\n    ),\n  );\n\nexport const transformCsvData = (data: IDataFrame): IDataFrame => data;\n\ntype Maximums = Map<string, number>;\n\ntype Accumulator = {\n  maximums: Maximums;\n  result: IDataFrame;\n};\n\nconst computeLatestPopulation = (population: IDataFrame): IDataFrame =>\n  population\n    .groupBy(row => row.iso_code)\n    .select(group => {\n      const { year: maxYear } = group.summarize({ year: Series.max });\n      const pop = group.where(row => row.year === maxYear).first().population;\n      return {\n        iso_code: group.first().iso_code,\n        population: pop,\n      };\n    })\n    .inflate();\n\nexport const mergeCovidPopulation = (\n  covid: IDataFrame,\n  population: IDataFrame,\n): IDataFrame => {\n  const populationLatest = computeLatestPopulation(population);\n  console.log(covid.toArray());\n  return covid.join(\n    populationLatest,\n    (covid: CovidRow) => covid.iso_code,\n    (pop: PopulationRow) => pop.iso_code,\n    (covid: CovidRow, pop: PopulationRow | null) => ({\n      ...covid,\n      population: pop ? pop.population : 0,\n    }),\n  );\n};\n","import { initialState, State, LoadedState, LoadingState } from \"./store\";\n\nimport { Action } from \"./actions\";\nimport { transformCsvData } from \"./data\";\n\nimport { assertNever } from \"./utils\";\n\nimport { includes, filter } from \"lodash/fp\";\n\nimport { getPickedCountriesFromUrl, updateCountriesInPathName } from \"./router\";\n\nconst errorReducer = (state: State, action: Action): State => state;\n\nconst loadingReducer = (state: LoadingState, action: Action): State => {\n  switch (action.type) {\n    case \"fetch-success\":\n      const pickedCountries = getPickedCountriesFromUrl(state.routing.url);\n      return {\n        ...state,\n        type: \"loaded\",\n        data: transformCsvData(action.response),\n        ui: {\n          pickedCountries,\n          searchText: \"\",\n        },\n        routing: {\n          url: updateCountriesInPathName(state.routing.url, pickedCountries)\n        }\n      };\n    case \"progress\":\n      return {\n        ...state,\n        progress: {\n          ...state.progress,\n          [action.target]: {\n            done: action.done,\n            total: state.progress[action.target].total,\n            ...(action.total !== 0 && { total: action.total }),\n          },\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nconst loadedReducer = (state: LoadedState, action: Action): State => {\n  switch (action.type) {\n    case \"country-toggled\":\n      const toggleCountryToPicked = (\n        country: string,\n        countries: string[],\n      ): string[] => {\n        if (includes(country)(countries)) {\n          return filter(c => c !== country, countries);\n        }\n\n        return [country, ...countries];\n      };\n\n      const newCountries = toggleCountryToPicked(\n        action.countryCode,\n        state.ui.pickedCountries,\n      );\n\n      return {\n        ...state,\n        ui: {\n          ...state.ui,\n          pickedCountries: newCountries,\n        },\n        routing: {\n          url: updateCountriesInPathName(state.routing.url, newCountries),\n        },\n      };\n    case \"country-search-changed\":\n      return { ...state, ui: { ...state.ui, searchText: action.search } };\n    default:\n      return state;\n  }\n};\n\nexport const reducer = (state: State = initialState, action: Action): State => {\n  if (action.type === \"url-updated\") {\n    return { ...state, routing: { ...state.routing, url: action.url } };\n  }\n  \n  switch (state.type) {\n    case \"error\":\n      return errorReducer(state, action);\n    case \"loading\":\n      return loadingReducer(state, action);\n    case \"loaded\":\n      return loadedReducer(state, action);\n    default:\n      return assertNever(state);\n  }\n};\n","import { Observable, zip, merge } from \"rxjs\";\n\nimport { filter, flatMap, map } from \"rxjs/operators\";\n\nimport { Action, makeProgressAction, ProgressAction } from \"./actions\";\n\nimport { combineEpics } from \"redux-observable\";\n\nimport {\n  parseCovidCSV,\n  parsePopulationCSV,\n  mergeCovidPopulation,\n} from \"./data\";\nimport { IDataFrame } from \"data-forge\";\n\ntype DataResult =\n  | { type: \"success\"; data: IDataFrame }\n  | { type: \"error\"; reason: string };\n\ninterface Progress {\n  done: number;\n  total: number;\n}\n\nconst fromXhr = (\n  url: string,\n): {\n  progress: Observable<Progress>;\n  result: Observable<string>;\n} => {\n  const xhr = new XMLHttpRequest();\n  xhr.responseType = \"text\";\n  const progress$ = new Observable<Progress>((subscriber): void => {\n    xhr.addEventListener(\"progress\", ev =>\n      subscriber.next({\n        done: ev.loaded,\n        total: ev.total,\n      }),\n    );\n  });\n\n  const result$ = new Observable<string>(subscriber => {\n    xhr.addEventListener(\"readystatechange\", ev => {\n      if (xhr.readyState !== 4) {\n        return;\n      }\n\n      if (xhr.status === 200) {\n        subscriber.next(xhr.response);\n        subscriber.complete();\n      } else {\n        subscriber.error(xhr.response);\n      }\n    });\n  });\n\n  xhr.open(\"GET\", url);\n  xhr.send();\n  return { progress: progress$, result: result$ };\n};\n\nexport const startLoadingEpic = (\n  action$: Observable<Action>,\n): Observable<Action> => {\n  const covidData$: Observable<ProgressAction | DataResult> = action$.pipe(\n    filter((action: Action) => action.type === \"initialized\"),\n    flatMap(() => {\n      const { progress, result } = fromXhr(\n        \"https://covid.ourworldindata.org/data/owid-covid-data.csv\",\n      );\n      const progress$ = progress.pipe(\n        map((update: Progress) =>\n          makeProgressAction({ ...update, target: \"covid\" }),\n        ),\n      );\n\n      const result$ = result.pipe(\n        flatMap(parseCovidCSV),\n        map((data: IDataFrame): DataResult => ({ type: \"success\", data })),\n      );\n\n      return merge(progress$, result$);\n    }),\n  );\n\n  const populationData$: Observable<ProgressAction | DataResult> = action$.pipe(\n    filter((action: Action) => action.type === \"initialized\"),\n    flatMap(() => {\n      const { progress, result } = fromXhr(\n        \"https://raw.githubusercontent.com/datasets/population/master/data/population.csv\",\n      );\n      const progress$ = progress.pipe(\n        map((update: Progress) =>\n          makeProgressAction({ ...update, target: \"population\" }),\n        ),\n      );\n\n      const result$ = result.pipe(\n        flatMap(parsePopulationCSV),\n        map((data: IDataFrame): DataResult => ({ type: \"success\", data })),\n      );\n\n      return merge(progress$, result$);\n    }),\n  );\n\n  const combinedProgress$: Observable<ProgressAction> = merge(\n    covidData$,\n    populationData$,\n  ).pipe(\n    filter(item => item.type === \"progress\"),\n    map(item => item as ProgressAction),\n  );\n\n  const filterForResult = (data$: Observable<ProgressAction | DataResult>) =>\n    data$.pipe(filter(item => item.type === \"success\"));\n\n  const combinedResults$: Observable<Action> = zip(\n    filterForResult(covidData$),\n    filterForResult(populationData$),\n  ).pipe(\n    map(\n      ([covid, population]): Action => {\n        console.log(\"happened\");\n        if (covid.type === \"success\" && population.type === \"success\") {\n          return {\n            type: \"fetch-success\",\n            response: mergeCovidPopulation(covid.data, population.data),\n          };\n        } else {\n          return {\n            type: \"error-during-fetch\",\n            message: `Error: ${covid} or ${population} failed to fetch`,\n          };\n        }\n      },\n    ),\n  );\n\n  return merge(combinedProgress$, combinedResults$);\n};\n\nexport const rootEpic = combineEpics(startLoadingEpic);\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { reducer } from \"./reducers\";\nimport { createEpicMiddleware } from \"redux-observable\";\nimport { rootEpic } from \"./epics\";\nimport { makeInitialized } from \"./actions\";\nimport { IDataFrame } from \"data-forge\";\nimport { Store as ReduxStore } from \"redux\";\nimport { Action } from \"./actions\";\nimport { setupRouting } from \"./router\";\n\nexport type State = (LoadingState | LoadedState | ErrorState);\ninterface RoutingState {\n  routing: {\n    url: string,\n  }\n}\n\ninterface Progress {\n  done: number;\n  total: number;\n}\nexport type LoadingState = {\n  type: \"loading\";\n  progress: {\n    covid: Progress;\n    population: Progress;\n  };\n} & RoutingState;\n\nexport type UIState = {\n  pickedCountries: string[];\n  searchText: string;\n}\n\nexport type LoadedState = {\n  type: \"loaded\";\n  data: IDataFrame;\n  ui: UIState;\n} & RoutingState\n\nexport type ErrorState = {\n  type: \"error\";\n  message: string;\n} & RoutingState;\n\nconst covidSizeEstimate = 2542856;\nconst populationSizeEstimate = 487991;\n\nexport const initialState: State = {\n  type: \"loading\",\n  progress: {\n    covid: { done: 0, total: covidSizeEstimate },\n    population: { done: 0, total: populationSizeEstimate },\n  },\n  routing: {\n    url: window.location.toString(),\n  }\n};\n\nexport const defaultCountries = [\"USA\", \"DEU\", \"SWE\", \"ITA\", \"NGA\"];\n\nexport type Store = ReduxStore<State, Action>;\n\nconst epicMiddleware = createEpicMiddleware();\nexport const store = configureStore({\n  reducer,\n  middleware: [epicMiddleware],\n});\nepicMiddleware.run(rootEpic);\n\nsetupRouting(store);\nstore.dispatch(makeInitialized());\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\n\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\n\nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  rootElement,\n);\n"],"sourceRoot":""}