{"version":3,"sources":["Loading.tsx","CaseChart.tsx","actions.ts","CountryPicker.tsx","Loaded.tsx","Error.tsx","utils.ts","App.tsx","router.ts","data.ts","reducers.ts","epics.ts","store.ts","index.tsx"],"names":["Loading","progress","useSelector","state","covid","done","total","population","selectDataToRenderIntoChart","ui","pickedCountries","map","pickedCountry","name","data","where","row","iso_code","toArray","date","getTime","total_cases","type","CaseChart","cases","options","title","text","xAxis","yAxis","series","console","log","highcharts","Highcharts","makeProgressAction","coutrySelector","select","location","distinct","orderBy","toPairs","active","includes","filter","searchText","toLowerCase","startsWith","CountryPicker","dispatch","useDispatch","allCountries","selected","key","style","fontWeight","onClick","_","countryCode","onChange","e","search","target","value","id","Loaded","Error","message","assertNever","x","store","App","className","parseCovidCSV","of","fromCSV","pipe","df","parseDates","parseInts","parsePopulationCSV","renameSeries","mergeCovidPopulation","populationLatest","groupBy","group","maxYear","summarize","year","Series","max","pop","first","inflate","computeLatestPopulation","join","updateCountriesInPathName","urlString","countries","url","URL","params","URLSearchParams","set","JSON","stringify","toString","errorReducer","action","loadingReducer","get","parsedCountries","parse","Array","isArray","error","getPickedCountriesFromUrl","routing","response","loadedReducer","newCountries","country","c","fromXhr","xhr","XMLHttpRequest","responseType","progress$","Observable","subscriber","addEventListener","ev","next","loaded","result$","readyState","status","complete","open","send","result","rootEpic","combineEpics","action$","covidData$","flatMap","update","merge","populationData$","combinedProgress$","item","filterForResult","data$","combinedResults$","zip","initialState","window","epicMiddleware","createEpicMiddleware","configureStore","reducer","middleware","run","subscribe","getState","history","pushState","document","body","scrollTop","rootElement","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.57e6db02.chunk.js","sourcesContent":["import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { LoadingState } from \"./store\";\n\nexport const Loading = () => {\n  const progress = useSelector((state: LoadingState) => state.progress);\n  return (\n    <div>\n      <div>\n        loading covid: {progress.covid.done} / {progress.covid.total}\n      </div>\n      <div>\n        loading population: {progress.population.done} /{\" \"}\n        {progress.population.total}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport { LoadedState } from \"./store\";\nimport { useSelector } from \"react-redux\";\n\nconst selectDataToRenderIntoChart = (\n  state: LoadedState,\n): {\n  name: string;\n  data: [Date, number][];\n  type: \"line\";\n}[] =>\n  state.ui.pickedCountries.map((pickedCountry: string) => ({\n    name: pickedCountry,\n    data: state.data\n      .where(row => row.iso_code === pickedCountry)\n      .toArray()\n      .map(row => [row.date.getTime(), row.total_cases]),\n    type: \"line\",\n  }));\n\nexport const CaseChart = () => {\n  const cases = useSelector(selectDataToRenderIntoChart);\n\n  const options: Highcharts.Options = {\n    title: {\n      text: \"Cases over time\",\n    },\n    xAxis: {\n      type: \"datetime\",\n      title: {\n        text: \"Date\",\n      },\n    },\n    yAxis: {\n      type: \"logarithmic\",\n    },\n    series: cases,\n  };\n\n  console.log(cases);\n  return (\n    <div>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </div>\n  );\n};\n","import { IDataFrame } from \"data-forge\";\n\nexport type Action =\n  | InitialAction\n  | ErrorDuringFetchAction\n  | FetchSuccessAction\n  | CountryToggleAction\n  | CountrySearchChangedAction\n  | ProgressAction\n  | UrlUpdatedAction;\n\nexport interface InitialAction {\n  type: \"initialized\";\n}\nexport const makeInitialized = (): InitialAction => ({\n  type: \"initialized\",\n});\n\nexport interface ErrorDuringFetchAction {\n  type: \"error-during-fetch\";\n  message: string;\n}\nexport const makeErrorDuringFetch = (\n  message: string,\n): ErrorDuringFetchAction => ({\n  type: \"error-during-fetch\",\n  message,\n});\n\nexport interface FetchSuccessAction {\n  type: \"fetch-success\";\n  response: IDataFrame;\n}\nexport const makeFetchSuccess = (response: IDataFrame): FetchSuccessAction => ({\n  type: \"fetch-success\",\n  response,\n});\n\nexport interface CountryToggleAction {\n  type: \"country-toggled\";\n  countryCode: string;\n}\nexport const makeCountryToggleAction = (\n  countryCode: string,\n): CountryToggleAction => ({\n  type: \"country-toggled\",\n  countryCode,\n});\n\nexport interface CountrySearchChangedAction {\n  type: \"country-search-changed\";\n  search: string;\n}\n\nexport const makeCoutrySearchChangedAction = (\n  search: string,\n): CountrySearchChangedAction => ({\n  type: \"country-search-changed\",\n  search,\n});\n\nexport interface ProgressAction {\n  type: \"progress\";\n  target: \"covid\" | \"population\";\n  done: number;\n  total: number;\n}\n\nexport const makeProgressAction = (progress: {\n  target: \"covid\" | \"population\";\n  done: number;\n  total: number;\n}): ProgressAction => {\n  return { ...progress, type: \"progress\" };\n};\n\nexport interface UrlUpdatedAction {\n  type: \"url-updated\",\n  url: string\n}\n\nexport const makeUrlUpdated = (url: string): UrlUpdatedAction => ({type: \"url-updated\", url})","import React, { CSSProperties } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { LoadedState } from \"./store\";\n\nimport { includes } from \"lodash/fp\";\nimport {\n  makeCountryToggleAction,\n  makeCoutrySearchChangedAction,\n} from \"./actions\";\n\nconst coutrySelector = (state: LoadedState) =>\n  state.data\n    .select(\n      ({ iso_code, location }: { iso_code: string; location: string }) => ({\n        iso_code,\n        location,\n      }),\n    )\n    .distinct(row => row.iso_code)\n    .orderBy(row => row.location)\n    .toPairs()\n    .map(([_, row]) => ({\n      ...row,\n      active: includes(row.iso_code)(state.ui.pickedCountries),\n    }))\n    .filter(\n      row =>\n        row.active ||\n        (state.ui.searchText !== \"\" &&\n          row.location\n            .toLowerCase()\n            .startsWith(state.ui.searchText.toLowerCase())),\n    );\n\nexport const CountryPicker = () => {\n  const dispatch = useDispatch();\n\n  const boldIfSelected = (selected: boolean): CSSProperties => ({\n    fontWeight: selected ? \"bold\" : \"normal\",\n  });\n\n  const allCountries = useSelector(coutrySelector).map(\n    ({ iso_code, location, active }) => (\n      <li\n        key={iso_code}\n        style={boldIfSelected(active)}\n        onClick={_ => dispatch(makeCountryToggleAction(iso_code))}\n      >\n        {location}\n      </li>\n    ),\n  );\n\n  const searchText = useSelector((state: LoadedState) => state.ui.searchText);\n\n  return (\n    <div>\n      <label>\n        Country Picker\n        <input\n          type=\"text\"\n          name=\"search\"\n          onChange={e =>\n            dispatch(makeCoutrySearchChangedAction(e.target.value))\n          }\n          value={searchText}\n        />\n        <ul id=\"countries\">{allCountries}</ul>\n      </label>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { CaseChart } from \"./CaseChart\";\nimport { CountryPicker } from \"./CountryPicker\";\n\nexport const Loaded = () => {\n  return (\n    <div>\n      <CountryPicker />\n      <CaseChart />\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { ErrorState } from \"./store\";\nimport { useSelector } from \"react-redux\";\n\nexport const Error = () => {\n  const message = useSelector((state: ErrorState) => state.message);\n  return <div>Error: {message}</div>;\n};\n","export function assertNever(x: never): never {\n    throw new Error(\"Unexpected object: \" + x);\n}","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"./App.css\";\n\nimport { State } from \"./store\";\n\nimport { Loading } from \"./Loading\";\nimport { Loaded } from \"./Loaded\";\nimport { Error } from \"./Error\";\n\nimport { assertNever } from \"./utils\";\n\nexport const App = () => {\n  const state: State = useSelector<State, State>(_ => _);\n  return (\n    <div className=\"App\">\n      {((state: State) => {\n        switch (state.type) {\n          case \"loading\":\n            return <Loading />;\n          case \"loaded\":\n            return <Loaded />;\n          case \"error\":\n            return <Error />;\n          default:\n            return assertNever(state);\n        }\n      })(state)}\n    </div>\n  );\n};\n","import { Action } from \"./actions\";\nimport { State } from \"./store\";\n\nimport { Store } from \"redux\";\n\nimport { makeUrlUpdated } from \"./actions\";\n\nexport const updateCountriesInPathName = (\n  urlString: string,\n  countries: string[],\n): string => {\n  const url = new URL(urlString);\n  const params = new URLSearchParams(url.search);\n  params.set(\"countries[]\", JSON.stringify(countries));\n  url.search = params.toString();\n  return url.toString();\n};\n\nexport const getPickedCountriesFromUrl = (urlString: string): string[] => {\n  const url = new URL(urlString);\n  const params = new URLSearchParams(url.search);\n  const countries = params.get(\"countries[]\");\n  if (!countries) {\n    console.log(\"no countries field found\", url, params);\n    return [\"USA\"];\n  }\n\n  const parsedCountries: string[] = JSON.parse(countries);\n\n  if (!Array.isArray(parsedCountries)) {\n    console.error(\"invalid url params\");\n    return [\"USA\"];\n  }\n\n  return parsedCountries;\n};\n\nexport const setupRouting = (store: Store<State, Action>) => {\n  window.addEventListener(\"popstate\", () => {\n    store.dispatch(makeUrlUpdated(window.location.toString()));\n  });\n\n  store.subscribe(() => {\n    const { url } = store.getState().routing;\n    if (window.location.toString() !== url) {\n      window.history.pushState(null, \"\", url);\n      document.body.scrollTop = 0;\n    }\n  });\n};\n","import { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { fromCSV, IDataFrame, Series } from 'data-forge';\n\ninterface CovidRow {\n    iso_code: string,\n}\n\ninterface PopulationRow {\n    \"iso_code\": string,\n    \"population\": string,\n    \"year\": number,\n}\n\nexport const parseCovidCSV = (data: string): Observable<IDataFrame> =>\n    of(fromCSV(data))\n        .pipe(\n            map((df: IDataFrame): IDataFrame => df.parseDates('date')),\n            map((df: IDataFrame): IDataFrame => df.parseInts('total_cases')),\n        );\n\nexport const parsePopulationCSV = (data: string): Observable<IDataFrame> =>\n    of(fromCSV(data))\n        .pipe(\n            map(\n                (df: IDataFrame): IDataFrame => df.parseInts(['Value', 'Year'])\n            ),\n            map((df: IDataFrame): IDataFrame => df.renameSeries({\n                \"Year\": \"year\",\n                \"Country Code\": \"iso_code\",\n                \"Value\": \"population\",\n            }))\n        );\n\nexport const transformCsvData = (data: IDataFrame): IDataFrame => data;\n\ntype Maximums = Map<string, number>;\n\ntype Accumulator = {\n    maximums: Maximums,\n    result: IDataFrame,\n}\n\nconst computeLatestPopulation = (population: IDataFrame): IDataFrame =>\n    population\n        .groupBy(row => row.iso_code)\n        .select(group => {\n            const { year: maxYear } = group.summarize({ year: Series.max });\n            const pop = group.where(row => row.year === maxYear).first().population;\n            return {\n                iso_code: group.first().iso_code,\n                population: pop,\n            };\n        }).inflate();\n\nexport const mergeCovidPopulation = (covid: IDataFrame, population: IDataFrame): IDataFrame => {\n    const populationLatest = computeLatestPopulation(population);\n    console.log(covid.toArray());\n    return covid.join(\n        populationLatest,\n        (covid: CovidRow) => covid.iso_code,\n        (pop: PopulationRow) => pop.iso_code,\n        (covid: CovidRow, pop: PopulationRow | null) => (\n            {\n                ...covid,\n                population: pop ? pop.population : 0\n            }\n        )\n    );\n};\n","import { initialState, State, LoadedState, LoadingState } from \"./store\";\n\nimport { Action } from \"./actions\";\nimport { transformCsvData } from \"./data\";\n\nimport { assertNever } from \"./utils\";\n\nimport { includes, filter } from \"lodash/fp\";\n\nimport { getPickedCountriesFromUrl, updateCountriesInPathName } from \"./router\";\n\nconst errorReducer = (state: State, action: Action): State => state;\n\nconst loadingReducer = (state: LoadingState, action: Action): State => {\n  switch (action.type) {\n    case \"fetch-success\":\n      const pickedCountries = getPickedCountriesFromUrl(state.routing.url);\n      return {\n        ...state,\n        type: \"loaded\",\n        data: transformCsvData(action.response),\n        ui: {\n          pickedCountries,\n          searchText: \"\",\n        },\n        routing: {\n          url: updateCountriesInPathName(state.routing.url, pickedCountries)\n        }\n      };\n    case \"progress\":\n      return {\n        ...state,\n        progress: {\n          ...state.progress,\n          [action.target]: {\n            done: action.done,\n            total: state.progress[action.target].total,\n            ...(action.total !== 0 && { total: action.total }),\n          },\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nconst loadedReducer = (state: LoadedState, action: Action): State => {\n  switch (action.type) {\n    case \"country-toggled\":\n      const toggleCountryToPicked = (\n        country: string,\n        countries: string[],\n      ): string[] => {\n        if (includes(country)(countries)) {\n          return filter(c => c !== country, countries);\n        }\n\n        return [country, ...countries];\n      };\n\n      const newCountries = toggleCountryToPicked(\n        action.countryCode,\n        state.ui.pickedCountries,\n      );\n\n      return {\n        ...state,\n        ui: {\n          ...state.ui,\n          pickedCountries: newCountries,\n        },\n        routing: {\n          url: updateCountriesInPathName(state.routing.url, newCountries),\n        },\n      };\n    case \"country-search-changed\":\n      return { ...state, ui: { ...state.ui, searchText: action.search } };\n    default:\n      return state;\n  }\n};\n\nexport const reducer = (state: State = initialState, action: Action): State => {\n  switch (state.type) {\n    case \"error\":\n      return errorReducer(state, action);\n    case \"loading\":\n      return loadingReducer(state, action);\n    case \"loaded\":\n      return loadedReducer(state, action);\n    default:\n      return assertNever(state);\n  }\n};\n","import { Observable, zip, merge } from \"rxjs\";\n\nimport { filter, flatMap, map } from \"rxjs/operators\";\n\nimport { Action, makeProgressAction, ProgressAction } from \"./actions\";\n\nimport { combineEpics } from \"redux-observable\";\n\nimport {\n  parseCovidCSV,\n  parsePopulationCSV,\n  mergeCovidPopulation,\n} from \"./data\";\nimport { IDataFrame } from \"data-forge\";\n\ntype DataResult =\n  | { type: \"success\"; data: IDataFrame }\n  | { type: \"error\"; reason: string };\n\ninterface Progress {\n  done: number;\n  total: number;\n}\n\nconst fromXhr = (\n  url: string,\n): {\n  progress: Observable<Progress>;\n  result: Observable<string>;\n} => {\n  const xhr = new XMLHttpRequest();\n  xhr.responseType = \"text\";\n  const progress$ = new Observable<Progress>((subscriber): void => {\n    xhr.addEventListener(\"progress\", ev =>\n      subscriber.next({\n        done: ev.loaded,\n        total: ev.total,\n      }),\n    );\n  });\n\n  const result$ = new Observable<string>(subscriber => {\n    xhr.addEventListener(\"readystatechange\", ev => {\n      if (xhr.readyState !== 4) {\n        return;\n      }\n\n      if (xhr.status === 200) {\n        subscriber.next(xhr.response);\n        subscriber.complete();\n      } else {\n        subscriber.error(xhr.response);\n      }\n    });\n  });\n\n  xhr.open(\"GET\", url);\n  xhr.send();\n  return { progress: progress$, result: result$ };\n};\n\nexport const startLoadingEpic = (\n  action$: Observable<Action>,\n): Observable<Action> => {\n  const covidData$: Observable<ProgressAction | DataResult> = action$.pipe(\n    filter((action: Action) => action.type === \"initialized\"),\n    flatMap(() => {\n      const { progress, result } = fromXhr(\n        \"https://covid.ourworldindata.org/data/owid-covid-data.csv\",\n      );\n      const progress$ = progress.pipe(\n        map((update: Progress) =>\n          makeProgressAction({ ...update, target: \"covid\" }),\n        ),\n      );\n\n      const result$ = result.pipe(\n        flatMap(parseCovidCSV),\n        map((data: IDataFrame): DataResult => ({ type: \"success\", data })),\n      );\n\n      return merge(progress$, result$);\n    }),\n  );\n\n  const populationData$: Observable<ProgressAction | DataResult> = action$.pipe(\n    filter((action: Action) => action.type === \"initialized\"),\n    flatMap(() => {\n      const { progress, result } = fromXhr(\n        \"https://raw.githubusercontent.com/datasets/population/master/data/population.csv\",\n      );\n      const progress$ = progress.pipe(\n        map((update: Progress) =>\n          makeProgressAction({ ...update, target: \"population\" }),\n        ),\n      );\n\n      const result$ = result.pipe(\n        flatMap(parsePopulationCSV),\n        map((data: IDataFrame): DataResult => ({ type: \"success\", data })),\n      );\n\n      return merge(progress$, result$);\n    }),\n  );\n\n  const combinedProgress$: Observable<ProgressAction> = merge(\n    covidData$,\n    populationData$,\n  ).pipe(\n    filter(item => item.type === \"progress\"),\n    map(item => item as ProgressAction),\n  );\n\n  const filterForResult = (data$: Observable<ProgressAction | DataResult>) =>\n    data$.pipe(filter(item => item.type === \"success\"));\n\n  const combinedResults$: Observable<Action> = zip(\n    filterForResult(covidData$),\n    filterForResult(populationData$),\n  ).pipe(\n    map(\n      ([covid, population]): Action => {\n        console.log(\"happened\");\n        if (covid.type === \"success\" && population.type === \"success\") {\n          return {\n            type: \"fetch-success\",\n            response: mergeCovidPopulation(covid.data, population.data),\n          };\n        } else {\n          return {\n            type: \"error-during-fetch\",\n            message: `Error: ${covid} or ${population} failed to fetch`,\n          };\n        }\n      },\n    ),\n  );\n\n  return merge(combinedProgress$, combinedResults$);\n};\n\nexport const rootEpic = combineEpics(startLoadingEpic);\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { reducer } from \"./reducers\";\nimport { createEpicMiddleware } from \"redux-observable\";\nimport { rootEpic } from \"./epics\";\nimport { makeInitialized } from \"./actions\";\nimport { IDataFrame } from \"data-forge\";\nimport { Store as ReduxStore } from \"redux\";\nimport { Action } from \"./actions\";\nimport { setupRouting } from \"./router\";\n\nexport type State = (LoadingState | LoadedState | ErrorState);\ninterface RoutingState {\n  routing: {\n    url: string,\n  }\n}\n\ninterface Progress {\n  done: number;\n  total: number;\n}\nexport type LoadingState = {\n  type: \"loading\";\n  progress: {\n    covid: Progress;\n    population: Progress;\n  };\n} & RoutingState;\n\nexport type UIState = {\n  pickedCountries: string[];\n  searchText: string;\n}\n\nexport type LoadedState = {\n  type: \"loaded\";\n  data: IDataFrame;\n  ui: UIState;\n} & RoutingState\n\nexport type ErrorState = {\n  type: \"error\";\n  message: string;\n} & RoutingState;\n\nconst covidSizeEstimate = 2542856;\nconst populationSizeEstimate = 487991;\n\nexport const initialState: State = {\n  type: \"loading\",\n  progress: {\n    covid: { done: 0, total: covidSizeEstimate },\n    population: { done: 0, total: populationSizeEstimate },\n  },\n  routing: {\n    url: window.location.toString(),\n  }\n};\n\nexport type Store = ReduxStore<State, Action>;\n\nconst epicMiddleware = createEpicMiddleware();\nexport const store = configureStore({\n  reducer,\n  middleware: [epicMiddleware],\n});\nepicMiddleware.run(rootEpic);\n\nsetupRouting(store);\nstore.dispatch(makeInitialized());\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\n\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\n\nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  rootElement,\n);\n"],"sourceRoot":""}