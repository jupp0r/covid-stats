{"version":3,"sources":["components/SpacedPaper.tsx","components/Loading.tsx","actions/index.ts","components/CaseChart.tsx","components/CountryPicker.tsx","components/DataTable.tsx","store/data.ts","components/DeathCurve.tsx","components/NewCaseChart.tsx","components/Loaded.tsx","components/Error.tsx","utils.ts","components/highchartsTheme.ts","components/App.tsx","reducers/router.ts","reducers/reducers.ts","epics/index.ts","store/index.ts","index.tsx"],"names":["withPadding","createStyles","paperPadding","padding","SpacedPaper","withStyles","props","Box","m","p","Paper","className","classes","children","Loading","progress","useSelector","state","normalize","done","total","LinearProgress","variant","value","covid","population","makeProgressAction","type","selectDataToRenderIntoChart","ui","pickedCountries","map","pickedCountry","name","data","where","row","iso_code","toArray","date","getTime","total_cases","CaseChart","cases","logAxisSetting","caseChart","logSetting","options","chart","height","zoomType","title","text","xAxis","labels","step","yAxis","series","credits","enabled","dispatch","useDispatch","id","elevation","ToggleButtonGroup","onChange","_","newSetting","makeCaseChartLogSettingChangedAction","exclusive","aria-label","ToggleButton","highcharts","Highcharts","coutrySelector","createSelector","searchText","select","location","distinct","orderBy","toPairs","active","includes","filter","toLowerCase","startsWith","CountryPicker","autoWidthItem","width","allCountries","ListItem","button","key","onClick","countryCode","style","Checkbox","edge","checked","tabIndex","disableRipple","inputProps","TextField","placeholder","e","search","target","List","display","flexWrap","alignItems","justifyContent","tableIcons","Add","forwardRef","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","DataTable","dateToDisplay","dataTable","today","Date","yesterday","setTime","selectedDate","findFirstRowMachingDate","group","field","filtered","first","second","getFullYear","getMonth","getDate","count","filteredByAnythingPresent","orderByDescending","tableData","groupBy","new_cases","total_tests","getSeries","x","max","toString","tests_per_1m_population","Math","round","numberWithCommas","rowData","replace","columns","defaultSort","render","makeDataTableDateSelectionChangedAction","icons","fixedColumns","left","right","parseCovidCSV","of","fromCSV","pipe","df","parseDates","parseInts","parsePopulationCSV","renameSeries","Year","Value","mergeCovidPopulation","populationLatest","maxYear","summarize","year","Series","pop","inflate","computeLatestPopulation","join","smooth","amount","ceil","abs","results","i","length","valuesInAverage","sum","j","undefined","push","deathCurveSelector","country","deaths","total_deaths","new_deaths","sort","a","b","y","DeathCurve","min","tickInterval","formatter","this","toExponential","role","NewCaseChart","selectedCountries","countryCharts","countryData","movingAverage","enableMouseTracking","legend","Grid","item","container","justify","spacing","centered","textAlign","Loaded","href","Error","message","assertNever","setOptions","colors","backgroundColor","plotBackgroundColor","plotShadow","plotBorderWidth","color","font","subtitle","gridLineWidth","lineColor","tickColor","fontWeight","fontSize","fontFamily","minorTickInterval","lineWidth","tickWidth","itemStyle","itemHoverStyle","itemHiddenStyle","navigation","buttonOptions","theme","stroke","store","App","data-ribbon","px","py","my","updateCountriesInPathName","urlString","countries","url","URL","params","URLSearchParams","set","JSON","stringify","errorReducer","action","loadingReducer","get","defaultCountries","parsedCountries","parse","Array","isArray","console","error","getPickedCountriesFromUrl","routing","response","loadedReducer","newCountries","c","fromXhr","xhr","XMLHttpRequest","responseType","progress$","Observable","subscriber","addEventListener","ev","next","loaded","result$","readyState","status","complete","open","send","result","rootEpic","combineEpics","action$","covidData$","flatMap","update","merge","populationData$","combinedProgress$","filterForResult","data$","combinedResults$","zip","initialState","window","epicMiddleware","createEpicMiddleware","configureStore","reducer","middleware","run","subscribe","getState","history","pushState","document","body","scrollTop","rootElement","getElementById","darkTheme","createMuiTheme","palette","ReactDOM","StrictMode","ThemeProvider","CssBaseline"],"mappings":"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","file":"static/js/main.c1778e7b.chunk.js","sourcesContent":["import React from \"react\";\n\nimport {\n  Box,\n  Paper,\n  PaperProps,\n  withStyles,\n  createStyles,\n  WithStyles,\n} from \"@material-ui/core\";\n\nconst withPadding = createStyles({\n  paperPadding: {\n    padding: \"30px\",\n  },\n});\n\nconst spacedPaper: React.FC<PaperProps & WithStyles<typeof withPadding>> = (\n  props: PaperProps & WithStyles<typeof withPadding>,\n) => (\n  <Box m={3} p={3}>\n    <Paper {...props} className={props.classes.paperPadding}>\n      {props.children}\n    </Paper>\n  </Box>\n);\n\nexport const SpacedPaper = withStyles(withPadding)(spacedPaper);\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { LoadingState } from \"../store\";\n\nimport { LinearProgress } from \"@material-ui/core\";\nimport { SpacedPaper } from \"./SpacedPaper\";\n\nexport const Loading = () => {\n  const progress = useSelector((state: LoadingState) => state.progress);\n\n  const normalize = ({ done, total }: { done: number; total: number }) =>\n    (done / total) * 100;\n\n  return (\n    <SpacedPaper>\n      <div>\n        <h2>loading covid data</h2>\n        <LinearProgress\n          variant=\"determinate\"\n          value={normalize(progress.covid)}\n        />\n      </div>\n      <div>\n        <h2>loading world population data</h2>\n        <LinearProgress\n          variant=\"determinate\"\n          value={normalize(progress.population)}\n        />\n      </div>\n    </SpacedPaper>\n  );\n};\n","import { IDataFrame } from \"data-forge\";\n\nexport type Action =\n  | InitialAction\n  | ErrorDuringFetchAction\n  | FetchSuccessAction\n  | CountryToggleAction\n  | CountrySearchChangedAction\n  | ProgressAction\n  | UrlUpdatedAction\n  | CaseChartLogSettingChangedAction\n  | DataTableDateSelectionChangedAction;\n\nexport interface InitialAction {\n  type: \"initialized\";\n}\nexport const makeInitialized = (): InitialAction => ({\n  type: \"initialized\",\n});\n\nexport interface ErrorDuringFetchAction {\n  type: \"error-during-fetch\";\n  message: string;\n}\nexport const makeErrorDuringFetch = (\n  message: string,\n): ErrorDuringFetchAction => ({\n  type: \"error-during-fetch\",\n  message,\n});\n\nexport interface FetchSuccessAction {\n  type: \"fetch-success\";\n  response: IDataFrame;\n}\nexport const makeFetchSuccess = (response: IDataFrame): FetchSuccessAction => ({\n  type: \"fetch-success\",\n  response,\n});\n\nexport interface CountryToggleAction {\n  type: \"country-toggled\";\n  countryCode: string;\n}\nexport const makeCountryToggleAction = (\n  countryCode: string,\n): CountryToggleAction => ({\n  type: \"country-toggled\",\n  countryCode,\n});\n\nexport interface CountrySearchChangedAction {\n  type: \"country-search-changed\";\n  search: string;\n}\n\nexport const makeCoutrySearchChangedAction = (\n  search: string,\n): CountrySearchChangedAction => ({\n  type: \"country-search-changed\",\n  search,\n});\n\nexport interface ProgressAction {\n  type: \"progress\";\n  target: \"covid\" | \"population\";\n  done: number;\n  total: number;\n}\n\nexport const makeProgressAction = (progress: {\n  target: \"covid\" | \"population\";\n  done: number;\n  total: number;\n}): ProgressAction => {\n  return { ...progress, type: \"progress\" };\n};\n\nexport interface UrlUpdatedAction {\n  type: \"url-updated\";\n  url: string;\n}\n\nexport const makeUrlUpdated = (url: string): UrlUpdatedAction => ({\n  type: \"url-updated\",\n  url,\n});\n\nexport interface CaseChartLogSettingChangedAction {\n  type: \"case-chart-log-setting-changed\";\n  newSetting: \"linear\" | \"logarithmic\";\n}\n\nexport const makeCaseChartLogSettingChangedAction = (\n  newSetting: \"linear\" | \"logarithmic\",\n): CaseChartLogSettingChangedAction => ({\n  type: \"case-chart-log-setting-changed\",\n  newSetting,\n});\n\nexport interface DataTableDateSelectionChangedAction {\n  type: \"data-table-date-selection-changed\";\n  newSetting: \"today\" | \"yesterday\";\n}\n\nexport const makeDataTableDateSelectionChangedAction = (\n  newSetting: \"today\" | \"yesterday\",\n): DataTableDateSelectionChangedAction => ({\n  type: \"data-table-date-selection-changed\",\n  newSetting,\n});\n","import React from \"react\";\n\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nimport { LoadedState } from \"../store\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { makeCaseChartLogSettingChangedAction } from \"../actions\";\n\nimport { SpacedPaper } from \"./SpacedPaper\";\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\n\nconst selectDataToRenderIntoChart = (\n  state: LoadedState,\n): {\n  name: string;\n  data: [Date, number][];\n  type: \"line\";\n}[] =>\n  state.ui.pickedCountries.map((pickedCountry: string) => ({\n    name: pickedCountry,\n    data: state.data\n      .where(row => row.iso_code === pickedCountry)\n      .toArray()\n      .map(row => [\n        row.date.getTime(),\n        (row.total_cases * 1000000) / row.population,\n      ]),\n    type: \"line\",\n  }));\n\nexport const CaseChart = () => {\n  const cases = useSelector(selectDataToRenderIntoChart);\n  const logAxisSetting = useSelector(\n    (state: LoadedState) => state.ui.caseChart.logSetting,\n  );\n\n  const options: Highcharts.Options = {\n    chart: {\n      height: \"50%\",\n      zoomType: \"x\",\n    },\n    title: {\n      text: \"\",\n    },\n    xAxis: {\n      type: \"datetime\",\n      title: {\n        text: \"Date\",\n      },\n      labels: {\n        step: 1,\n      },\n    },\n    yAxis: {\n      type: logAxisSetting,\n      title: {\n        text: \"Cases per 1M population\",\n      },\n    },\n    series: cases,\n    credits: {\n      enabled: false,\n    },\n  };\n\n  const dispatch = useDispatch();\n  const handleAxisLogarithmicToggle = (_: any, newSetting: string | null) => {\n    if (!newSetting) {\n      return;\n    }\n\n    if (!(newSetting === \"linear\" || newSetting === \"logarithmic\")) {\n      return;\n    }\n\n    dispatch(makeCaseChartLogSettingChangedAction(newSetting));\n  };\n\n  return (\n    <SpacedPaper id=\"cases\" elevation={3}>\n      <h2>Cases over Time</h2>\n      <ToggleButtonGroup\n        value={logAxisSetting}\n        onChange={handleAxisLogarithmicToggle}\n        exclusive\n        aria-label=\"log axis setting\"\n      >\n        <ToggleButton value=\"logarithmic\" aria-label=\"logarithmic\">\n          log\n        </ToggleButton>\n        <ToggleButton value=\"linear\" aria-label=\"linear\">\n          linear\n        </ToggleButton>\n      </ToggleButtonGroup>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </SpacedPaper>\n  );\n};\n","import React, { CSSProperties } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { LoadedState } from \"../store\";\n\nimport { createSelector } from \"reselect\";\n\nimport { includes } from \"lodash/fp\";\nimport {\n  makeCountryToggleAction,\n  makeCoutrySearchChangedAction,\n} from \"../actions\";\nimport { IDataFrame } from \"data-forge\";\n\nimport { List, ListItem, Checkbox, TextField } from \"@material-ui/core\";\n\nimport { SpacedPaper } from \"./SpacedPaper\";\n\nconst dataSelector = (state: LoadedState) => state.data;\nconst pickedCountriesSelector = (state: LoadedState) =>\n  state.ui.pickedCountries;\nconst searchTextSelector = (state: LoadedState) => state.ui.searchText;\n\nconst coutrySelector = createSelector(\n  dataSelector,\n  pickedCountriesSelector,\n  searchTextSelector,\n  (data: IDataFrame, pickedCountries: string[], searchText) =>\n    data\n      .select(\n        ({ iso_code, location }: { iso_code: string; location: string }) => ({\n          iso_code,\n          location,\n        }),\n      )\n      .distinct(row => row.iso_code)\n      .orderBy(row => row.location)\n      .toPairs()\n      .map(([_, row]) => ({\n        ...row,\n        active: includes(row.iso_code)(pickedCountries),\n      }))\n      .filter(\n        row =>\n          row.active ||\n          (searchText !== \"\" &&\n            row.location.toLowerCase().startsWith(searchText.toLowerCase())),\n      ),\n);\n\nexport const CountryPicker = () => {\n  const dispatch = useDispatch();\n\n  const autoWidthItem: CSSProperties = {\n    width: \"180px\",\n  };\n\n  const allCountries = useSelector(coutrySelector).map(\n    ({ iso_code, location, active }) => (\n      <ListItem\n        button\n        key={iso_code}\n        onClick={_ => dispatch(makeCountryToggleAction(iso_code))}\n        style={autoWidthItem}\n      >\n        <Checkbox\n          edge=\"start\"\n          checked={active}\n          tabIndex={-1}\n          disableRipple\n          inputProps={{ \"aria-labelledby\": iso_code }}\n        />\n        {location}\n      </ListItem>\n    ),\n  );\n\n  const searchText = useSelector((state: LoadedState) => state.ui.searchText);\n\n  const flexContainer: CSSProperties = {\n    display: \"flex\",\n    padding: 0,\n    flexWrap: \"wrap\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  };\n\n  return (\n    <SpacedPaper elevation={3}>\n      <label>\n        <br />\n        <TextField\n          type=\"text\"\n          name=\"search\"\n          placeholder=\"Search Countries\"\n          onChange={e =>\n            dispatch(makeCoutrySearchChangedAction(e.target.value))\n          }\n          value={searchText}\n        />\n        <List id=\"countries\" style={flexContainer}>\n          {allCountries}\n        </List>\n      </label>\n    </SpacedPaper>\n  );\n};\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport MaterialTable, { Icons, Column } from \"material-table\";\nimport { SpacedPaper } from \"./SpacedPaper\";\nimport { LoadedState } from \"../store\";\n\nimport { forwardRef } from \"react\";\n\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport { ToggleButtonGroup, ToggleButton } from \"@material-ui/lab\";\n\nimport { makeDataTableDateSelectionChangedAction } from \"../actions\";\n\nimport { IDataFrame } from \"data-forge\";\n\nconst tableIcons: Icons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst datesAreOnSameDay = (first: Date, second: Date) =>\n  first.getFullYear() === second.getFullYear() &&\n  first.getMonth() === second.getMonth() &&\n  first.getDate() === second.getDate();\n\nexport const DataTable = () => {\n  const data = useSelector((state: LoadedState) => state.data);\n  const dateToDisplay = useSelector(\n    (state: LoadedState) => state.ui.dataTable.dateToDisplay,\n  );\n\n  const today = new Date();\n  const dateOffset = 24 * 60 * 60 * 1000 * 1; // 1 day\n  let yesterday = new Date();\n  yesterday.setTime(yesterday.getTime() - dateOffset);\n\n  const selectedDate = dateToDisplay === \"today\" ? today : yesterday;\n\n  const findFirstRowMachingDate = (\n    group: IDataFrame,\n    date: Date,\n    field: string,\n  ) => {\n    const filtered: IDataFrame = group.where((row: { date: Date }) =>\n      datesAreOnSameDay(row.date, selectedDate),\n    );\n\n    if (filtered.count() === 0) {\n      const filteredByAnythingPresent = group\n        .orderByDescending(row => row.date)\n        .where(row => row[field]);\n\n      if (filteredByAnythingPresent.count() === 0) {\n        return undefined;\n      }\n\n      return filteredByAnythingPresent.first()[field];\n    }\n\n    return filtered.first()[field];\n  };\n\n  const tableData = data\n    .orderByDescending(row => row.date)\n    .groupBy(row => row.iso_code)\n    .select(group => ({\n      date: group.first().date,\n      iso_code: group.first().iso_code,\n      location: group.first().location,\n      total_cases: findFirstRowMachingDate(group, selectedDate, \"total_cases\"),\n      new_cases: findFirstRowMachingDate(group, selectedDate, \"new_cases\"),\n      total_tests: group\n        .getSeries(\"total_tests\")\n        .select(x => (x ? x : 0))\n        .max(),\n      population: group.first().population,\n    }))\n    .toArray()\n    .map(row => ({\n      ...row,\n      date: row.date.toString(),\n      tests_per_1m_population: Math.round(\n        (row.total_tests * 1000000) / row.population,\n      ),\n    }));\n\n  const numberWithCommas = (field: string) => (rowData: any) =>\n    rowData[field].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\n  const columns: Column<any>[] = [\n    {\n      title: \"Country\",\n      field: \"location\",\n    },\n    {\n      title: \"Total Cases\",\n      field: \"total_cases\",\n      type: \"numeric\",\n      defaultSort: \"desc\",\n      render: numberWithCommas(\"total_cases\"),\n    },\n    {\n      title: \"New Cases\",\n      field: \"new_cases\",\n      type: \"numeric\",\n      render: numberWithCommas(\"new_cases\"),\n    },\n    {\n      title: \"Tests per 1M population\",\n      field: \"tests_per_1m_population\",\n      type: \"numeric\",\n      render: numberWithCommas(\"tests_per_1m_population\"),\n    },\n    {\n      title: \"Total Tests\",\n      field: \"total_tests\",\n      type: \"numeric\",\n      render: numberWithCommas(\"total_tests\"),\n    },\n  ];\n\n  const dispatch = useDispatch();\n  const handleDateSelection = (_: any, newSetting: string | null) => {\n    if (!newSetting) {\n      return;\n    }\n\n    if (!(newSetting === \"today\" || newSetting === \"yesterday\")) {\n      return;\n    }\n\n    dispatch(makeDataTableDateSelectionChangedAction(newSetting));\n  };\n\n  const options = {\n    fixedColumns: {\n      left: 1,\n      right: 0,\n    },\n  };\n\n  return (\n    <SpacedPaper>\n      <ToggleButtonGroup\n        value={dateToDisplay}\n        onChange={handleDateSelection}\n        exclusive\n        aria-label=\"log axis setting\"\n      >\n        <ToggleButton value=\"today\" aria-label=\"today\">\n          today\n        </ToggleButton>\n        <ToggleButton value=\"yesterday\" aria-label=\"yesterday\">\n          yesterday\n        </ToggleButton>\n      </ToggleButtonGroup>\n      <MaterialTable\n        columns={columns}\n        data={tableData}\n        title=\"Country Table\"\n        icons={tableIcons}\n        options={options}\n      ></MaterialTable>\n    </SpacedPaper>\n  );\n};\n","import { Observable, of } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { fromCSV, IDataFrame, Series } from \"data-forge\";\n\ninterface CovidRow {\n  iso_code: string;\n}\n\ninterface PopulationRow {\n  iso_code: string;\n  population: string;\n  year: number;\n}\n\nexport const parseCovidCSV = (data: string): Observable<IDataFrame> =>\n  of(fromCSV(data)).pipe(\n    map((df: IDataFrame): IDataFrame => df.parseDates(\"date\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"total_cases\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"new_cases\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"total_deaths\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"new_deaths\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"total_tests\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"new_tests\")),\n  );\n\nexport const parsePopulationCSV = (data: string): Observable<IDataFrame> =>\n  of(fromCSV(data)).pipe(\n    map((df: IDataFrame): IDataFrame => df.parseInts([\"Value\", \"Year\"])),\n    map(\n      (df: IDataFrame): IDataFrame =>\n        df.renameSeries({\n          Year: \"year\",\n          \"Country Code\": \"iso_code\",\n          Value: \"population\",\n        }),\n    ),\n  );\n\nexport const transformCsvData = (data: IDataFrame): IDataFrame => data;\n\ntype Maximums = Map<string, number>;\n\ntype Accumulator = {\n  maximums: Maximums;\n  result: IDataFrame;\n};\n\nconst computeLatestPopulation = (population: IDataFrame): IDataFrame =>\n  population\n    .groupBy(row => row.iso_code)\n    .select(group => {\n      const { year: maxYear } = group.summarize({ year: Series.max });\n      const pop = group.where(row => row.year === maxYear).first().population;\n      return {\n        iso_code: group.first().iso_code,\n        population: pop,\n      };\n    })\n    .inflate();\n\nexport const mergeCovidPopulation = (\n  covid: IDataFrame,\n  population: IDataFrame,\n): IDataFrame => {\n  const populationLatest = computeLatestPopulation(population);\n  return covid.join(\n    populationLatest,\n    (covid: CovidRow) => covid.iso_code,\n    (pop: PopulationRow) => pop.iso_code,\n    (covid: CovidRow, pop: PopulationRow | null) => ({\n      ...covid,\n      population: pop ? pop.population : 0,\n    }),\n  );\n};\n\nexport const smooth = (amount: number, series: number[][]): number[][] => {\n  amount = Math.ceil(Math.abs(amount));\n  let results: Array<Array<number>> = [];\n  for (let i = 0; i < series.length; i++) {\n    let [x] = series[i];\n\n    let valuesInAverage = 0;\n    let sum = 0;\n    for (let j = amount * -1; j <= amount; j++) {\n      if (series[i + j] === undefined) {\n        // ignore edges\n        continue;\n      }\n\n      sum = sum + series[i + j][1];\n      valuesInAverage = valuesInAverage + 1;\n    }\n\n    results.push([x, sum / valuesInAverage]);\n  }\n  return results;\n};\n","import React from \"react\";\n\nimport Highcharts, { SeriesOptionsType } from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nimport { useSelector } from \"react-redux\";\nimport { LoadedState } from \"../store\";\n\nimport { smooth } from \"../store/data\";\n\nimport { SpacedPaper } from \"./SpacedPaper\";\n\nconst deathCurveSelector = (state: LoadedState): SeriesOptionsType[] =>\n  state.ui.pickedCountries.map(country => {\n    const filteredByCountry = state.data.where(row => row.iso_code === country);\n\n    const deaths = filteredByCountry.select(row => ({\n      iso_code: row.iso_code,\n      total_deaths: row.total_deaths,\n      population: row.population,\n      new_deaths: row.new_deaths,\n    }));\n\n    return {\n      name: country,\n      type: \"line\",\n      data: smooth(\n        2,\n        deaths\n          .toArray()\n          .map(row => [\n            row.total_deaths / row.population,\n            row.new_deaths / row.population,\n          ])\n          .sort(([a, _], [b, __]) => (a < b ? -1 : 1)),\n      ).filter(([x, y]) => x !== 0 && y !== 0),\n    };\n  });\n\nexport const DeathCurve = () => {\n  const deaths = useSelector(deathCurveSelector);\n\n  const options: Highcharts.Options = {\n    title: {\n      text: \"\",\n    },\n    chart: {\n      height: \"50%\",\n      zoomType: \"xy\",\n    },\n    xAxis: {\n      type: \"logarithmic\",\n      title: {\n        text: \"Fraction of dead population\",\n      },\n      min: 1e-6,\n      tickInterval: 1,\n      labels: {\n        step: 1,\n        formatter: function () {\n          return this.value.toExponential(0);\n        },\n      },\n    },\n    yAxis: {\n      type: \"logarithmic\",\n      title: {\n        text: \"Fraction of dead population per day (smoothed)\",\n      },\n      min: 1e-7,\n      tickInterval: 1,\n      labels: {\n        step: 1,\n        formatter: function () {\n          return this.value.toExponential(0);\n        },\n      },\n    },\n    series: deaths,\n    credits: {\n      enabled: false,\n    },\n  };\n\n  return (\n    <SpacedPaper id=\"deathcurve\" elevation={3}>\n      <h2>\n        Robins Death Curve\n        <span role=\"img\" aria-label=\"tm\">\n          ™️\n        </span>\n      </h2>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </SpacedPaper>\n  );\n};\n","import React from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { LoadedState } from \"../store\";\nimport Highcharts, { SeriesOptionsType } from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport { smooth } from \"../store/data\";\nimport { SpacedPaper } from \"./SpacedPaper\";\n\nexport const NewCaseChart = () => {\n  const selectedCountries = useSelector(\n    (state: LoadedState) => state.ui.pickedCountries,\n  );\n\n  const data = useSelector((state: LoadedState) => state.data);\n  const countryCharts = selectedCountries.map(country => {\n    const countryData = {\n      name: country,\n      type: \"column\",\n      data: data\n        .where(\n          row => row.iso_code === country && row.date > new Date(\"03-01-2020\"),\n        )\n        .toArray()\n        .map(row => [row.date.getTime(), row.new_cases])\n        .sort(),\n    };\n\n    const movingAverage: SeriesOptionsType = {\n      name: \"7 day average\",\n      data: smooth(3, countryData.data),\n      type: \"line\",\n      enableMouseTracking: false,\n    };\n\n    const options: Highcharts.Options = {\n      chart: {\n        height: \"200\",\n        width: \"300\",\n      },\n      title: {\n        text: country,\n      },\n      xAxis: {\n        type: \"datetime\",\n        tickInterval: 7 * 24 * 3600 * 1000,\n      },\n      yAxis: {\n        title: {\n          text: \"daily new cases\",\n        },\n      },\n      legend: {\n        enabled: false,\n      },\n      series: [countryData as SeriesOptionsType, movingAverage],\n      credits: {\n        enabled: false,\n      },\n    };\n\n    return (\n      <Grid item key={country}>\n        <HighchartsReact highcharts={Highcharts} options={options} />\n      </Grid>\n    );\n  });\n\n  return (\n    <SpacedPaper elevation={3} id=\"new-cases\">\n      <h2>New Cases</h2>\n      <Grid container justify=\"center\" spacing={5}>\n        {countryCharts}\n      </Grid>\n    </SpacedPaper>\n  );\n};\n","import React from \"react\";\n\nimport { CaseChart } from \"./CaseChart\";\nimport { CountryPicker } from \"./CountryPicker\";\nimport { DataTable } from \"./DataTable\";\nimport { DeathCurve } from \"./DeathCurve\";\nimport { NewCaseChart } from \"./NewCaseChart\";\n\nconst centered: React.CSSProperties = { textAlign: \"center\" };\n\nexport const Loaded = () => {\n  return (\n    <div>\n      <h1>Covid Stats</h1>\n      <DataTable />\n      <CountryPicker />\n      <NewCaseChart />\n      <CaseChart />\n      <DeathCurve />\n      <div style={centered}>\n        data from{\" \"}\n        <a href=\"https://covid.ourworldindata.org\">Our World In Data</a> and{\" \"}\n        <a href=\"https://github.com/datasets/population\">\n          datahub.io via the World Bank\n        </a>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { ErrorState } from \"../store\";\nimport { useSelector } from \"react-redux\";\n\nexport const Error = () => {\n  const message = useSelector((state: ErrorState) => state.message);\n  return <div>Error: {message}</div>;\n};\n","export function assertNever(x: never): never {\n    throw new Error(\"Unexpected object: \" + x);\n}","import Highcharts from \"highcharts\";\n\nconst theme: Highcharts.Options = {\n  colors: [\n    \"#058DC7\",\n    \"#50B432\",\n    \"#ED561B\",\n    \"#DDDF00\",\n    \"#24CBE5\",\n    \"#64E572\",\n    \"#FF9655\",\n    \"#FFF263\",\n    \"#6AF9C4\",\n  ],\n  chart: {\n    backgroundColor: \"#FFFFFF\",\n    plotBackgroundColor: \"rgba(255, 255, 255, .9)\",\n    plotShadow: false,\n    plotBorderWidth: 0,\n  },\n  title: {\n    style: {\n      color: \"#000\",\n      font: 'bold 16px \"Trebuchet MS\", Verdana, sans-serif',\n    },\n  },\n  subtitle: {\n    style: {\n      color: \"#666666\",\n      font: 'bold 12px \"Trebuchet MS\", Verdana, sans-serif',\n    },\n  },\n  xAxis: {\n    gridLineWidth: 1,\n    lineColor: \"#000\",\n    tickColor: \"#000\",\n    labels: {\n      style: {\n        color: \"#000\",\n        font: \"11px Trebuchet MS, Verdana, sans-serif\",\n      },\n    },\n    title: {\n      style: {\n        color: \"#333\",\n        fontWeight: \"bold\",\n        fontSize: \"12px\",\n        fontFamily: \"Trebuchet MS, Verdana, sans-serif\",\n      },\n    },\n  },\n  yAxis: {\n    minorTickInterval: \"auto\",\n    lineColor: \"#000\",\n    lineWidth: 1,\n    tickWidth: 1,\n    tickColor: \"#000\",\n    labels: {\n      style: {\n        color: \"#000\",\n        font: \"11px Trebuchet MS, Verdana, sans-serif\",\n      },\n    },\n    title: {\n      style: {\n        color: \"#333\",\n        fontWeight: \"bold\",\n        fontSize: \"12px\",\n        fontFamily: \"Trebuchet MS, Verdana, sans-serif\",\n      },\n    },\n  },\n  legend: {\n    itemStyle: {\n      font: \"9pt Trebuchet MS, Verdana, sans-serif\",\n      color: \"black\",\n    },\n    itemHoverStyle: {\n      color: \"#039\",\n    },\n    itemHiddenStyle: {\n      color: \"gray\",\n    },\n  },\n  navigation: {\n    buttonOptions: {\n      theme: {\n        stroke: \"#CCCCCC\",\n      },\n    },\n  },\n};\n\nHighcharts.setOptions(theme);\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"./App.css\";\nimport \"github-fork-ribbon-css/gh-fork-ribbon.css\";\n\nimport { State } from \"../store\";\n\nimport { Loading } from \"./Loading\";\nimport { Loaded } from \"./Loaded\";\nimport { Error } from \"./Error\";\n\nimport { assertNever } from \"../utils\";\nimport \"./highchartsTheme\";\n\nimport Box from \"@material-ui/core/Box\";\n\nexport const App = () => {\n  const type = useSelector<State, State[\"type\"]>(state => state.type);\n\n  return (\n    <>\n      <a\n        className=\"github-fork-ribbon right-top\"\n        href=\"https://github.com/jupp0r/covid-stats\"\n        data-ribbon=\"Fork me on GitHub\"\n        title=\"Fork me on GitHub\"\n      >\n        Fork me on GitHub\n      </a>\n      <Box px={3} py={3} my={3} textAlign=\"center\">\n        {((type: State[\"type\"]) => {\n          switch (type) {\n            case \"loading\":\n              return <Loading />;\n            case \"loaded\":\n              return <Loaded />;\n            case \"error\":\n              return <Error />;\n            default:\n              return assertNever(type);\n          }\n        })(type)}\n      </Box>\n    </>\n  );\n};\n","import { Action } from \"../actions\";\nimport { State } from \"../store\";\n\nimport { Store } from \"redux\";\n\nimport { makeUrlUpdated } from \"../actions\";\nimport { defaultCountries } from \"../store\";\n\n\nexport const updateCountriesInPathName = (\n  urlString: string,\n  countries: string[],\n): string => {\n  const url = new URL(urlString);\n  const params = new URLSearchParams(url.search);\n  params.set(\"countries[]\", JSON.stringify(countries));\n  url.search = params.toString();\n  return url.toString();\n};\n\nexport const getPickedCountriesFromUrl = (urlString: string): string[] => {\n  const url = new URL(urlString);\n  const params = new URLSearchParams(url.search);\n  const countries = params.get(\"countries[]\");\n  if (!countries) {\n    return defaultCountries;\n  }\n\n  const parsedCountries: string[] = JSON.parse(countries);\n\n  if (!Array.isArray(parsedCountries)) {\n    console.error(\"invalid url params\");\n    return defaultCountries;\n  }\n\n  return parsedCountries;\n};\n\nexport const setupRouting = (store: Store<State, Action>) => {\n  window.addEventListener(\"popstate\", () => {\n    store.dispatch(makeUrlUpdated(window.location.toString()));\n  });\n\n  store.subscribe(() => {\n    const { url } = store.getState().routing;\n    if (window.location.toString() !== url) {\n      window.history.pushState(null, \"\", url);\n      document.body.scrollTop = 0;\n    }\n  });\n};\n","import { initialState, State, LoadedState, LoadingState } from \"../store\";\n\nimport { Action } from \"../actions\";\nimport { transformCsvData } from \"../store/data\";\n\nimport { assertNever } from \"../utils\";\n\nimport { includes, filter } from \"lodash/fp\";\n\nimport { getPickedCountriesFromUrl, updateCountriesInPathName } from \"./router\";\n\nconst errorReducer = (state: State, action: Action): State => state;\n\nconst loadingReducer = (state: LoadingState, action: Action): State => {\n  switch (action.type) {\n    case \"fetch-success\":\n      const pickedCountries = getPickedCountriesFromUrl(state.routing.url);\n      return {\n        ...state,\n        type: \"loaded\",\n        data: transformCsvData(action.response),\n        ui: {\n          pickedCountries,\n          searchText: \"\",\n          caseChart: {\n            logSetting: \"logarithmic\",\n          },\n          dataTable: {\n            dateToDisplay: \"yesterday\",\n          },\n        },\n        routing: {\n          url: updateCountriesInPathName(state.routing.url, pickedCountries),\n        },\n      };\n    case \"progress\":\n      return {\n        ...state,\n        progress: {\n          ...state.progress,\n          [action.target]: {\n            done: action.done,\n            total: Math.max(state.progress[action.target].total, action.done),\n            ...(action.total !== 0 && {\n              total: Math.max(action.total, action.done),\n            }),\n          },\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nconst loadedReducer = (state: LoadedState, action: Action): State => {\n  switch (action.type) {\n    case \"country-toggled\":\n      const toggleCountryToPicked = (\n        country: string,\n        countries: string[],\n      ): string[] => {\n        if (includes(country)(countries)) {\n          return filter(c => c !== country, countries);\n        }\n\n        return [country, ...countries];\n      };\n\n      const newCountries = toggleCountryToPicked(\n        action.countryCode,\n        state.ui.pickedCountries,\n      );\n\n      return {\n        ...state,\n        ui: {\n          ...state.ui,\n          pickedCountries: newCountries,\n        },\n        routing: {\n          url: updateCountriesInPathName(state.routing.url, newCountries),\n        },\n      };\n    case \"country-search-changed\":\n      return { ...state, ui: { ...state.ui, searchText: action.search } };\n    case \"case-chart-log-setting-changed\":\n      return {\n        ...state,\n        ui: {\n          ...state.ui,\n          caseChart: { ...state.ui.caseChart, logSetting: action.newSetting },\n        },\n      };\n    case \"data-table-date-selection-changed\":\n      return {\n        ...state,\n        ui: {\n          ...state.ui,\n          dataTable: {\n            ...state.ui.dataTable,\n            dateToDisplay: action.newSetting,\n          },\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport const reducer = (state: State = initialState, action: Action): State => {\n  if (action.type === \"url-updated\") {\n    return { ...state, routing: { ...state.routing, url: action.url } };\n  }\n\n  switch (state.type) {\n    case \"error\":\n      return errorReducer(state, action);\n    case \"loading\":\n      return loadingReducer(state, action);\n    case \"loaded\":\n      return loadedReducer(state, action);\n    default:\n      return assertNever(state);\n  }\n};\n","import { Observable, zip, merge } from \"rxjs\";\n\nimport { filter, flatMap, map } from \"rxjs/operators\";\n\nimport { Action, makeProgressAction, ProgressAction } from \"../actions\";\n\nimport { combineEpics } from \"redux-observable\";\n\nimport {\n  parseCovidCSV,\n  parsePopulationCSV,\n  mergeCovidPopulation,\n} from \"../store/data\";\nimport { IDataFrame } from \"data-forge\";\n\ntype DataResult =\n  | { type: \"success\"; data: IDataFrame }\n  | { type: \"error\"; reason: string };\n\ninterface Progress {\n  done: number;\n  total: number;\n}\n\nconst fromXhr = (\n  url: string,\n): {\n  progress: Observable<Progress>;\n  result: Observable<string>;\n} => {\n  const xhr = new XMLHttpRequest();\n  xhr.responseType = \"text\";\n  const progress$ = new Observable<Progress>((subscriber): void => {\n    xhr.addEventListener(\"progress\", ev =>\n      subscriber.next({\n        done: ev.loaded,\n        total: ev.total,\n      }),\n    );\n  });\n\n  const result$ = new Observable<string>(subscriber => {\n    xhr.addEventListener(\"readystatechange\", ev => {\n      if (xhr.readyState !== 4) {\n        return;\n      }\n\n      if (xhr.status === 200) {\n        subscriber.next(xhr.response);\n        subscriber.complete();\n      } else {\n        subscriber.error(xhr.response);\n      }\n    });\n  });\n\n  xhr.open(\"GET\", url);\n  xhr.send();\n  return { progress: progress$, result: result$ };\n};\n\nexport const startLoadingEpic = (\n  action$: Observable<Action>,\n): Observable<Action> => {\n  const covidData$: Observable<ProgressAction | DataResult> = action$.pipe(\n    filter((action: Action) => action.type === \"initialized\"),\n    flatMap(() => {\n      const { progress, result } = fromXhr(\n        \"https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv\",\n      );\n      const progress$ = progress.pipe(\n        map((update: Progress) =>\n          makeProgressAction({ ...update, target: \"covid\" }),\n        ),\n      );\n\n      const result$ = result.pipe(\n        flatMap(parseCovidCSV),\n        map((data: IDataFrame): DataResult => ({ type: \"success\", data })),\n      );\n\n      return merge(progress$, result$);\n    }),\n  );\n\n  const populationData$: Observable<ProgressAction | DataResult> = action$.pipe(\n    filter((action: Action) => action.type === \"initialized\"),\n    flatMap(() => {\n      const { progress, result } = fromXhr(\n        \"https://raw.githubusercontent.com/datasets/population/master/data/population.csv\",\n      );\n      const progress$ = progress.pipe(\n        map((update: Progress) =>\n          makeProgressAction({ ...update, target: \"population\" }),\n        ),\n      );\n\n      const result$ = result.pipe(\n        flatMap(parsePopulationCSV),\n        map((data: IDataFrame): DataResult => ({ type: \"success\", data })),\n      );\n\n      return merge(progress$, result$);\n    }),\n  );\n\n  const combinedProgress$: Observable<ProgressAction> = merge(\n    covidData$,\n    populationData$,\n  ).pipe(\n    filter(item => item.type === \"progress\"),\n    map(item => item as ProgressAction),\n  );\n\n  const filterForResult = (data$: Observable<ProgressAction | DataResult>) =>\n    data$.pipe(filter(item => item.type === \"success\"));\n\n  const combinedResults$: Observable<Action> = zip(\n    filterForResult(covidData$),\n    filterForResult(populationData$),\n  ).pipe(\n    map(\n      ([covid, population]): Action => {\n        if (covid.type === \"success\" && population.type === \"success\") {\n          return {\n            type: \"fetch-success\",\n            response: mergeCovidPopulation(covid.data, population.data),\n          };\n        } else {\n          return {\n            type: \"error-during-fetch\",\n            message: `Error: ${covid} or ${population} failed to fetch`,\n          };\n        }\n      },\n    ),\n  );\n\n  return merge(combinedProgress$, combinedResults$);\n};\n\nexport const rootEpic = combineEpics(startLoadingEpic);\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { reducer } from \"../reducers/reducers\";\nimport { createEpicMiddleware } from \"redux-observable\";\nimport { rootEpic } from \"../epics\";\nimport { makeInitialized } from \"../actions\";\nimport { IDataFrame } from \"data-forge\";\nimport { Store as ReduxStore } from \"redux\";\nimport { Action } from \"../actions\";\nimport { setupRouting } from \"../reducers/router\";\n\nexport type State = (LoadingState | LoadedState | ErrorState);\ninterface RoutingState {\n  routing: {\n    url: string,\n  }\n}\n\ninterface Progress {\n  done: number;\n  total: number;\n}\nexport type LoadingState = {\n  type: \"loading\";\n  progress: {\n    covid: Progress;\n    population: Progress;\n  };\n} & RoutingState;\n\nexport type UIState = {\n  pickedCountries: string[];\n  searchText: string;\n  caseChart: {\n    logSetting: \"linear\" | \"logarithmic\";\n  };\n  dataTable: {\n    dateToDisplay: \"today\" | \"yesterday\";\n  };\n}\n\nexport type LoadedState = {\n  type: \"loaded\";\n  data: IDataFrame;\n  ui: UIState;\n} & RoutingState\n\nexport type ErrorState = {\n  type: \"error\";\n  message: string;\n} & RoutingState;\n\nconst covidSizeEstimate = 2459742;\nconst populationSizeEstimate = 487991;\n\nexport const initialState: State = {\n  type: \"loading\",\n  progress: {\n    covid: { done: 0, total: covidSizeEstimate },\n    population: { done: 0, total: populationSizeEstimate },\n  },\n  routing: {\n    url: window.location.toString(),\n  }\n};\n\nexport const defaultCountries = [\"USA\", \"DEU\", \"SWE\", \"ITA\", \"NGA\"];\n\nexport type Store = ReduxStore<State, Action>;\n\nconst epicMiddleware = createEpicMiddleware();\nexport const store = configureStore({\n  reducer,\n  middleware: [epicMiddleware],\n});\nepicMiddleware.run(rootEpic);\n\nsetupRouting(store);\nstore.dispatch(makeInitialized());\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./components/App\";\n\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\nimport { createMuiTheme, ThemeProvider, CssBaseline } from \"@material-ui/core\";\n\nimport \"typeface-roboto\";\n\nconst rootElement = document.getElementById(\"root\");\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: \"light\",\n  },\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <ThemeProvider theme={darkTheme}>\n        <CssBaseline />\n        <App />\n      </ThemeProvider>\n    </React.StrictMode>\n  </Provider>,\n  rootElement,\n);\n"],"sourceRoot":""}