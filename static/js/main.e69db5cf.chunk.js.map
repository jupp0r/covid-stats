{"version":3,"sources":["Loading.tsx","CaseChart.tsx","actions.ts","CountryPicker.tsx","data.ts","DeathCurve.tsx","NewCaseChart.tsx","Loaded.tsx","Error.tsx","utils.ts","App.tsx","router.ts","reducers.ts","epics.ts","store.ts","index.tsx"],"names":["Loading","progress","useSelector","state","covid","done","total","population","selectDataToRenderIntoChart","ui","pickedCountries","map","pickedCountry","name","data","where","row","iso_code","toArray","date","getTime","total_cases","type","CaseChart","options","title","text","chart","height","zoomType","xAxis","labels","step","yAxis","series","credits","enabled","id","highcharts","Highcharts","makeProgressAction","coutrySelector","select","location","distinct","orderBy","toPairs","active","includes","filter","searchText","toLowerCase","startsWith","CountryPicker","dispatch","useDispatch","allCountries","key","onClick","_","countryCode","checked","placeholder","onChange","e","search","target","value","style","listStyleType","align","parseCovidCSV","of","fromCSV","pipe","df","parseDates","parseInts","parsePopulationCSV","renameSeries","Year","Value","mergeCovidPopulation","populationLatest","groupBy","group","maxYear","summarize","year","Series","max","pop","first","inflate","computeLatestPopulation","join","smooth","amount","Math","ceil","abs","results","i","length","x","valuesInAverage","sum","j","undefined","push","deathCurveSelector","country","deaths","total_deaths","new_deaths","sort","a","b","y","DeathCurve","min","tickInterval","formatter","this","toExponential","role","aria-label","NewCaseChart","selectedCountries","countryCharts","countryData","Date","new_cases","movingAverage","width","legend","center","middle","columns","centered","textAlign","Loaded","href","Error","message","assertNever","GridTheme","store","App","className","data-ribbon","updateCountriesInPathName","urlString","countries","url","URL","params","URLSearchParams","set","JSON","stringify","toString","errorReducer","action","loadingReducer","get","defaultCountries","parsedCountries","parse","Array","isArray","console","error","getPickedCountriesFromUrl","routing","response","loadedReducer","newCountries","c","fromXhr","xhr","XMLHttpRequest","responseType","progress$","Observable","subscriber","addEventListener","ev","next","loaded","result$","readyState","status","complete","open","send","result","rootEpic","combineEpics","action$","covidData$","flatMap","update","merge","populationData$","combinedProgress$","item","filterForResult","data$","combinedResults$","zip","initialState","window","epicMiddleware","createEpicMiddleware","configureStore","reducer","middleware","run","subscribe","getState","history","pushState","document","body","scrollTop","rootElement","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e69db5cf.chunk.js","sourcesContent":["import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { LoadingState } from \"./store\";\n\nexport const Loading = () => {\n  const progress = useSelector((state: LoadingState) => state.progress);\n  return (\n    <div>\n      <div>\n        loading covid: {progress.covid.done} / {progress.covid.total}\n      </div>\n      <div>\n        loading population: {progress.population.done} /{\" \"}\n        {progress.population.total}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nimport { LoadedState } from \"./store\";\nimport { useSelector } from \"react-redux\";\n\nconst selectDataToRenderIntoChart = (\n  state: LoadedState,\n): {\n  name: string;\n  data: [Date, number][];\n  type: \"line\";\n}[] =>\n  state.ui.pickedCountries.map((pickedCountry: string) => ({\n    name: pickedCountry,\n    data: state.data\n      .where(row => row.iso_code === pickedCountry)\n      .toArray()\n      .map(row => [\n        row.date.getTime(),\n        (row.total_cases * 1000000) / row.population,\n      ]),\n    type: \"line\",\n  }));\n\nexport const CaseChart = () => {\n  const cases = useSelector(selectDataToRenderIntoChart);\n\n  const options: Highcharts.Options = {\n    title: {\n      text: \"Cases over time\",\n    },\n    chart: {\n      height: \"50%\",\n      zoomType: \"x\",\n    },\n    xAxis: {\n      type: \"datetime\",\n      title: {\n        text: \"Date\",\n      },\n      labels: {\n        step: 1,\n      },\n    },\n    yAxis: {\n      type: \"logarithmic\",\n      title: {\n        text: \"Cases per 1M population\",\n      },\n    },\n    series: cases,\n    credits: {\n      enabled: false,\n    },\n  };\n\n  return (\n    <div id=\"cases\">\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </div>\n  );\n};\n","import { IDataFrame } from \"data-forge\";\n\nexport type Action =\n  | InitialAction\n  | ErrorDuringFetchAction\n  | FetchSuccessAction\n  | CountryToggleAction\n  | CountrySearchChangedAction\n  | ProgressAction\n  | UrlUpdatedAction;\n\nexport interface InitialAction {\n  type: \"initialized\";\n}\nexport const makeInitialized = (): InitialAction => ({\n  type: \"initialized\",\n});\n\nexport interface ErrorDuringFetchAction {\n  type: \"error-during-fetch\";\n  message: string;\n}\nexport const makeErrorDuringFetch = (\n  message: string,\n): ErrorDuringFetchAction => ({\n  type: \"error-during-fetch\",\n  message,\n});\n\nexport interface FetchSuccessAction {\n  type: \"fetch-success\";\n  response: IDataFrame;\n}\nexport const makeFetchSuccess = (response: IDataFrame): FetchSuccessAction => ({\n  type: \"fetch-success\",\n  response,\n});\n\nexport interface CountryToggleAction {\n  type: \"country-toggled\";\n  countryCode: string;\n}\nexport const makeCountryToggleAction = (\n  countryCode: string,\n): CountryToggleAction => ({\n  type: \"country-toggled\",\n  countryCode,\n});\n\nexport interface CountrySearchChangedAction {\n  type: \"country-search-changed\";\n  search: string;\n}\n\nexport const makeCoutrySearchChangedAction = (\n  search: string,\n): CountrySearchChangedAction => ({\n  type: \"country-search-changed\",\n  search,\n});\n\nexport interface ProgressAction {\n  type: \"progress\";\n  target: \"covid\" | \"population\";\n  done: number;\n  total: number;\n}\n\nexport const makeProgressAction = (progress: {\n  target: \"covid\" | \"population\";\n  done: number;\n  total: number;\n}): ProgressAction => {\n  return { ...progress, type: \"progress\" };\n};\n\nexport interface UrlUpdatedAction {\n  type: \"url-updated\",\n  url: string\n}\n\nexport const makeUrlUpdated = (url: string): UrlUpdatedAction => ({type: \"url-updated\", url})","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { LoadedState } from \"./store\";\n\nimport { includes } from \"lodash/fp\";\nimport {\n  makeCountryToggleAction,\n  makeCoutrySearchChangedAction,\n} from \"./actions\";\n\nconst coutrySelector = (state: LoadedState) =>\n  state.data\n    .select(\n      ({ iso_code, location }: { iso_code: string; location: string }) => ({\n        iso_code,\n        location,\n      }),\n    )\n    .distinct(row => row.iso_code)\n    .orderBy(row => row.location)\n    .toPairs()\n    .map(([_, row]) => ({\n      ...row,\n      active: includes(row.iso_code)(state.ui.pickedCountries),\n    }))\n    .filter(\n      row =>\n        row.active ||\n        (state.ui.searchText !== \"\" &&\n          row.location\n            .toLowerCase()\n            .startsWith(state.ui.searchText.toLowerCase())),\n    );\n\nexport const CountryPicker = () => {\n  const dispatch = useDispatch();\n\n  const allCountries = useSelector(coutrySelector).map(\n    ({ iso_code, location, active }) => (\n      <li\n        key={iso_code}\n        onClick={_ => dispatch(makeCountryToggleAction(iso_code))}\n      >\n        <input type=\"checkbox\" checked={active} />\n        {location}\n      </li>\n    ),\n  );\n\n  const searchText = useSelector((state: LoadedState) => state.ui.searchText);\n\n  const ulStyle = { listStyleType: \"none\", align: \"left\" };\n\n  return (\n    <div>\n      <label>\n        <h2>Select Countries</h2>\n        <br />\n        <input\n          type=\"text\"\n          name=\"search\"\n          placeholder=\"Search Countries\"\n          onChange={e =>\n            dispatch(makeCoutrySearchChangedAction(e.target.value))\n          }\n          value={searchText}\n        />\n        <ul id=\"countries\" style={ulStyle}>\n          {allCountries}\n        </ul>\n      </label>\n    </div>\n  );\n};\n","import { Observable, of } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { fromCSV, IDataFrame, Series } from \"data-forge\";\n\ninterface CovidRow {\n  iso_code: string;\n}\n\ninterface PopulationRow {\n  iso_code: string;\n  population: string;\n  year: number;\n}\n\nexport const parseCovidCSV = (data: string): Observable<IDataFrame> =>\n  of(fromCSV(data)).pipe(\n    map((df: IDataFrame): IDataFrame => df.parseDates(\"date\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"total_cases\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"new_cases\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"total_deaths\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"new_deaths\")),\n  );\n\nexport const parsePopulationCSV = (data: string): Observable<IDataFrame> =>\n  of(fromCSV(data)).pipe(\n    map((df: IDataFrame): IDataFrame => df.parseInts([\"Value\", \"Year\"])),\n    map(\n      (df: IDataFrame): IDataFrame =>\n        df.renameSeries({\n          Year: \"year\",\n          \"Country Code\": \"iso_code\",\n          Value: \"population\",\n        }),\n    ),\n  );\n\nexport const transformCsvData = (data: IDataFrame): IDataFrame => data;\n\ntype Maximums = Map<string, number>;\n\ntype Accumulator = {\n  maximums: Maximums;\n  result: IDataFrame;\n};\n\nconst computeLatestPopulation = (population: IDataFrame): IDataFrame =>\n  population\n    .groupBy(row => row.iso_code)\n    .select(group => {\n      const { year: maxYear } = group.summarize({ year: Series.max });\n      const pop = group.where(row => row.year === maxYear).first().population;\n      return {\n        iso_code: group.first().iso_code,\n        population: pop,\n      };\n    })\n    .inflate();\n\nexport const mergeCovidPopulation = (\n  covid: IDataFrame,\n  population: IDataFrame,\n): IDataFrame => {\n  const populationLatest = computeLatestPopulation(population);\n  return covid.join(\n    populationLatest,\n    (covid: CovidRow) => covid.iso_code,\n    (pop: PopulationRow) => pop.iso_code,\n    (covid: CovidRow, pop: PopulationRow | null) => ({\n      ...covid,\n      population: pop ? pop.population : 0,\n    }),\n  );\n};\n\nexport const smooth = (amount: number, series: number[][]): number[][] => {\n  amount = Math.ceil(Math.abs(amount));\n  let results: Array<Array<number>> = [];\n  for (let i = 0; i < series.length; i++) {\n    let [x] = series[i];\n\n    let valuesInAverage = 0;\n    let sum = 0;\n    for (let j = amount * -1; j <= amount; j++) {\n      if (series[i + j] === undefined) {\n        // ignore edges\n        continue;\n      }\n\n      sum = sum + series[i + j][1];\n      valuesInAverage = valuesInAverage + 1;\n    }\n\n    results.push([x, sum / valuesInAverage]);\n  }\n  return results;\n};","import React from \"react\";\n\nimport Highcharts, { SeriesOptionsType } from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nimport { useSelector } from \"react-redux\";\nimport { LoadedState } from \"./store\";\n\nimport { smooth } from \"./data\";\n\nconst deathCurveSelector = (state: LoadedState): SeriesOptionsType[] =>\n  state.ui.pickedCountries.map(country => {\n    const filteredByCountry = state.data.where(row => row.iso_code === country);\n\n    const deaths = filteredByCountry.select(row => ({\n      iso_code: row.iso_code,\n      total_deaths: row.total_deaths,\n      population: row.population,\n      new_deaths: row.new_deaths,\n    }));\n\n    return {\n      name: country,\n      type: \"line\",\n      data: smooth(\n        2,\n        deaths\n          .toArray()\n          .map(row => [\n            row.total_deaths / row.population,\n            row.new_deaths / row.population,\n          ])\n          .sort(([a, _], [b, __]) => (a < b ? -1 : 1)),\n      ).filter(([x, y]) => x !== 0 && y !== 0),\n    };\n  });\n\nexport const DeathCurve = () => {\n  const deaths = useSelector(deathCurveSelector);\n\n  const options: Highcharts.Options = {\n    title: {\n      text: \"Death Curve\",\n    },\n    chart: {\n      height: \"50%\",\n      zoomType: \"xy\",\n    },\n    xAxis: {\n      type: \"logarithmic\",\n      title: {\n        text: \"Fraction of dead population\",\n      },\n      min: 1e-6,\n      tickInterval: 1,\n      labels: {\n        step: 1,\n        formatter: function () {\n          return this.value.toExponential(0);\n        },\n      },\n    },\n    yAxis: {\n      type: \"logarithmic\",\n      title: {\n        text: \"Fraction of dead population per day (smoothed)\",\n      },\n      min: 1e-7,\n      tickInterval: 1,\n      labels: {\n        step: 1,\n        formatter: function () {\n          return this.value.toExponential(0);\n        },\n      },\n    },\n    series: deaths,\n    credits: {\n      enabled: false,\n    },\n  };\n\n  return (\n    <div id=\"deathcurve\">\n      <h2>\n        Robins Death Curve\n        <span role=\"img\" aria-label=\"tm\">\n          ™️\n        </span>\n      </h2>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Grid, Cell } from \"styled-css-grid\";\nimport { useSelector } from \"react-redux\";\nimport { LoadedState } from \"./store\";\nimport Highcharts, { SeriesOptionsType } from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport { smooth } from \"./data\";\n\nexport const NewCaseChart = () => {\n  const selectedCountries = useSelector(\n    (state: LoadedState) => state.ui.pickedCountries,\n  );\n\n  const data = useSelector((state: LoadedState) => state.data);\n  const countryCharts = selectedCountries.map(country => {\n    const countryData = {\n      name: country,\n      type: \"column\",\n      data: data\n        .where(\n          row => row.iso_code === country && row.date > new Date(\"03-01-2020\"),\n        )\n        .toArray()\n        .map(row => [row.date.getTime(), row.new_cases])\n        .sort(),\n    };\n\n    const movingAverage: SeriesOptionsType = {\n      name: \"7 day average\",\n      data: smooth(3, countryData.data),\n      type: \"line\",\n    };\n\n    const options: Highcharts.Options = {\n      chart: {\n        height: \"300\",\n        width: \"300\",\n      },\n      title: {\n        text: country,\n      },\n      xAxis: {\n        type: \"datetime\",\n        title: {\n          text: \"Date\",\n        },\n      },\n      yAxis: {\n        title: {\n          text: \"daily new cases\",\n        },\n      },\n      legend: {\n        enabled: false,\n      },\n      series: [countryData as SeriesOptionsType, movingAverage],\n      credits: {\n        enabled: false,\n      },\n    };\n\n    return (\n      <Cell center middle>\n        <HighchartsReact highcharts={Highcharts} options={options} />\n      </Cell>\n    );\n  });\n\n  return (\n    <div>\n      <h2>New Cases</h2>\n      <Grid columns=\"repeat(auto-fit,minmax(300px,1fr))\">{countryCharts}</Grid>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { CaseChart } from \"./CaseChart\";\nimport { CountryPicker } from \"./CountryPicker\";\nimport { DeathCurve } from \"./DeathCurve\";\nimport { NewCaseChart } from \"./NewCaseChart\";\n\nconst centered: React.CSSProperties = { textAlign: \"center\" };\n\nexport const Loaded = () => {\n  return (\n    <div>\n      <CountryPicker />\n      <hr />\n      <NewCaseChart />\n      <hr />\n      <CaseChart />\n      <hr />\n      <DeathCurve />\n      <div style={centered}>\n        data from{\" \"}\n        <a href=\"https://covid.ourworldindata.org\">Our World In Data</a> and{\" \"}\n        <a href=\"https://github.com/datasets/population\">\n          datahub.io via the World Bank\n        </a>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { ErrorState } from \"./store\";\nimport { useSelector } from \"react-redux\";\n\nexport const Error = () => {\n  const message = useSelector((state: ErrorState) => state.message);\n  return <div>Error: {message}</div>;\n};\n","export function assertNever(x: never): never {\n    throw new Error(\"Unexpected object: \" + x);\n}","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"./App.css\";\nimport \"github-fork-ribbon-css/gh-fork-ribbon.css\";\n\nimport Highcharts from \"highcharts\";\nimport GridTheme from \"highcharts/themes/grid\";\n\nimport { State } from \"./store\";\n\nimport { Loading } from \"./Loading\";\nimport { Loaded } from \"./Loaded\";\nimport { Error } from \"./Error\";\n\nimport { assertNever } from \"./utils\";\n\nGridTheme(Highcharts);\n\nexport const App = () => {\n  const state: State = useSelector<State, State>(_ => _);\n  return (\n    <>\n      <a\n        className=\"github-fork-ribbon right-top\"\n        href=\"https://github.com/jupp0r/covid-stats\"\n        data-ribbon=\"Fork me on GitHub\"\n        title=\"Fork me on GitHub\"\n      >\n        Fork me on GitHub\n      </a>\n      <div className=\"App\">\n        {((state: State) => {\n          switch (state.type) {\n            case \"loading\":\n              return <Loading />;\n            case \"loaded\":\n              return <Loaded />;\n            case \"error\":\n              return <Error />;\n            default:\n              return assertNever(state);\n          }\n        })(state)}\n      </div>\n    </>\n  );\n};\n","import { Action } from \"./actions\";\nimport { State } from \"./store\";\n\nimport { Store } from \"redux\";\n\nimport { makeUrlUpdated } from \"./actions\";\nimport { defaultCountries } from \"./store\";\n\n\nexport const updateCountriesInPathName = (\n  urlString: string,\n  countries: string[],\n): string => {\n  const url = new URL(urlString);\n  const params = new URLSearchParams(url.search);\n  params.set(\"countries[]\", JSON.stringify(countries));\n  url.search = params.toString();\n  return url.toString();\n};\n\nexport const getPickedCountriesFromUrl = (urlString: string): string[] => {\n  const url = new URL(urlString);\n  const params = new URLSearchParams(url.search);\n  const countries = params.get(\"countries[]\");\n  if (!countries) {\n    return defaultCountries;\n  }\n\n  const parsedCountries: string[] = JSON.parse(countries);\n\n  if (!Array.isArray(parsedCountries)) {\n    console.error(\"invalid url params\");\n    return defaultCountries;\n  }\n\n  return parsedCountries;\n};\n\nexport const setupRouting = (store: Store<State, Action>) => {\n  window.addEventListener(\"popstate\", () => {\n    store.dispatch(makeUrlUpdated(window.location.toString()));\n  });\n\n  store.subscribe(() => {\n    const { url } = store.getState().routing;\n    if (window.location.toString() !== url) {\n      window.history.pushState(null, \"\", url);\n      document.body.scrollTop = 0;\n    }\n  });\n};\n","import { initialState, State, LoadedState, LoadingState } from \"./store\";\n\nimport { Action } from \"./actions\";\nimport { transformCsvData } from \"./data\";\n\nimport { assertNever } from \"./utils\";\n\nimport { includes, filter } from \"lodash/fp\";\n\nimport { getPickedCountriesFromUrl, updateCountriesInPathName } from \"./router\";\n\nconst errorReducer = (state: State, action: Action): State => state;\n\nconst loadingReducer = (state: LoadingState, action: Action): State => {\n  switch (action.type) {\n    case \"fetch-success\":\n      const pickedCountries = getPickedCountriesFromUrl(state.routing.url);\n      return {\n        ...state,\n        type: \"loaded\",\n        data: transformCsvData(action.response),\n        ui: {\n          pickedCountries,\n          searchText: \"\",\n        },\n        routing: {\n          url: updateCountriesInPathName(state.routing.url, pickedCountries)\n        }\n      };\n    case \"progress\":\n      return {\n        ...state,\n        progress: {\n          ...state.progress,\n          [action.target]: {\n            done: action.done,\n            total: state.progress[action.target].total,\n            ...(action.total !== 0 && { total: action.total }),\n          },\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nconst loadedReducer = (state: LoadedState, action: Action): State => {\n  switch (action.type) {\n    case \"country-toggled\":\n      const toggleCountryToPicked = (\n        country: string,\n        countries: string[],\n      ): string[] => {\n        if (includes(country)(countries)) {\n          return filter(c => c !== country, countries);\n        }\n\n        return [country, ...countries];\n      };\n\n      const newCountries = toggleCountryToPicked(\n        action.countryCode,\n        state.ui.pickedCountries,\n      );\n\n      return {\n        ...state,\n        ui: {\n          ...state.ui,\n          pickedCountries: newCountries,\n        },\n        routing: {\n          url: updateCountriesInPathName(state.routing.url, newCountries),\n        },\n      };\n    case \"country-search-changed\":\n      return { ...state, ui: { ...state.ui, searchText: action.search } };\n    default:\n      return state;\n  }\n};\n\nexport const reducer = (state: State = initialState, action: Action): State => {\n  if (action.type === \"url-updated\") {\n    return { ...state, routing: { ...state.routing, url: action.url } };\n  }\n  \n  switch (state.type) {\n    case \"error\":\n      return errorReducer(state, action);\n    case \"loading\":\n      return loadingReducer(state, action);\n    case \"loaded\":\n      return loadedReducer(state, action);\n    default:\n      return assertNever(state);\n  }\n};\n","import { Observable, zip, merge } from \"rxjs\";\n\nimport { filter, flatMap, map } from \"rxjs/operators\";\n\nimport { Action, makeProgressAction, ProgressAction } from \"./actions\";\n\nimport { combineEpics } from \"redux-observable\";\n\nimport {\n  parseCovidCSV,\n  parsePopulationCSV,\n  mergeCovidPopulation,\n} from \"./data\";\nimport { IDataFrame } from \"data-forge\";\n\ntype DataResult =\n  | { type: \"success\"; data: IDataFrame }\n  | { type: \"error\"; reason: string };\n\ninterface Progress {\n  done: number;\n  total: number;\n}\n\nconst fromXhr = (\n  url: string,\n): {\n  progress: Observable<Progress>;\n  result: Observable<string>;\n} => {\n  const xhr = new XMLHttpRequest();\n  xhr.responseType = \"text\";\n  const progress$ = new Observable<Progress>((subscriber): void => {\n    xhr.addEventListener(\"progress\", ev =>\n      subscriber.next({\n        done: ev.loaded,\n        total: ev.total,\n      }),\n    );\n  });\n\n  const result$ = new Observable<string>(subscriber => {\n    xhr.addEventListener(\"readystatechange\", ev => {\n      if (xhr.readyState !== 4) {\n        return;\n      }\n\n      if (xhr.status === 200) {\n        subscriber.next(xhr.response);\n        subscriber.complete();\n      } else {\n        subscriber.error(xhr.response);\n      }\n    });\n  });\n\n  xhr.open(\"GET\", url);\n  xhr.send();\n  return { progress: progress$, result: result$ };\n};\n\nexport const startLoadingEpic = (\n  action$: Observable<Action>,\n): Observable<Action> => {\n  const covidData$: Observable<ProgressAction | DataResult> = action$.pipe(\n    filter((action: Action) => action.type === \"initialized\"),\n    flatMap(() => {\n      const { progress, result } = fromXhr(\n        \"https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv\",\n      );\n      const progress$ = progress.pipe(\n        map((update: Progress) =>\n          makeProgressAction({ ...update, target: \"covid\" }),\n        ),\n      );\n\n      const result$ = result.pipe(\n        flatMap(parseCovidCSV),\n        map((data: IDataFrame): DataResult => ({ type: \"success\", data })),\n      );\n\n      return merge(progress$, result$);\n    }),\n  );\n\n  const populationData$: Observable<ProgressAction | DataResult> = action$.pipe(\n    filter((action: Action) => action.type === \"initialized\"),\n    flatMap(() => {\n      const { progress, result } = fromXhr(\n        \"https://raw.githubusercontent.com/datasets/population/master/data/population.csv\",\n      );\n      const progress$ = progress.pipe(\n        map((update: Progress) =>\n          makeProgressAction({ ...update, target: \"population\" }),\n        ),\n      );\n\n      const result$ = result.pipe(\n        flatMap(parsePopulationCSV),\n        map((data: IDataFrame): DataResult => ({ type: \"success\", data })),\n      );\n\n      return merge(progress$, result$);\n    }),\n  );\n\n  const combinedProgress$: Observable<ProgressAction> = merge(\n    covidData$,\n    populationData$,\n  ).pipe(\n    filter(item => item.type === \"progress\"),\n    map(item => item as ProgressAction),\n  );\n\n  const filterForResult = (data$: Observable<ProgressAction | DataResult>) =>\n    data$.pipe(filter(item => item.type === \"success\"));\n\n  const combinedResults$: Observable<Action> = zip(\n    filterForResult(covidData$),\n    filterForResult(populationData$),\n  ).pipe(\n    map(\n      ([covid, population]): Action => {\n        if (covid.type === \"success\" && population.type === \"success\") {\n          return {\n            type: \"fetch-success\",\n            response: mergeCovidPopulation(covid.data, population.data),\n          };\n        } else {\n          return {\n            type: \"error-during-fetch\",\n            message: `Error: ${covid} or ${population} failed to fetch`,\n          };\n        }\n      },\n    ),\n  );\n\n  return merge(combinedProgress$, combinedResults$);\n};\n\nexport const rootEpic = combineEpics(startLoadingEpic);\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { reducer } from \"./reducers\";\nimport { createEpicMiddleware } from \"redux-observable\";\nimport { rootEpic } from \"./epics\";\nimport { makeInitialized } from \"./actions\";\nimport { IDataFrame } from \"data-forge\";\nimport { Store as ReduxStore } from \"redux\";\nimport { Action } from \"./actions\";\nimport { setupRouting } from \"./router\";\n\nexport type State = (LoadingState | LoadedState | ErrorState);\ninterface RoutingState {\n  routing: {\n    url: string,\n  }\n}\n\ninterface Progress {\n  done: number;\n  total: number;\n}\nexport type LoadingState = {\n  type: \"loading\";\n  progress: {\n    covid: Progress;\n    population: Progress;\n  };\n} & RoutingState;\n\nexport type UIState = {\n  pickedCountries: string[];\n  searchText: string;\n}\n\nexport type LoadedState = {\n  type: \"loaded\";\n  data: IDataFrame;\n  ui: UIState;\n} & RoutingState\n\nexport type ErrorState = {\n  type: \"error\";\n  message: string;\n} & RoutingState;\n\nconst covidSizeEstimate = 2542856;\nconst populationSizeEstimate = 487991;\n\nexport const initialState: State = {\n  type: \"loading\",\n  progress: {\n    covid: { done: 0, total: covidSizeEstimate },\n    population: { done: 0, total: populationSizeEstimate },\n  },\n  routing: {\n    url: window.location.toString(),\n  }\n};\n\nexport const defaultCountries = [\"USA\", \"DEU\", \"SWE\", \"ITA\", \"NGA\"];\n\nexport type Store = ReduxStore<State, Action>;\n\nconst epicMiddleware = createEpicMiddleware();\nexport const store = configureStore({\n  reducer,\n  middleware: [epicMiddleware],\n});\nepicMiddleware.run(rootEpic);\n\nsetupRouting(store);\nstore.dispatch(makeInitialized());\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\n\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\n\nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  rootElement,\n);\n"],"sourceRoot":""}