{"version":3,"sources":["components/SpacedPaper.tsx","components/Loading.tsx","actions/index.ts","components/CaseChart.tsx","components/CountryPicker.tsx","store/data.ts","components/DeathCurve.tsx","components/NewCaseChart.tsx","components/Loaded.tsx","components/Error.tsx","utils.ts","components/highchartsTheme.ts","components/App.tsx","reducers/router.ts","reducers/reducers.ts","epics/index.ts","store/index.ts","index.tsx"],"names":["withPadding","createStyles","paperPadding","padding","SpacedPaper","withStyles","props","Box","m","p","Paper","className","classes","children","Loading","progress","useSelector","state","normalize","done","total","LinearProgress","variant","value","covid","population","makeProgressAction","type","selectDataToRenderIntoChart","ui","pickedCountries","map","pickedCountry","name","data","where","row","iso_code","toArray","date","getTime","total_cases","CaseChart","cases","logAxisSetting","caseChart","logSetting","options","chart","height","zoomType","title","text","xAxis","labels","step","yAxis","series","credits","enabled","dispatch","useDispatch","id","elevation","ToggleButtonGroup","onChange","_","newSetting","makeCaseChartLogSettingChangedAction","exclusive","aria-label","ToggleButton","highcharts","Highcharts","coutrySelector","createSelector","searchText","select","location","distinct","orderBy","toPairs","active","includes","filter","toLowerCase","startsWith","CountryPicker","autoWidthItem","width","allCountries","ListItem","button","key","onClick","countryCode","style","Checkbox","edge","checked","tabIndex","disableRipple","inputProps","TextField","placeholder","e","search","target","List","display","flexWrap","alignItems","justifyContent","parseCovidCSV","of","fromCSV","pipe","df","parseDates","parseInts","parsePopulationCSV","renameSeries","Year","Value","mergeCovidPopulation","populationLatest","groupBy","group","maxYear","summarize","year","Series","max","pop","first","inflate","computeLatestPopulation","join","smooth","amount","Math","ceil","abs","results","i","length","x","valuesInAverage","sum","j","undefined","push","deathCurveSelector","country","deaths","total_deaths","new_deaths","sort","a","b","y","DeathCurve","min","tickInterval","formatter","this","toExponential","role","NewCaseChart","selectedCountries","countryCharts","countryData","Date","new_cases","movingAverage","enableMouseTracking","legend","Grid","item","container","justify","spacing","centered","textAlign","Loaded","href","Error","message","assertNever","setOptions","colors","backgroundColor","plotBackgroundColor","plotShadow","plotBorderWidth","color","font","subtitle","gridLineWidth","lineColor","tickColor","fontWeight","fontSize","fontFamily","minorTickInterval","lineWidth","tickWidth","itemStyle","itemHoverStyle","itemHiddenStyle","navigation","buttonOptions","theme","stroke","store","App","data-ribbon","px","py","my","updateCountriesInPathName","urlString","countries","url","URL","params","URLSearchParams","set","JSON","stringify","toString","errorReducer","action","loadingReducer","get","defaultCountries","parsedCountries","parse","Array","isArray","console","error","getPickedCountriesFromUrl","routing","response","loadedReducer","newCountries","c","fromXhr","xhr","XMLHttpRequest","responseType","progress$","Observable","subscriber","addEventListener","ev","next","loaded","result$","readyState","status","complete","open","send","result","rootEpic","combineEpics","action$","covidData$","flatMap","update","merge","populationData$","combinedProgress$","filterForResult","data$","combinedResults$","zip","initialState","window","epicMiddleware","createEpicMiddleware","configureStore","reducer","middleware","run","subscribe","getState","history","pushState","document","body","scrollTop","rootElement","getElementById","darkTheme","createMuiTheme","palette","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline"],"mappings":"4TAWMA,EAAcC,YAAa,CAC/BC,aAAc,CACZC,QAAS,UAcAC,EAAcC,YAAWL,EAAXK,EAVgD,SACzEC,GADyE,OAGzE,kBAACC,EAAA,EAAD,CAAKC,EAAG,EAAGC,EAAG,GACZ,kBAACC,EAAA,EAAD,iBAAWJ,EAAX,CAAkBK,UAAWL,EAAMM,QAAQV,eACxCI,EAAMO,cCfAC,EAAU,WACrB,IAAMC,EAAWC,aAAY,SAACC,GAAD,OAAyBA,EAAMF,YAEtDG,EAAY,SAAC,GAAD,SAAGC,KAAH,EAASC,MACR,KAEnB,OACE,kBAAChB,EAAD,KACE,6BACE,kDACA,kBAACiB,EAAA,EAAD,CACEC,QAAQ,cACRC,MAAOL,EAAUH,EAASS,UAG9B,6BACE,6DACA,kBAACH,EAAA,EAAD,CACEC,QAAQ,cACRC,MAAOL,EAAUH,EAASU,iB,yCC2CvBC,EAAqB,SAACX,GAKjC,OAAO,2BAAKA,GAAZ,IAAsBY,KAAM,c,kBC9DxBC,EAA8B,SAClCX,GADkC,OAOlCA,EAAMY,GAAGC,gBAAgBC,KAAI,SAACC,GAAD,MAA4B,CACvDC,KAAMD,EACNE,KAAMjB,EAAMiB,KACTC,OAAM,SAAAC,GAAG,OAAIA,EAAIC,WAAaL,KAC9BM,UACAP,KAAI,SAAAK,GAAG,MAAI,CACVA,EAAIG,KAAKC,UACU,IAAlBJ,EAAIK,YAAyBL,EAAIX,eAEtCE,KAAM,YAGGe,EAAY,WACvB,IAAMC,EAAQ3B,YAAYY,GACpBgB,EAAiB5B,aACrB,SAACC,GAAD,OAAwBA,EAAMY,GAAGgB,UAAUC,cAGvCC,EAA8B,CAClCC,MAAO,CACLC,OAAQ,MACRC,SAAU,KAEZC,MAAO,CACLC,KAAM,IAERC,MAAO,CACL1B,KAAM,WACNwB,MAAO,CACLC,KAAM,QAERE,OAAQ,CACNC,KAAM,IAGVC,MAAO,CACL7B,KAAMiB,EACNO,MAAO,CACLC,KAAM,4BAGVK,OAAQd,EACRe,QAAS,CACPC,SAAS,IAIPC,EAAWC,cAajB,OACE,kBAACzD,EAAD,CAAa0D,GAAG,QAAQC,UAAW,GACjC,+CACA,kBAACC,EAAA,EAAD,CACEzC,MAAOqB,EACPqB,SAjB8B,SAACC,EAAQC,GACtCA,IAIgB,WAAfA,GAA0C,gBAAfA,GAIjCP,EDgBgD,SAClDO,GADkD,MAEZ,CACtCxC,KAAM,iCACNwC,cCpBWC,CAAqCD,MAS1CE,WAAS,EACTC,aAAW,oBAEX,kBAACC,EAAA,EAAD,CAAchD,MAAM,cAAc+C,aAAW,eAA7C,OAGA,kBAACC,EAAA,EAAD,CAAchD,MAAM,SAAS+C,aAAW,UAAxC,WAIF,kBAAC,IAAD,CAAiBE,WAAYC,IAAY1B,QAASA,M,4DCxElD2B,EAAiBC,aALF,SAAC1D,GAAD,OAAwBA,EAAMiB,QACnB,SAACjB,GAAD,OAC9BA,EAAMY,GAAGC,mBACgB,SAACb,GAAD,OAAwBA,EAAMY,GAAG+C,cAM1D,SAAC1C,EAAkBJ,EAA2B8C,GAA9C,OACE1C,EACG2C,QACC,kBAAqE,CACnExC,SADF,EAAGA,SAEDyC,SAFF,EAAaA,aAKdC,UAAS,SAAA3C,GAAG,OAAIA,EAAIC,YACpB2C,SAAQ,SAAA5C,GAAG,OAAIA,EAAI0C,YACnBG,UACAlD,KAAI,mCAAKK,GAAL,8BAAC,eACDA,GADA,IAEH8C,OAAQC,mBAAS/C,EAAIC,SAAb8C,CAAuBrD,QAEhCsD,QACC,SAAAhD,GAAG,OACDA,EAAI8C,QACY,KAAfN,GACCxC,EAAI0C,SAASO,cAAcC,WAAWV,EAAWS,qBAIhDE,EAAgB,WAC3B,IAAM3B,EAAWC,cAEX2B,EAA+B,CACnCC,MAAO,SAGHC,EAAe1E,YAAY0D,GAAgB3C,KAC/C,gBAAGM,EAAH,EAAGA,SAAUyC,EAAb,EAAaA,SAAUI,EAAvB,EAAuBA,OAAvB,OACE,kBAACS,EAAA,EAAD,CACEC,QAAM,EACNC,IAAKxD,EACLyD,QAAS,SAAA5B,GAAC,OAAIN,EFjBK,CACzBjC,KAAM,kBACNoE,YEeqD1D,KAC/C2D,MAAOR,GAEP,kBAACS,EAAA,EAAD,CACEC,KAAK,QACLC,QAASjB,EACTkB,UAAW,EACXC,eAAa,EACbC,WAAY,CAAE,kBAAmBjE,KAElCyC,MAKDF,EAAa5D,aAAY,SAACC,GAAD,OAAwBA,EAAMY,GAAG+C,cAUhE,OACE,kBAACxE,EAAD,CAAa2D,UAAW,GACtB,+BACE,6BACA,kBAACwC,EAAA,EAAD,CACE5E,KAAK,OACLM,KAAK,SACLuE,YAAY,mBACZvC,SAAU,SAAAwC,GAAC,OACT7C,EFvCsB,CAChCjC,KAAM,yBACN+E,OEqCiDD,EAAEE,OAAOpF,SAElDA,MAAOqD,IAET,kBAACgC,EAAA,EAAD,CAAM9C,GAAG,YAAYkC,MArBU,CACnCa,QAAS,OACT1G,QAAS,EACT2G,SAAU,OACVC,WAAY,SACZC,eAAgB,WAiBTtB,M,wBCvFEuB,EAAgB,SAAC/E,GAAD,OAC3BgF,YAAGC,YAAQjF,IAAOkF,KAChBrF,aAAI,SAACsF,GAAD,OAAgCA,EAAGC,WAAW,WAClDvF,aAAI,SAACsF,GAAD,OAAgCA,EAAGE,UAAU,kBACjDxF,aAAI,SAACsF,GAAD,OAAgCA,EAAGE,UAAU,gBACjDxF,aAAI,SAACsF,GAAD,OAAgCA,EAAGE,UAAU,mBACjDxF,aAAI,SAACsF,GAAD,OAAgCA,EAAGE,UAAU,mBAGxCC,EAAqB,SAACtF,GAAD,OAChCgF,YAAGC,YAAQjF,IAAOkF,KAChBrF,aAAI,SAACsF,GAAD,OAAgCA,EAAGE,UAAU,CAAC,QAAS,YAC3DxF,aACE,SAACsF,GAAD,OACEA,EAAGI,aAAa,CACdC,KAAM,OACN,eAAgB,WAChBC,MAAO,oBA2BJC,EAAuB,SAClCpG,EACAC,GAEA,IAAMoG,EAjBwB,SAACpG,GAAD,OAC9BA,EACGqG,SAAQ,SAAA1F,GAAG,OAAIA,EAAIC,YACnBwC,QAAO,SAAAkD,GAAU,IACFC,EAAYD,EAAME,UAAU,CAAEC,KAAMC,IAAOC,MAAjDF,KACFG,EAAMN,EAAM5F,OAAM,SAAAC,GAAG,OAAIA,EAAI8F,OAASF,KAASM,QAAQ7G,WAC7D,MAAO,CACLY,SAAU0F,EAAMO,QAAQjG,SACxBZ,WAAY4G,MAGfE,UAMsBC,CAAwB/G,GACjD,OAAOD,EAAMiH,KACXZ,GACA,SAACrG,GAAD,OAAqBA,EAAMa,YAC3B,SAACgG,GAAD,OAAwBA,EAAIhG,YAC5B,SAACb,EAAiB6G,GAAlB,mBAAC,eACI7G,GADL,IAEEC,WAAY4G,EAAMA,EAAI5G,WAAa,QAK5BiH,EAAS,SAACC,EAAgBlF,GACrCkF,EAASC,KAAKC,KAAKD,KAAKE,IAAIH,IAE5B,IADA,IAAII,EAAgC,GAC3BC,EAAI,EAAGA,EAAIvF,EAAOwF,OAAQD,IAAK,CAKtC,IALuC,IAClCE,EADiC,YAC5BzF,EAAOuF,GADqB,MAGlCG,EAAkB,EAClBC,EAAM,EACDC,GAAc,EAAVV,EAAaU,GAAKV,EAAQU,SACfC,IAAlB7F,EAAOuF,EAAIK,KAKfD,GAAY3F,EAAOuF,EAAIK,GAAG,GAC1BF,GAAoC,GAGtCJ,EAAQQ,KAAK,CAACL,EAAGE,EAAMD,IAEzB,OAAOJ,GClFHS,EAAqB,SAACvI,GAAD,OACzBA,EAAMY,GAAGC,gBAAgBC,KAAI,SAAA0H,GAC3B,IAEMC,EAFoBzI,EAAMiB,KAAKC,OAAM,SAAAC,GAAG,OAAIA,EAAIC,WAAaoH,KAElC5E,QAAO,SAAAzC,GAAG,MAAK,CAC9CC,SAAUD,EAAIC,SACdsH,aAAcvH,EAAIuH,aAClBlI,WAAYW,EAAIX,WAChBmI,WAAYxH,EAAIwH,eAGlB,MAAO,CACL3H,KAAMwH,EACN9H,KAAM,OACNO,KAAMwG,EACJ,EACAgB,EACGpH,UACAP,KAAI,SAAAK,GAAG,MAAI,CACVA,EAAIuH,aAAevH,EAAIX,WACvBW,EAAIwH,WAAaxH,EAAIX,eAEtBoI,MAAK,qCAAEC,EAAF,+BAAUC,EAAV,iBAAsBD,EAAIC,GAAK,EAAI,MAC3C3E,QAAO,mCAAE8D,EAAF,KAAKc,EAAL,YAAkB,IAANd,GAAiB,IAANc,UAIzBC,EAAa,WACxB,IAEMlH,EAA8B,CAClCI,MAAO,CACLC,KAAM,IAERJ,MAAO,CACLC,OAAQ,MACRC,SAAU,MAEZG,MAAO,CACL1B,KAAM,cACNwB,MAAO,CACLC,KAAM,+BAER8G,IAAK,KACLC,aAAc,EACd7G,OAAQ,CACNC,KAAM,EACN6G,UAAW,WACT,OAAOC,KAAK9I,MAAM+I,cAAc,MAItC9G,MAAO,CACL7B,KAAM,cACNwB,MAAO,CACLC,KAAM,kDAER8G,IAAK,KACLC,aAAc,EACd7G,OAAQ,CACNC,KAAM,EACN6G,UAAW,WACT,OAAOC,KAAK9I,MAAM+I,cAAc,MAItC7G,OAtCazC,YAAYwI,GAuCzB9F,QAAS,CACPC,SAAS,IAIb,OACE,kBAACvD,EAAD,CAAa0D,GAAG,aAAaC,UAAW,GACtC,iDAEE,0BAAMwG,KAAK,MAAMjG,aAAW,MAA5B,iBAIF,kBAAC,IAAD,CAAiBE,WAAYC,IAAY1B,QAASA,M,SCnF3CyH,EAAe,WAC1B,IAAMC,EAAoBzJ,aACxB,SAACC,GAAD,OAAwBA,EAAMY,GAAGC,mBAG7BI,EAAOlB,aAAY,SAACC,GAAD,OAAwBA,EAAMiB,QACjDwI,EAAgBD,EAAkB1I,KAAI,SAAA0H,GAC1C,IAAMkB,EAAc,CAClB1I,KAAMwH,EACN9H,KAAM,SACNO,KAAMA,EACHC,OACC,SAAAC,GAAG,OAAIA,EAAIC,WAAaoH,GAAWrH,EAAIG,KAAO,IAAIqI,KAAK,iBAExDtI,UACAP,KAAI,SAAAK,GAAG,MAAI,CAACA,EAAIG,KAAKC,UAAWJ,EAAIyI,cACpChB,QAGCiB,EAAmC,CACvC7I,KAAM,gBACNC,KAAMwG,EAAO,EAAGiC,EAAYzI,MAC5BP,KAAM,OACNoJ,qBAAqB,GAGjBhI,EAA8B,CAClCC,MAAO,CACLC,OAAQ,MACRwC,MAAO,OAETtC,MAAO,CACLC,KAAMqG,GAERpG,MAAO,CACL1B,KAAM,WACNwI,aAAc,QAEhB3G,MAAO,CACLL,MAAO,CACLC,KAAM,oBAGV4H,OAAQ,CACNrH,SAAS,GAEXF,OAAQ,CAACkH,EAAkCG,GAC3CpH,QAAS,CACPC,SAAS,IAIb,OACE,kBAACsH,EAAA,EAAD,CAAMC,MAAI,EAACrF,IAAK4D,GACd,kBAAC,IAAD,CAAiBjF,WAAYC,IAAY1B,QAASA,QAKxD,OACE,kBAAC3C,EAAD,CAAa2D,UAAW,EAAGD,GAAG,aAC5B,yCACA,kBAACmH,EAAA,EAAD,CAAME,WAAS,EAACC,QAAQ,SAASC,QAAS,GACvCX,KCjEHY,EAAgC,CAAEC,UAAW,UAEtCC,EAAS,WACpB,OACE,6BACE,2CACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAKxF,MAAOsF,GAAZ,YACY,IACV,uBAAGG,KAAK,oCAAR,qBAFF,OAEuE,IACrE,uBAAGA,KAAK,0CAAR,oCCfKC,EAAQ,WACnB,IAAMC,EAAU3K,aAAY,SAACC,GAAD,OAAuBA,EAAM0K,WACzD,OAAO,uCAAaA,ICPf,SAASC,EAAY1C,GACxB,MAAM,IAAIwC,MAAM,sBAAwBxC,GC4F5CzE,IAAWoH,WA3FuB,CAChCC,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEF9I,MAAO,CACL+I,gBAAiB,UACjBC,oBAAqB,0BACrBC,YAAY,EACZC,gBAAiB,GAEnB/I,MAAO,CACL6C,MAAO,CACLmG,MAAO,OACPC,KAAM,kDAGVC,SAAU,CACRrG,MAAO,CACLmG,MAAO,UACPC,KAAM,kDAGV/I,MAAO,CACLiJ,cAAe,EACfC,UAAW,OACXC,UAAW,OACXlJ,OAAQ,CACN0C,MAAO,CACLmG,MAAO,OACPC,KAAM,2CAGVjJ,MAAO,CACL6C,MAAO,CACLmG,MAAO,OACPM,WAAY,OACZC,SAAU,OACVC,WAAY,uCAIlBnJ,MAAO,CACLoJ,kBAAmB,OACnBL,UAAW,OACXM,UAAW,EACXC,UAAW,EACXN,UAAW,OACXlJ,OAAQ,CACN0C,MAAO,CACLmG,MAAO,OACPC,KAAM,2CAGVjJ,MAAO,CACL6C,MAAO,CACLmG,MAAO,OACPM,WAAY,OACZC,SAAU,OACVC,WAAY,uCAIlB3B,OAAQ,CACN+B,UAAW,CACTX,KAAM,wCACND,MAAO,SAETa,eAAgB,CACdb,MAAO,QAETc,gBAAiB,CACfd,MAAO,SAGXe,WAAY,CACVC,cAAe,CACbC,MAAO,CACLC,OAAQ,eCvET,ICsBsBC,EDtBhBC,EAAM,WACjB,IAAM5L,EAAOX,aAAkC,SAAAC,GAAK,OAAIA,EAAMU,QAE9D,OACE,oCACE,uBACEhB,UAAU,+BACV8K,KAAK,wCACL+B,cAAY,oBACZrK,MAAM,qBAJR,qBAQA,kBAAC5C,EAAA,EAAD,CAAKkN,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGpC,UAAU,UAChC,SAAC5J,GACD,OAAQA,GACN,IAAK,UACH,OAAO,kBAAC,EAAD,MACT,IAAK,SACH,OAAO,kBAAC,EAAD,MACT,IAAK,QACH,OAAO,kBAAC,EAAD,MACT,QACE,OAAOiK,EAAYjK,IATvB,CAWCA,M,2BChCEiM,GAA4B,SACvCC,EACAC,GAEA,IAAMC,EAAM,IAAIC,IAAIH,GACdI,EAAS,IAAIC,gBAAgBH,EAAIrH,QAGvC,OAFAuH,EAAOE,IAAI,cAAeC,KAAKC,UAAUP,IACzCC,EAAIrH,OAASuH,EAAOK,WACbP,EAAIO,YCNPC,GAAe,SAACtN,EAAcuN,GAAf,OAAyCvN,GAExDwN,GAAiB,SAACxN,EAAqBuN,GAC3C,OAAQA,EAAO7M,MACb,IAAK,gBACH,IAAMG,EDI6B,SAAC+L,GACxC,IAAME,EAAM,IAAIC,IAAIH,GAEdC,EADS,IAAII,gBAAgBH,EAAIrH,QACdgI,IAAI,eAC7B,IAAKZ,EACH,OAAOa,GAGT,IAAMC,EAA4BR,KAAKS,MAAMf,GAE7C,OAAKgB,MAAMC,QAAQH,GAKZA,GAJLI,QAAQC,MAAM,sBACPN,IChBmBO,CAA0BjO,EAAMkO,QAAQpB,KAChE,OAAO,2BACF9M,GADL,IAEEU,KAAM,SACNO,KAAuBsM,EAAOY,SAC9BvN,GAAI,CACFC,kBACA8C,WAAY,GACZ/B,UAAW,CACTC,WAAY,gBAGhBqM,QAAS,CACPpB,IAAKH,GAA0B3M,EAAMkO,QAAQpB,IAAKjM,MAGxD,IAAK,WACH,OAAO,2BACFb,GADL,IAEEF,SAAS,2BACJE,EAAMF,UADH,mBAELyN,EAAO7H,OAFF,aAGJxF,KAAMqN,EAAOrN,KACbC,MAAOwH,KAAKR,IAAInH,EAAMF,SAASyN,EAAO7H,QAAQvF,MAAOoN,EAAOrN,OACvC,IAAjBqN,EAAOpN,OAAe,CAAEA,MAAOwH,KAAKR,IAAIoG,EAAOpN,MAAOoN,EAAOrN,YAIzE,QACE,OAAOF,IAIPoO,GAAgB,SAACpO,EAAoBuN,GACzC,OAAQA,EAAO7M,MACb,IAAK,kBACH,IAWM2N,GAVJ7F,EAWA+E,EAAOzI,YAVP+H,EAWA7M,EAAMY,GAAGC,gBATLqD,mBAASsE,EAATtE,CAAkB2I,GACb1I,kBAAO,SAAAmK,GAAC,OAAIA,IAAM9F,IAASqE,GAG9B,CAAErE,GAAR,mBAAoBqE,KAQtB,OAAO,2BACF7M,GADL,IAEEY,GAAG,2BACEZ,EAAMY,IADT,IAEAC,gBAAiBwN,IAEnBH,QAAS,CACPpB,IAAKH,GAA0B3M,EAAMkO,QAAQpB,IAAKuB,MAGxD,IAAK,yBACH,OAAO,2BAAKrO,GAAZ,IAAmBY,GAAG,2BAAMZ,EAAMY,IAAb,IAAiB+C,WAAY4J,EAAO9H,WAC3D,IAAK,iCACH,OAAO,2BAAIzF,GAAX,IAAkBY,GAAG,2BAAMZ,EAAMY,IAAb,IAAiBgB,UAAU,2BAAK5B,EAAMY,GAAGgB,WAAf,IAA0BC,WAAY0L,EAAOrK,iBAC7F,QACE,OAAOlD,EA/BuB,IAC5BwI,EACAqE,G,oEC9BF0B,GAAU,SACdzB,GAKA,IAAM0B,EAAM,IAAIC,eAChBD,EAAIE,aAAe,OACnB,IAAMC,EAAY,IAAIC,MAAqB,SAACC,GAC1CL,EAAIM,iBAAiB,YAAY,SAAAC,GAAE,OACjCF,EAAWG,KAAK,CACd9O,KAAM6O,EAAGE,OACT9O,MAAO4O,EAAG5O,cAKV+O,EAAU,IAAIN,MAAmB,SAAAC,GACrCL,EAAIM,iBAAiB,oBAAoB,SAAAC,GAChB,IAAnBP,EAAIW,aAIW,MAAfX,EAAIY,QACNP,EAAWG,KAAKR,EAAIL,UACpBU,EAAWQ,YAEXR,EAAWb,MAAMQ,EAAIL,iBAO3B,OAFAK,EAAIc,KAAK,MAAOxC,GAChB0B,EAAIe,OACG,CAAEzP,SAAU6O,EAAWa,OAAQN,IAmF3BO,GAAWC,cAhFQ,SAC9BC,GAEA,IAAMC,EAAsDD,EAAQxJ,KAClEhC,cAAO,SAACoJ,GAAD,MAAoC,gBAAhBA,EAAO7M,QAClCmP,cAAQ,WAAO,IAAD,EACiBtB,GAC3B,+FADMzO,EADI,EACJA,SAAU0P,EADN,EACMA,OAGZb,EAAY7O,EAASqG,KACzBrF,aAAI,SAACgP,GAAD,OACFrP,EAAmB,2BAAKqP,GAAN,IAAcpK,OAAQ,eAItCwJ,EAAUM,EAAOrJ,KACrB0J,aAAQ7J,GACRlF,aAAI,SAACG,GAAD,MAAmC,CAAEP,KAAM,UAAWO,YAG5D,OAAO8O,aAAMpB,EAAWO,OAItBc,EAA2DL,EAAQxJ,KACvEhC,cAAO,SAACoJ,GAAD,MAAoC,gBAAhBA,EAAO7M,QAClCmP,cAAQ,WAAO,IAAD,EACiBtB,GAC3B,oFADMzO,EADI,EACJA,SAAU0P,EADN,EACMA,OAGZb,EAAY7O,EAASqG,KACzBrF,aAAI,SAACgP,GAAD,OACFrP,EAAmB,2BAAKqP,GAAN,IAAcpK,OAAQ,oBAItCwJ,EAAUM,EAAOrJ,KACrB0J,aAAQtJ,GACRzF,aAAI,SAACG,GAAD,MAAmC,CAAEP,KAAM,UAAWO,YAG5D,OAAO8O,aAAMpB,EAAWO,OAItBe,EAAgDF,aACpDH,EACAI,GACA7J,KACAhC,cAAO,SAAA8F,GAAI,MAAkB,aAAdA,EAAKvJ,QACpBI,aAAI,SAAAmJ,GAAI,OAAIA,MAGRiG,EAAkB,SAACC,GAAD,OACtBA,EAAMhK,KAAKhC,cAAO,SAAA8F,GAAI,MAAkB,YAAdA,EAAKvJ,UAE3B0P,EAAuCC,aAC3CH,EAAgBN,GAChBM,EAAgBF,IAChB7J,KACArF,aACE,YAAkC,IAAD,mBAA/BP,EAA+B,KAAxBC,EAAwB,KAC/B,MAAmB,YAAfD,EAAMG,MAA0C,YAApBF,EAAWE,KAClC,CACLA,KAAM,gBACNyN,SAAUxH,EAAqBpG,EAAMU,KAAMT,EAAWS,OAGjD,CACLP,KAAM,qBACNgK,QAAQ,UAAD,OAAYnK,EAAZ,eAAwBC,EAAxB,yBAOjB,OAAOuP,aAAME,EAAmBG,MCvFrBE,GAAsB,CACjC5P,KAAM,UACNZ,SAAU,CACRS,MAAO,CAAEL,KAAM,EAAGC,MANI,SAOtBK,WAAY,CAAEN,KAAM,EAAGC,MANI,SAQ7B+N,QAAS,CACPpB,IAAKyD,OAAO1M,SAASwJ,aAIZK,GAAmB,CAAC,MAAO,MAAO,MAAO,MAAO,OAIvD8C,GAAiBC,eACVpE,GAAQqE,YAAe,CAClCC,QFmBqB,WAAyD,IAAxD3Q,EAAuD,uDAAxCsQ,GAAc/C,EAA0B,uCAC7E,GAAoB,gBAAhBA,EAAO7M,KACT,OAAO,2BAAKV,GAAZ,IAAmBkO,QAAQ,2BAAMlO,EAAMkO,SAAb,IAAsBpB,IAAKS,EAAOT,QAG9D,OAAQ9M,EAAMU,MACZ,IAAK,QACH,OAAO4M,GAAatN,GACtB,IAAK,UACH,OAAOwN,GAAexN,EAAOuN,GAC/B,IAAK,SACH,OAAOa,GAAcpO,EAAOuN,GAC9B,QACE,OAAO5C,EAAY3K,KE/BvB4Q,WAAY,CAACJ,MAEfA,GAAeK,IAAIpB,IHjCUpD,EGmChBA,GHlCXkE,OAAOzB,iBAAiB,YAAY,WAClCzC,EAAM1J,SX0CwD,CAChEjC,KAAM,cACNoM,IW5CgCyD,OAAO1M,SAASwJ,gBAGhDhB,EAAMyE,WAAU,WAAO,IACbhE,EAAQT,EAAM0E,WAAW7C,QAAzBpB,IACJyD,OAAO1M,SAASwJ,aAAeP,IACjCyD,OAAOS,QAAQC,UAAU,KAAM,GAAInE,GACnCoE,SAASC,KAAKC,UAAY,MG2BhC/E,GAAM1J,Sd3D+C,CACnDjC,KAAM,gB,kCeLF2Q,I,OAAcH,SAASI,eAAe,SAEtCC,GAAYC,aAAe,CAC/BC,QAAS,CACP/Q,KAAM,WAIVgR,IAASC,OACP,kBAAC,IAAD,CAAUtF,MAAOA,IACf,kBAAC,IAAMuF,WAAP,KACE,kBAACC,GAAA,EAAD,CAAe1F,MAAOoF,IACpB,kBAACO,GAAA,EAAD,MACA,kBAAC,EAAD,SAINT,M","file":"static/js/main.f3531c26.chunk.js","sourcesContent":["import React from \"react\";\n\nimport {\n  Box,\n  Paper,\n  PaperProps,\n  withStyles,\n  createStyles,\n  WithStyles,\n} from \"@material-ui/core\";\n\nconst withPadding = createStyles({\n  paperPadding: {\n    padding: \"30px\",\n  },\n});\n\nconst spacedPaper: React.FC<PaperProps & WithStyles<typeof withPadding>> = (\n  props: PaperProps & WithStyles<typeof withPadding>,\n) => (\n  <Box m={3} p={3}>\n    <Paper {...props} className={props.classes.paperPadding}>\n      {props.children}\n    </Paper>\n  </Box>\n);\n\nexport const SpacedPaper = withStyles(withPadding)(spacedPaper);\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { LoadingState } from \"../store\";\n\nimport { LinearProgress } from \"@material-ui/core\";\nimport { SpacedPaper } from \"./SpacedPaper\";\n\nexport const Loading = () => {\n  const progress = useSelector((state: LoadingState) => state.progress);\n\n  const normalize = ({ done, total }: { done: number; total: number }) =>\n    (done / total) * 100;\n\n  return (\n    <SpacedPaper>\n      <div>\n        <h2>loading covid data</h2>\n        <LinearProgress\n          variant=\"determinate\"\n          value={normalize(progress.covid)}\n        />\n      </div>\n      <div>\n        <h2>loading world population data</h2>\n        <LinearProgress\n          variant=\"determinate\"\n          value={normalize(progress.population)}\n        />\n      </div>\n    </SpacedPaper>\n  );\n};\n","import { IDataFrame } from \"data-forge\";\n\nexport type Action =\n  | InitialAction\n  | ErrorDuringFetchAction\n  | FetchSuccessAction\n  | CountryToggleAction\n  | CountrySearchChangedAction\n  | ProgressAction\n  | UrlUpdatedAction\n  | CaseChartLogSettingChangedAction;\n\nexport interface InitialAction {\n  type: \"initialized\";\n}\nexport const makeInitialized = (): InitialAction => ({\n  type: \"initialized\",\n});\n\nexport interface ErrorDuringFetchAction {\n  type: \"error-during-fetch\";\n  message: string;\n}\nexport const makeErrorDuringFetch = (\n  message: string,\n): ErrorDuringFetchAction => ({\n  type: \"error-during-fetch\",\n  message,\n});\n\nexport interface FetchSuccessAction {\n  type: \"fetch-success\";\n  response: IDataFrame;\n}\nexport const makeFetchSuccess = (response: IDataFrame): FetchSuccessAction => ({\n  type: \"fetch-success\",\n  response,\n});\n\nexport interface CountryToggleAction {\n  type: \"country-toggled\";\n  countryCode: string;\n}\nexport const makeCountryToggleAction = (\n  countryCode: string,\n): CountryToggleAction => ({\n  type: \"country-toggled\",\n  countryCode,\n});\n\nexport interface CountrySearchChangedAction {\n  type: \"country-search-changed\";\n  search: string;\n}\n\nexport const makeCoutrySearchChangedAction = (\n  search: string,\n): CountrySearchChangedAction => ({\n  type: \"country-search-changed\",\n  search,\n});\n\nexport interface ProgressAction {\n  type: \"progress\";\n  target: \"covid\" | \"population\";\n  done: number;\n  total: number;\n}\n\nexport const makeProgressAction = (progress: {\n  target: \"covid\" | \"population\";\n  done: number;\n  total: number;\n}): ProgressAction => {\n  return { ...progress, type: \"progress\" };\n};\n\nexport interface UrlUpdatedAction {\n  type: \"url-updated\";\n  url: string;\n}\n\nexport const makeUrlUpdated = (url: string): UrlUpdatedAction => ({\n  type: \"url-updated\",\n  url,\n});\n\nexport interface CaseChartLogSettingChangedAction {\n  type: \"case-chart-log-setting-changed\";\n  newSetting: \"linear\" | \"logarithmic\";\n}\n\nexport const makeCaseChartLogSettingChangedAction = (\n  newSetting: \"linear\" | \"logarithmic\",\n): CaseChartLogSettingChangedAction => ({\n  type: \"case-chart-log-setting-changed\",\n  newSetting,\n});\n","import React from \"react\";\n\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nimport { LoadedState } from \"../store\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { makeCaseChartLogSettingChangedAction } from \"../actions\";\n\nimport { SpacedPaper } from \"./SpacedPaper\";\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\n\nconst selectDataToRenderIntoChart = (\n  state: LoadedState,\n): {\n  name: string;\n  data: [Date, number][];\n  type: \"line\";\n}[] =>\n  state.ui.pickedCountries.map((pickedCountry: string) => ({\n    name: pickedCountry,\n    data: state.data\n      .where(row => row.iso_code === pickedCountry)\n      .toArray()\n      .map(row => [\n        row.date.getTime(),\n        (row.total_cases * 1000000) / row.population,\n      ]),\n    type: \"line\",\n  }));\n\nexport const CaseChart = () => {\n  const cases = useSelector(selectDataToRenderIntoChart);\n  const logAxisSetting = useSelector(\n    (state: LoadedState) => state.ui.caseChart.logSetting,\n  );\n\n  const options: Highcharts.Options = {\n    chart: {\n      height: \"50%\",\n      zoomType: \"x\",\n    },\n    title: {\n      text: \"\",\n    },\n    xAxis: {\n      type: \"datetime\",\n      title: {\n        text: \"Date\",\n      },\n      labels: {\n        step: 1,\n      },\n    },\n    yAxis: {\n      type: logAxisSetting,\n      title: {\n        text: \"Cases per 1M population\",\n      },\n    },\n    series: cases,\n    credits: {\n      enabled: false,\n    },\n  };\n\n  const dispatch = useDispatch();\n  const handleAxisLogarithmicToggle = (_: any, newSetting: string | null) => {\n    if (!newSetting) {\n      return;\n    }\n\n    if (!(newSetting === \"linear\" || newSetting === \"logarithmic\")) {\n      return;\n    }\n\n    dispatch(makeCaseChartLogSettingChangedAction(newSetting));\n  };\n\n  return (\n    <SpacedPaper id=\"cases\" elevation={3}>\n      <h2>Cases over Time</h2>\n      <ToggleButtonGroup\n        value={logAxisSetting}\n        onChange={handleAxisLogarithmicToggle}\n        exclusive\n        aria-label=\"log axis setting\"\n      >\n        <ToggleButton value=\"logarithmic\" aria-label=\"logarithmic\">\n          log\n        </ToggleButton>\n        <ToggleButton value=\"linear\" aria-label=\"linear\">\n          linear\n        </ToggleButton>\n      </ToggleButtonGroup>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </SpacedPaper>\n  );\n};\n","import React, { CSSProperties } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { LoadedState } from \"../store\";\n\nimport { createSelector } from \"reselect\";\n\nimport { includes } from \"lodash/fp\";\nimport {\n  makeCountryToggleAction,\n  makeCoutrySearchChangedAction,\n} from \"../actions\";\nimport { IDataFrame } from \"data-forge\";\n\nimport { List, ListItem, Checkbox, TextField } from \"@material-ui/core\";\n\nimport { SpacedPaper } from \"./SpacedPaper\";\n\nconst dataSelector = (state: LoadedState) => state.data;\nconst pickedCountriesSelector = (state: LoadedState) =>\n  state.ui.pickedCountries;\nconst searchTextSelector = (state: LoadedState) => state.ui.searchText;\n\nconst coutrySelector = createSelector(\n  dataSelector,\n  pickedCountriesSelector,\n  searchTextSelector,\n  (data: IDataFrame, pickedCountries: string[], searchText) =>\n    data\n      .select(\n        ({ iso_code, location }: { iso_code: string; location: string }) => ({\n          iso_code,\n          location,\n        }),\n      )\n      .distinct(row => row.iso_code)\n      .orderBy(row => row.location)\n      .toPairs()\n      .map(([_, row]) => ({\n        ...row,\n        active: includes(row.iso_code)(pickedCountries),\n      }))\n      .filter(\n        row =>\n          row.active ||\n          (searchText !== \"\" &&\n            row.location.toLowerCase().startsWith(searchText.toLowerCase())),\n      ),\n);\n\nexport const CountryPicker = () => {\n  const dispatch = useDispatch();\n\n  const autoWidthItem: CSSProperties = {\n    width: \"180px\",\n  };\n\n  const allCountries = useSelector(coutrySelector).map(\n    ({ iso_code, location, active }) => (\n      <ListItem\n        button\n        key={iso_code}\n        onClick={_ => dispatch(makeCountryToggleAction(iso_code))}\n        style={autoWidthItem}\n      >\n        <Checkbox\n          edge=\"start\"\n          checked={active}\n          tabIndex={-1}\n          disableRipple\n          inputProps={{ \"aria-labelledby\": iso_code }}\n        />\n        {location}\n      </ListItem>\n    ),\n  );\n\n  const searchText = useSelector((state: LoadedState) => state.ui.searchText);\n\n  const flexContainer: CSSProperties = {\n    display: \"flex\",\n    padding: 0,\n    flexWrap: \"wrap\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  };\n\n  return (\n    <SpacedPaper elevation={3}>\n      <label>\n        <br />\n        <TextField\n          type=\"text\"\n          name=\"search\"\n          placeholder=\"Search Countries\"\n          onChange={e =>\n            dispatch(makeCoutrySearchChangedAction(e.target.value))\n          }\n          value={searchText}\n        />\n        <List id=\"countries\" style={flexContainer}>\n          {allCountries}\n        </List>\n      </label>\n    </SpacedPaper>\n  );\n};\n","import { Observable, of } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { fromCSV, IDataFrame, Series } from \"data-forge\";\n\ninterface CovidRow {\n  iso_code: string;\n}\n\ninterface PopulationRow {\n  iso_code: string;\n  population: string;\n  year: number;\n}\n\nexport const parseCovidCSV = (data: string): Observable<IDataFrame> =>\n  of(fromCSV(data)).pipe(\n    map((df: IDataFrame): IDataFrame => df.parseDates(\"date\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"total_cases\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"new_cases\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"total_deaths\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"new_deaths\")),\n  );\n\nexport const parsePopulationCSV = (data: string): Observable<IDataFrame> =>\n  of(fromCSV(data)).pipe(\n    map((df: IDataFrame): IDataFrame => df.parseInts([\"Value\", \"Year\"])),\n    map(\n      (df: IDataFrame): IDataFrame =>\n        df.renameSeries({\n          Year: \"year\",\n          \"Country Code\": \"iso_code\",\n          Value: \"population\",\n        }),\n    ),\n  );\n\nexport const transformCsvData = (data: IDataFrame): IDataFrame => data;\n\ntype Maximums = Map<string, number>;\n\ntype Accumulator = {\n  maximums: Maximums;\n  result: IDataFrame;\n};\n\nconst computeLatestPopulation = (population: IDataFrame): IDataFrame =>\n  population\n    .groupBy(row => row.iso_code)\n    .select(group => {\n      const { year: maxYear } = group.summarize({ year: Series.max });\n      const pop = group.where(row => row.year === maxYear).first().population;\n      return {\n        iso_code: group.first().iso_code,\n        population: pop,\n      };\n    })\n    .inflate();\n\nexport const mergeCovidPopulation = (\n  covid: IDataFrame,\n  population: IDataFrame,\n): IDataFrame => {\n  const populationLatest = computeLatestPopulation(population);\n  return covid.join(\n    populationLatest,\n    (covid: CovidRow) => covid.iso_code,\n    (pop: PopulationRow) => pop.iso_code,\n    (covid: CovidRow, pop: PopulationRow | null) => ({\n      ...covid,\n      population: pop ? pop.population : 0,\n    }),\n  );\n};\n\nexport const smooth = (amount: number, series: number[][]): number[][] => {\n  amount = Math.ceil(Math.abs(amount));\n  let results: Array<Array<number>> = [];\n  for (let i = 0; i < series.length; i++) {\n    let [x] = series[i];\n\n    let valuesInAverage = 0;\n    let sum = 0;\n    for (let j = amount * -1; j <= amount; j++) {\n      if (series[i + j] === undefined) {\n        // ignore edges\n        continue;\n      }\n\n      sum = sum + series[i + j][1];\n      valuesInAverage = valuesInAverage + 1;\n    }\n\n    results.push([x, sum / valuesInAverage]);\n  }\n  return results;\n};","import React from \"react\";\n\nimport Highcharts, { SeriesOptionsType } from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nimport { useSelector } from \"react-redux\";\nimport { LoadedState } from \"../store\";\n\nimport { smooth } from \"../store/data\";\n\nimport { SpacedPaper } from \"./SpacedPaper\";\n\nconst deathCurveSelector = (state: LoadedState): SeriesOptionsType[] =>\n  state.ui.pickedCountries.map(country => {\n    const filteredByCountry = state.data.where(row => row.iso_code === country);\n\n    const deaths = filteredByCountry.select(row => ({\n      iso_code: row.iso_code,\n      total_deaths: row.total_deaths,\n      population: row.population,\n      new_deaths: row.new_deaths,\n    }));\n\n    return {\n      name: country,\n      type: \"line\",\n      data: smooth(\n        2,\n        deaths\n          .toArray()\n          .map(row => [\n            row.total_deaths / row.population,\n            row.new_deaths / row.population,\n          ])\n          .sort(([a, _], [b, __]) => (a < b ? -1 : 1)),\n      ).filter(([x, y]) => x !== 0 && y !== 0),\n    };\n  });\n\nexport const DeathCurve = () => {\n  const deaths = useSelector(deathCurveSelector);\n\n  const options: Highcharts.Options = {\n    title: {\n      text: \"\",\n    },\n    chart: {\n      height: \"50%\",\n      zoomType: \"xy\",\n    },\n    xAxis: {\n      type: \"logarithmic\",\n      title: {\n        text: \"Fraction of dead population\",\n      },\n      min: 1e-6,\n      tickInterval: 1,\n      labels: {\n        step: 1,\n        formatter: function () {\n          return this.value.toExponential(0);\n        },\n      },\n    },\n    yAxis: {\n      type: \"logarithmic\",\n      title: {\n        text: \"Fraction of dead population per day (smoothed)\",\n      },\n      min: 1e-7,\n      tickInterval: 1,\n      labels: {\n        step: 1,\n        formatter: function () {\n          return this.value.toExponential(0);\n        },\n      },\n    },\n    series: deaths,\n    credits: {\n      enabled: false,\n    },\n  };\n\n  return (\n    <SpacedPaper id=\"deathcurve\" elevation={3}>\n      <h2>\n        Robins Death Curve\n        <span role=\"img\" aria-label=\"tm\">\n          ™️\n        </span>\n      </h2>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </SpacedPaper>\n  );\n};\n","import React from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { LoadedState } from \"../store\";\nimport Highcharts, { SeriesOptionsType } from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport { smooth } from \"../store/data\";\nimport { SpacedPaper } from \"./SpacedPaper\";\n\nexport const NewCaseChart = () => {\n  const selectedCountries = useSelector(\n    (state: LoadedState) => state.ui.pickedCountries,\n  );\n\n  const data = useSelector((state: LoadedState) => state.data);\n  const countryCharts = selectedCountries.map(country => {\n    const countryData = {\n      name: country,\n      type: \"column\",\n      data: data\n        .where(\n          row => row.iso_code === country && row.date > new Date(\"03-01-2020\"),\n        )\n        .toArray()\n        .map(row => [row.date.getTime(), row.new_cases])\n        .sort(),\n    };\n\n    const movingAverage: SeriesOptionsType = {\n      name: \"7 day average\",\n      data: smooth(3, countryData.data),\n      type: \"line\",\n      enableMouseTracking: false,\n    };\n\n    const options: Highcharts.Options = {\n      chart: {\n        height: \"200\",\n        width: \"300\",\n      },\n      title: {\n        text: country,\n      },\n      xAxis: {\n        type: \"datetime\",\n        tickInterval: 7 * 24 * 3600 * 1000,\n      },\n      yAxis: {\n        title: {\n          text: \"daily new cases\",\n        },\n      },\n      legend: {\n        enabled: false,\n      },\n      series: [countryData as SeriesOptionsType, movingAverage],\n      credits: {\n        enabled: false,\n      },\n    };\n\n    return (\n      <Grid item key={country}>\n        <HighchartsReact highcharts={Highcharts} options={options} />\n      </Grid>\n    );\n  });\n\n  return (\n    <SpacedPaper elevation={3} id=\"new-cases\">\n      <h2>New Cases</h2>\n      <Grid container justify=\"center\" spacing={5}>\n        {countryCharts}\n      </Grid>\n    </SpacedPaper>\n  );\n};\n","import React from \"react\";\n\nimport { CaseChart } from \"./CaseChart\";\nimport { CountryPicker } from \"./CountryPicker\";\nimport { DeathCurve } from \"./DeathCurve\";\nimport { NewCaseChart } from \"./NewCaseChart\";\n\nconst centered: React.CSSProperties = { textAlign: \"center\" };\n\nexport const Loaded = () => {\n  return (\n    <div>\n      <h1>Covid Stats</h1>\n      <CountryPicker />\n      <NewCaseChart />\n      <CaseChart />\n      <DeathCurve />\n      <div style={centered}>\n        data from{\" \"}\n        <a href=\"https://covid.ourworldindata.org\">Our World In Data</a> and{\" \"}\n        <a href=\"https://github.com/datasets/population\">\n          datahub.io via the World Bank\n        </a>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { ErrorState } from \"../store\";\nimport { useSelector } from \"react-redux\";\n\nexport const Error = () => {\n  const message = useSelector((state: ErrorState) => state.message);\n  return <div>Error: {message}</div>;\n};\n","export function assertNever(x: never): never {\n    throw new Error(\"Unexpected object: \" + x);\n}","import Highcharts from \"highcharts\";\n\nconst theme: Highcharts.Options = {\n  colors: [\n    \"#058DC7\",\n    \"#50B432\",\n    \"#ED561B\",\n    \"#DDDF00\",\n    \"#24CBE5\",\n    \"#64E572\",\n    \"#FF9655\",\n    \"#FFF263\",\n    \"#6AF9C4\",\n  ],\n  chart: {\n    backgroundColor: \"#FFFFFF\",\n    plotBackgroundColor: \"rgba(255, 255, 255, .9)\",\n    plotShadow: false,\n    plotBorderWidth: 0,\n  },\n  title: {\n    style: {\n      color: \"#000\",\n      font: 'bold 16px \"Trebuchet MS\", Verdana, sans-serif',\n    },\n  },\n  subtitle: {\n    style: {\n      color: \"#666666\",\n      font: 'bold 12px \"Trebuchet MS\", Verdana, sans-serif',\n    },\n  },\n  xAxis: {\n    gridLineWidth: 1,\n    lineColor: \"#000\",\n    tickColor: \"#000\",\n    labels: {\n      style: {\n        color: \"#000\",\n        font: \"11px Trebuchet MS, Verdana, sans-serif\",\n      },\n    },\n    title: {\n      style: {\n        color: \"#333\",\n        fontWeight: \"bold\",\n        fontSize: \"12px\",\n        fontFamily: \"Trebuchet MS, Verdana, sans-serif\",\n      },\n    },\n  },\n  yAxis: {\n    minorTickInterval: \"auto\",\n    lineColor: \"#000\",\n    lineWidth: 1,\n    tickWidth: 1,\n    tickColor: \"#000\",\n    labels: {\n      style: {\n        color: \"#000\",\n        font: \"11px Trebuchet MS, Verdana, sans-serif\",\n      },\n    },\n    title: {\n      style: {\n        color: \"#333\",\n        fontWeight: \"bold\",\n        fontSize: \"12px\",\n        fontFamily: \"Trebuchet MS, Verdana, sans-serif\",\n      },\n    },\n  },\n  legend: {\n    itemStyle: {\n      font: \"9pt Trebuchet MS, Verdana, sans-serif\",\n      color: \"black\",\n    },\n    itemHoverStyle: {\n      color: \"#039\",\n    },\n    itemHiddenStyle: {\n      color: \"gray\",\n    },\n  },\n  navigation: {\n    buttonOptions: {\n      theme: {\n        stroke: \"#CCCCCC\",\n      },\n    },\n  },\n};\n\nHighcharts.setOptions(theme);\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"./App.css\";\nimport \"github-fork-ribbon-css/gh-fork-ribbon.css\";\n\nimport { State } from \"../store\";\n\nimport { Loading } from \"./Loading\";\nimport { Loaded } from \"./Loaded\";\nimport { Error } from \"./Error\";\n\nimport { assertNever } from \"../utils\";\nimport \"./highchartsTheme\";\n\nimport Box from \"@material-ui/core/Box\";\n\nexport const App = () => {\n  const type = useSelector<State, State[\"type\"]>(state => state.type);\n\n  return (\n    <>\n      <a\n        className=\"github-fork-ribbon right-top\"\n        href=\"https://github.com/jupp0r/covid-stats\"\n        data-ribbon=\"Fork me on GitHub\"\n        title=\"Fork me on GitHub\"\n      >\n        Fork me on GitHub\n      </a>\n      <Box px={3} py={3} my={3} textAlign=\"center\">\n        {((type: State[\"type\"]) => {\n          switch (type) {\n            case \"loading\":\n              return <Loading />;\n            case \"loaded\":\n              return <Loaded />;\n            case \"error\":\n              return <Error />;\n            default:\n              return assertNever(type);\n          }\n        })(type)}\n      </Box>\n    </>\n  );\n};\n","import { Action } from \"../actions\";\nimport { State } from \"../store\";\n\nimport { Store } from \"redux\";\n\nimport { makeUrlUpdated } from \"../actions\";\nimport { defaultCountries } from \"../store\";\n\n\nexport const updateCountriesInPathName = (\n  urlString: string,\n  countries: string[],\n): string => {\n  const url = new URL(urlString);\n  const params = new URLSearchParams(url.search);\n  params.set(\"countries[]\", JSON.stringify(countries));\n  url.search = params.toString();\n  return url.toString();\n};\n\nexport const getPickedCountriesFromUrl = (urlString: string): string[] => {\n  const url = new URL(urlString);\n  const params = new URLSearchParams(url.search);\n  const countries = params.get(\"countries[]\");\n  if (!countries) {\n    return defaultCountries;\n  }\n\n  const parsedCountries: string[] = JSON.parse(countries);\n\n  if (!Array.isArray(parsedCountries)) {\n    console.error(\"invalid url params\");\n    return defaultCountries;\n  }\n\n  return parsedCountries;\n};\n\nexport const setupRouting = (store: Store<State, Action>) => {\n  window.addEventListener(\"popstate\", () => {\n    store.dispatch(makeUrlUpdated(window.location.toString()));\n  });\n\n  store.subscribe(() => {\n    const { url } = store.getState().routing;\n    if (window.location.toString() !== url) {\n      window.history.pushState(null, \"\", url);\n      document.body.scrollTop = 0;\n    }\n  });\n};\n","import { initialState, State, LoadedState, LoadingState } from \"../store\";\n\nimport { Action } from \"../actions\";\nimport { transformCsvData } from \"../store/data\";\n\nimport { assertNever } from \"../utils\";\n\nimport { includes, filter } from \"lodash/fp\";\n\nimport { getPickedCountriesFromUrl, updateCountriesInPathName } from \"./router\";\n\nconst errorReducer = (state: State, action: Action): State => state;\n\nconst loadingReducer = (state: LoadingState, action: Action): State => {\n  switch (action.type) {\n    case \"fetch-success\":\n      const pickedCountries = getPickedCountriesFromUrl(state.routing.url);\n      return {\n        ...state,\n        type: \"loaded\",\n        data: transformCsvData(action.response),\n        ui: {\n          pickedCountries,\n          searchText: \"\",\n          caseChart: {\n            logSetting: \"logarithmic\",\n          },\n        },\n        routing: {\n          url: updateCountriesInPathName(state.routing.url, pickedCountries)\n        }\n      };\n    case \"progress\":\n      return {\n        ...state,\n        progress: {\n          ...state.progress,\n          [action.target]: {\n            done: action.done,\n            total: Math.max(state.progress[action.target].total, action.done),\n            ...(action.total !== 0 && { total: Math.max(action.total, action.done) }),\n          },\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nconst loadedReducer = (state: LoadedState, action: Action): State => {\n  switch (action.type) {\n    case \"country-toggled\":\n      const toggleCountryToPicked = (\n        country: string,\n        countries: string[],\n      ): string[] => {\n        if (includes(country)(countries)) {\n          return filter(c => c !== country, countries);\n        }\n\n        return [country, ...countries];\n      };\n\n      const newCountries = toggleCountryToPicked(\n        action.countryCode,\n        state.ui.pickedCountries,\n      );\n\n      return {\n        ...state,\n        ui: {\n          ...state.ui,\n          pickedCountries: newCountries,\n        },\n        routing: {\n          url: updateCountriesInPathName(state.routing.url, newCountries),\n        },\n      };\n    case \"country-search-changed\":\n      return { ...state, ui: { ...state.ui, searchText: action.search } };\n    case \"case-chart-log-setting-changed\":\n      return {...state, ui: { ...state.ui, caseChart: {...state.ui.caseChart, logSetting: action.newSetting}}}\n    default:\n      return state;\n  }\n};\n\nexport const reducer = (state: State = initialState, action: Action): State => {\n  if (action.type === \"url-updated\") {\n    return { ...state, routing: { ...state.routing, url: action.url } };\n  }\n  \n  switch (state.type) {\n    case \"error\":\n      return errorReducer(state, action);\n    case \"loading\":\n      return loadingReducer(state, action);\n    case \"loaded\":\n      return loadedReducer(state, action);\n    default:\n      return assertNever(state);\n  }\n};\n","import { Observable, zip, merge } from \"rxjs\";\n\nimport { filter, flatMap, map } from \"rxjs/operators\";\n\nimport { Action, makeProgressAction, ProgressAction } from \"../actions\";\n\nimport { combineEpics } from \"redux-observable\";\n\nimport {\n  parseCovidCSV,\n  parsePopulationCSV,\n  mergeCovidPopulation,\n} from \"../store/data\";\nimport { IDataFrame } from \"data-forge\";\n\ntype DataResult =\n  | { type: \"success\"; data: IDataFrame }\n  | { type: \"error\"; reason: string };\n\ninterface Progress {\n  done: number;\n  total: number;\n}\n\nconst fromXhr = (\n  url: string,\n): {\n  progress: Observable<Progress>;\n  result: Observable<string>;\n} => {\n  const xhr = new XMLHttpRequest();\n  xhr.responseType = \"text\";\n  const progress$ = new Observable<Progress>((subscriber): void => {\n    xhr.addEventListener(\"progress\", ev =>\n      subscriber.next({\n        done: ev.loaded,\n        total: ev.total,\n      }),\n    );\n  });\n\n  const result$ = new Observable<string>(subscriber => {\n    xhr.addEventListener(\"readystatechange\", ev => {\n      if (xhr.readyState !== 4) {\n        return;\n      }\n\n      if (xhr.status === 200) {\n        subscriber.next(xhr.response);\n        subscriber.complete();\n      } else {\n        subscriber.error(xhr.response);\n      }\n    });\n  });\n\n  xhr.open(\"GET\", url);\n  xhr.send();\n  return { progress: progress$, result: result$ };\n};\n\nexport const startLoadingEpic = (\n  action$: Observable<Action>,\n): Observable<Action> => {\n  const covidData$: Observable<ProgressAction | DataResult> = action$.pipe(\n    filter((action: Action) => action.type === \"initialized\"),\n    flatMap(() => {\n      const { progress, result } = fromXhr(\n        \"https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv\",\n      );\n      const progress$ = progress.pipe(\n        map((update: Progress) =>\n          makeProgressAction({ ...update, target: \"covid\" }),\n        ),\n      );\n\n      const result$ = result.pipe(\n        flatMap(parseCovidCSV),\n        map((data: IDataFrame): DataResult => ({ type: \"success\", data })),\n      );\n\n      return merge(progress$, result$);\n    }),\n  );\n\n  const populationData$: Observable<ProgressAction | DataResult> = action$.pipe(\n    filter((action: Action) => action.type === \"initialized\"),\n    flatMap(() => {\n      const { progress, result } = fromXhr(\n        \"https://raw.githubusercontent.com/datasets/population/master/data/population.csv\",\n      );\n      const progress$ = progress.pipe(\n        map((update: Progress) =>\n          makeProgressAction({ ...update, target: \"population\" }),\n        ),\n      );\n\n      const result$ = result.pipe(\n        flatMap(parsePopulationCSV),\n        map((data: IDataFrame): DataResult => ({ type: \"success\", data })),\n      );\n\n      return merge(progress$, result$);\n    }),\n  );\n\n  const combinedProgress$: Observable<ProgressAction> = merge(\n    covidData$,\n    populationData$,\n  ).pipe(\n    filter(item => item.type === \"progress\"),\n    map(item => item as ProgressAction),\n  );\n\n  const filterForResult = (data$: Observable<ProgressAction | DataResult>) =>\n    data$.pipe(filter(item => item.type === \"success\"));\n\n  const combinedResults$: Observable<Action> = zip(\n    filterForResult(covidData$),\n    filterForResult(populationData$),\n  ).pipe(\n    map(\n      ([covid, population]): Action => {\n        if (covid.type === \"success\" && population.type === \"success\") {\n          return {\n            type: \"fetch-success\",\n            response: mergeCovidPopulation(covid.data, population.data),\n          };\n        } else {\n          return {\n            type: \"error-during-fetch\",\n            message: `Error: ${covid} or ${population} failed to fetch`,\n          };\n        }\n      },\n    ),\n  );\n\n  return merge(combinedProgress$, combinedResults$);\n};\n\nexport const rootEpic = combineEpics(startLoadingEpic);\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { reducer } from \"../reducers/reducers\";\nimport { createEpicMiddleware } from \"redux-observable\";\nimport { rootEpic } from \"../epics\";\nimport { makeInitialized } from \"../actions\";\nimport { IDataFrame } from \"data-forge\";\nimport { Store as ReduxStore } from \"redux\";\nimport { Action } from \"../actions\";\nimport { setupRouting } from \"../reducers/router\";\n\nexport type State = (LoadingState | LoadedState | ErrorState);\ninterface RoutingState {\n  routing: {\n    url: string,\n  }\n}\n\ninterface Progress {\n  done: number;\n  total: number;\n}\nexport type LoadingState = {\n  type: \"loading\";\n  progress: {\n    covid: Progress;\n    population: Progress;\n  };\n} & RoutingState;\n\nexport type UIState = {\n  pickedCountries: string[];\n  searchText: string;\n  caseChart: {\n    logSetting: \"linear\" | \"logarithmic\";\n  };\n}\n\nexport type LoadedState = {\n  type: \"loaded\";\n  data: IDataFrame;\n  ui: UIState;\n} & RoutingState\n\nexport type ErrorState = {\n  type: \"error\";\n  message: string;\n} & RoutingState;\n\nconst covidSizeEstimate = 2459742;\nconst populationSizeEstimate = 487991;\n\nexport const initialState: State = {\n  type: \"loading\",\n  progress: {\n    covid: { done: 0, total: covidSizeEstimate },\n    population: { done: 0, total: populationSizeEstimate },\n  },\n  routing: {\n    url: window.location.toString(),\n  }\n};\n\nexport const defaultCountries = [\"USA\", \"DEU\", \"SWE\", \"ITA\", \"NGA\"];\n\nexport type Store = ReduxStore<State, Action>;\n\nconst epicMiddleware = createEpicMiddleware();\nexport const store = configureStore({\n  reducer,\n  middleware: [epicMiddleware],\n});\nepicMiddleware.run(rootEpic);\n\nsetupRouting(store);\nstore.dispatch(makeInitialized());\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./components/App\";\n\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\nimport { createMuiTheme, ThemeProvider, CssBaseline } from \"@material-ui/core\";\n\nimport \"typeface-roboto\";\n\nconst rootElement = document.getElementById(\"root\");\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: \"light\",\n  },\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <ThemeProvider theme={darkTheme}>\n        <CssBaseline />\n        <App />\n      </ThemeProvider>\n    </React.StrictMode>\n  </Provider>,\n  rootElement,\n);\n"],"sourceRoot":""}