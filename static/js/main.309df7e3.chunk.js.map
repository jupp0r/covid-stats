{"version":3,"sources":["components/SpacedPaper.tsx","components/Loading.tsx","actions/index.ts","components/countryColors.ts","selectors/index.ts","components/CaseChart.tsx","components/CountryPicker.tsx","components/DataTable.tsx","store/data.ts","components/DeathCurve.tsx","components/NewCaseChart.tsx","components/Loaded.tsx","components/Error.tsx","utils.ts","components/highchartsTheme.ts","components/App.tsx","reducers/router.ts","reducers/reducers.ts","epics/index.ts","store/index.ts","index.tsx"],"names":["withPadding","createStyles","paperPadding","padding","SpacedPaper","withStyles","props","Box","my","py","Paper","className","classes","children","Loading","progress","useSelector","state","normalize","done","total","LinearProgress","variant","value","covid","population","makeProgressAction","type","colors","red","pink","purple","deepPurple","indigo","blue","lightBlue","cyan","teal","green","lightGreen","lime","yellow","amber","orange","deepOrange","brown","grey","blueGrey","shades","dataSelector","data","pickedCountriesSelector","ui","pickedCountries","colorMapSelector","createSelector","isoCodes","results","Map","pickedColors","Set","forEach","country","picked","hash","murmur3","toString","length","has","size","add","set","selectDataToRenderIntoChart","colorMap","map","pickedCountry","name","where","row","iso_code","toArray","date","getTime","total_cases","color","get","CaseChart","cases","logAxisSetting","caseChart","logSetting","options","chart","height","zoomType","title","text","xAxis","labels","step","yAxis","series","credits","enabled","dispatch","useDispatch","id","elevation","ToggleButtonGroup","onChange","_","newSetting","makeCaseChartLogSettingChangedAction","exclusive","aria-label","ToggleButton","highcharts","Highcharts","coutrySelector","searchText","select","location","distinct","orderBy","toPairs","active","includes","filter","toLowerCase","startsWith","CountryPicker","autoWidthItem","width","allCountries","ListItem","button","key","onClick","countryCode","style","Checkbox","edge","checked","tabIndex","disableRipple","inputProps","TextField","placeholder","e","search","target","List","display","flexWrap","alignItems","justifyContent","tableIcons","Add","forwardRef","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","DataTable","dateToDisplay","dataTable","today","Date","yesterday","setTime","selectedDate","findFirstRowMachingDate","group","field","filtered","first","second","getFullYear","getMonth","getDate","count","filteredByAnythingPresent","orderByDescending","tableData","groupBy","new_cases","total_tests","getSeries","x","max","tests_per_1m_population","Math","round","numberWithCommas","rowData","replace","columns","defaultSort","render","makeDataTableDateSelectionChangedAction","icons","fixedColumns","left","right","parseCovidCSV","of","fromCSV","pipe","df","parseDates","parseInts","parsePopulationCSV","renameSeries","Year","Value","mergeCovidPopulation","populationLatest","maxYear","summarize","year","Series","pop","inflate","computeLatestPopulation","join","smooth","amount","ceil","abs","i","valuesInAverage","sum","j","undefined","push","deathCurveSelector","deaths","total_deaths","new_deaths","sort","a","b","y","DeathCurve","min","tickInterval","formatter","this","toExponential","role","NewCaseChart","countryCharts","countryData","movingAverage","enableMouseTracking","legend","Grid","item","container","justify","spacing","centered","textAlign","Loaded","href","Error","message","assertNever","setOptions","backgroundColor","plotBackgroundColor","plotShadow","plotBorderWidth","font","subtitle","gridLineWidth","lineColor","tickColor","fontWeight","fontSize","fontFamily","minorTickInterval","lineWidth","tickWidth","itemStyle","itemHoverStyle","itemHiddenStyle","navigation","buttonOptions","theme","stroke","store","App","data-ribbon","px","updateCountriesInPathName","urlString","countries","url","URL","params","URLSearchParams","JSON","stringify","errorReducer","action","loadingReducer","defaultCountries","parsedCountries","parse","Array","isArray","console","error","getPickedCountriesFromUrl","routing","response","loadedReducer","newCountries","c","fromXhr","xhr","XMLHttpRequest","responseType","progress$","Observable","subscriber","addEventListener","ev","next","loaded","result$","readyState","status","complete","open","send","result","rootEpic","combineEpics","action$","covidData$","flatMap","update","merge","populationData$","combinedProgress$","filterForResult","data$","combinedResults$","zip","initialState","window","epicMiddleware","createEpicMiddleware","configureStore","reducer","middleware","run","subscribe","getState","history","pushState","document","body","scrollTop","rootElement","getElementById","darkTheme","createMuiTheme","palette","ReactDOM","StrictMode","ThemeProvider","CssBaseline"],"mappings":"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","file":"static/js/main.309df7e3.chunk.js","sourcesContent":["import React from \"react\";\n\nimport {\n  Box,\n  Paper,\n  PaperProps,\n  withStyles,\n  createStyles,\n  WithStyles,\n} from \"@material-ui/core\";\n\nconst withPadding = createStyles({\n  paperPadding: {\n    padding: \"30px\",\n  },\n});\n\nconst spacedPaper: React.FC<PaperProps & WithStyles<typeof withPadding>> = (\n  props: PaperProps & WithStyles<typeof withPadding>,\n) => (\n  <Box my={3} py={3}>\n    <Paper {...props} className={props.classes.paperPadding}>\n      {props.children}\n    </Paper>\n  </Box>\n);\n\nexport const SpacedPaper = withStyles(withPadding)(spacedPaper);\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { LoadingState } from \"../store\";\n\nimport { LinearProgress } from \"@material-ui/core\";\nimport { SpacedPaper } from \"./SpacedPaper\";\n\nexport const Loading = () => {\n  const progress = useSelector((state: LoadingState) => state.progress);\n\n  const normalize = ({ done, total }: { done: number; total: number }) =>\n    (done / total) * 100;\n\n  return (\n    <SpacedPaper>\n      <div>\n        <h2>loading covid data</h2>\n        <LinearProgress\n          variant=\"determinate\"\n          value={normalize(progress.covid)}\n        />\n      </div>\n      <div>\n        <h2>loading world population data</h2>\n        <LinearProgress\n          variant=\"determinate\"\n          value={normalize(progress.population)}\n        />\n      </div>\n    </SpacedPaper>\n  );\n};\n","import { IDataFrame } from \"data-forge\";\n\nexport type Action =\n  | InitialAction\n  | ErrorDuringFetchAction\n  | FetchSuccessAction\n  | CountryToggleAction\n  | CountrySearchChangedAction\n  | ProgressAction\n  | UrlUpdatedAction\n  | CaseChartLogSettingChangedAction\n  | DataTableDateSelectionChangedAction;\n\nexport interface InitialAction {\n  type: \"initialized\";\n}\nexport const makeInitialized = (): InitialAction => ({\n  type: \"initialized\",\n});\n\nexport interface ErrorDuringFetchAction {\n  type: \"error-during-fetch\";\n  message: string;\n}\nexport const makeErrorDuringFetch = (\n  message: string,\n): ErrorDuringFetchAction => ({\n  type: \"error-during-fetch\",\n  message,\n});\n\nexport interface FetchSuccessAction {\n  type: \"fetch-success\";\n  response: IDataFrame;\n}\nexport const makeFetchSuccess = (response: IDataFrame): FetchSuccessAction => ({\n  type: \"fetch-success\",\n  response,\n});\n\nexport interface CountryToggleAction {\n  type: \"country-toggled\";\n  countryCode: string;\n}\nexport const makeCountryToggleAction = (\n  countryCode: string,\n): CountryToggleAction => ({\n  type: \"country-toggled\",\n  countryCode,\n});\n\nexport interface CountrySearchChangedAction {\n  type: \"country-search-changed\";\n  search: string;\n}\n\nexport const makeCoutrySearchChangedAction = (\n  search: string,\n): CountrySearchChangedAction => ({\n  type: \"country-search-changed\",\n  search,\n});\n\nexport interface ProgressAction {\n  type: \"progress\";\n  target: \"covid\" | \"population\";\n  done: number;\n  total: number;\n}\n\nexport const makeProgressAction = (progress: {\n  target: \"covid\" | \"population\";\n  done: number;\n  total: number;\n}): ProgressAction => {\n  return { ...progress, type: \"progress\" };\n};\n\nexport interface UrlUpdatedAction {\n  type: \"url-updated\";\n  url: string;\n}\n\nexport const makeUrlUpdated = (url: string): UrlUpdatedAction => ({\n  type: \"url-updated\",\n  url,\n});\n\nexport interface CaseChartLogSettingChangedAction {\n  type: \"case-chart-log-setting-changed\";\n  newSetting: \"linear\" | \"logarithmic\";\n}\n\nexport const makeCaseChartLogSettingChangedAction = (\n  newSetting: \"linear\" | \"logarithmic\",\n): CaseChartLogSettingChangedAction => ({\n  type: \"case-chart-log-setting-changed\",\n  newSetting,\n});\n\nexport interface DataTableDateSelectionChangedAction {\n  type: \"data-table-date-selection-changed\";\n  newSetting: \"today\" | \"yesterday\";\n}\n\nexport const makeDataTableDateSelectionChangedAction = (\n  newSetting: \"today\" | \"yesterday\",\n): DataTableDateSelectionChangedAction => ({\n  type: \"data-table-date-selection-changed\",\n  newSetting,\n});\n","import {\n  red,\n  pink,\n  purple,\n  deepPurple,\n  indigo,\n  blue,\n  lightBlue,\n  cyan,\n  teal,\n  green,\n  lightGreen,\n  lime,\n  yellow,\n  amber,\n  orange,\n  deepOrange,\n  brown,\n  grey,\n  blueGrey,\n} from \"@material-ui/core/colors\";\n\nimport { murmur3 } from \"murmurhash-js\";\n\nconst colors = [\n  red,\n  pink,\n  purple,\n  deepPurple,\n  indigo,\n  blue,\n  lightBlue,\n  cyan,\n  teal,\n  green,\n  lightGreen,\n  lime,\n  yellow,\n  amber,\n  orange,\n  deepOrange,\n  brown,\n  grey,\n  blueGrey,\n];\n\nconst shades = [300, 500, 900];\n\nexport const makeCountryColors = (isoCodes: string[]): Map<string, string> => {\n  let results = new Map<string, string>();\n  let pickedColors = new Set<string>();\n\n  isoCodes.forEach(country => {\n    let picked = \"undefined\";\n\n    let hash = murmur3(country);\n    // do multiple hash rounds to avoid collisions,\n    // unless collisions are unavoidable with many countries\n    do {\n      hash = murmur3(hash.toString());\n      const color = colors[hash % colors.length];\n      const shade = shades[hash % shades.length];\n\n      picked = (color as any)[shade.toString()];\n \n    } while (pickedColors.has(picked) && pickedColors.size < colors.length * shades.length);\n   \n\n    pickedColors.add(picked);\n    results.set(country, picked);\n  });\n\n  return results;\n};\n","import { LoadedState } from \"../store\";\n\nimport { createSelector } from \"reselect\";\nimport { makeCountryColors } from \"../components/countryColors\";\n\nexport const dataSelector = (state: LoadedState) => state.data;\nexport const pickedCountriesSelector = (state: LoadedState) => state.ui.pickedCountries;\nexport const colorMapSelector = createSelector(pickedCountriesSelector, makeCountryColors);","import React from \"react\";\n\nimport { createSelector } from \"reselect\";\n\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nimport { LoadedState } from \"../store\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { makeCaseChartLogSettingChangedAction } from \"../actions\";\n\nimport { SpacedPaper } from \"./SpacedPaper\";\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\n\nimport { IDataFrame } from \"data-forge\";\n\nimport {\n  pickedCountriesSelector,\n  dataSelector,\n  colorMapSelector,\n} from \"../selectors\";\n\nconst selectDataToRenderIntoChart = (\n  pickedCountries: string[],\n  data: IDataFrame,\n  colorMap: Map<string, string>,\n): {\n  name: string;\n  data: [Date, number][];\n  type: \"line\";\n  color: string | undefined;\n}[] =>\n  pickedCountries.map((pickedCountry: string) => ({\n    name: pickedCountry,\n    data: data\n      .where(row => row.iso_code === pickedCountry)\n      .toArray()\n      .map(row => [\n        row.date.getTime(),\n        (row.total_cases * 1000000) / row.population,\n      ]),\n    type: \"line\",\n    color: colorMap.get(pickedCountry),\n  }));\n\nexport const CaseChart = () => {\n  const cases = useSelector(\n    createSelector(\n      pickedCountriesSelector,\n      dataSelector,\n      colorMapSelector,\n      selectDataToRenderIntoChart,\n    ),\n  );\n  const logAxisSetting = useSelector(\n    (state: LoadedState) => state.ui.caseChart.logSetting,\n  );\n\n  const options: Highcharts.Options = {\n    chart: {\n      height: \"50%\",\n      zoomType: \"x\",\n    },\n    title: {\n      text: \"\",\n    },\n    xAxis: {\n      type: \"datetime\",\n      title: {\n        text: \"Date\",\n      },\n      labels: {\n        step: 1,\n      },\n    },\n    yAxis: {\n      type: logAxisSetting,\n      title: {\n        text: \"Cases per 1M population\",\n      },\n    },\n    series: cases,\n    credits: {\n      enabled: false,\n    },\n  };\n\n  const dispatch = useDispatch();\n  const handleAxisLogarithmicToggle = (_: any, newSetting: string | null) => {\n    if (!newSetting) {\n      return;\n    }\n\n    if (!(newSetting === \"linear\" || newSetting === \"logarithmic\")) {\n      return;\n    }\n\n    dispatch(makeCaseChartLogSettingChangedAction(newSetting));\n  };\n\n  return (\n    <SpacedPaper id=\"cases\" elevation={3}>\n      <h2>Cases over Time</h2>\n      <ToggleButtonGroup\n        value={logAxisSetting}\n        onChange={handleAxisLogarithmicToggle}\n        exclusive\n        aria-label=\"log axis setting\"\n      >\n        <ToggleButton value=\"logarithmic\" aria-label=\"logarithmic\">\n          log\n        </ToggleButton>\n        <ToggleButton value=\"linear\" aria-label=\"linear\">\n          linear\n        </ToggleButton>\n      </ToggleButtonGroup>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </SpacedPaper>\n  );\n};\n","import React, { CSSProperties } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { LoadedState } from \"../store\";\n\nimport { createSelector } from \"reselect\";\n\nimport { includes } from \"lodash/fp\";\nimport {\n  makeCountryToggleAction,\n  makeCoutrySearchChangedAction,\n} from \"../actions\";\nimport { IDataFrame } from \"data-forge\";\n\nimport { List, ListItem, Checkbox, TextField } from \"@material-ui/core\";\n\nimport { SpacedPaper } from \"./SpacedPaper\";\n\nconst dataSelector = (state: LoadedState) => state.data;\nconst pickedCountriesSelector = (state: LoadedState) =>\n  state.ui.pickedCountries;\nconst searchTextSelector = (state: LoadedState) => state.ui.searchText;\n\nconst coutrySelector = createSelector(\n  dataSelector,\n  pickedCountriesSelector,\n  searchTextSelector,\n  (data: IDataFrame, pickedCountries: string[], searchText) =>\n    data\n      .select(\n        ({ iso_code, location }: { iso_code: string; location: string }) => ({\n          iso_code,\n          location,\n        }),\n      )\n      .distinct(row => row.iso_code)\n      .orderBy(row => row.location)\n      .toPairs()\n      .map(([_, row]) => ({\n        ...row,\n        active: includes(row.iso_code)(pickedCountries),\n      }))\n      .filter(\n        row =>\n          row.active ||\n          (searchText !== \"\" &&\n            row.location.toLowerCase().startsWith(searchText.toLowerCase())),\n      ),\n);\n\nexport const CountryPicker = () => {\n  const dispatch = useDispatch();\n\n  const autoWidthItem: CSSProperties = {\n    width: \"180px\",\n  };\n\n  const allCountries = useSelector(coutrySelector).map(\n    ({ iso_code, location, active }) => (\n      <ListItem\n        button\n        key={iso_code}\n        onClick={_ => dispatch(makeCountryToggleAction(iso_code))}\n        style={autoWidthItem}\n      >\n        <Checkbox\n          edge=\"start\"\n          checked={active}\n          tabIndex={-1}\n          disableRipple\n          inputProps={{ \"aria-labelledby\": iso_code }}\n        />\n        {location}\n      </ListItem>\n    ),\n  );\n\n  const searchText = useSelector((state: LoadedState) => state.ui.searchText);\n\n  const flexContainer: CSSProperties = {\n    display: \"flex\",\n    padding: 0,\n    flexWrap: \"wrap\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  };\n\n  return (\n    <SpacedPaper elevation={3}>\n      <label>\n        <br />\n        <TextField\n          type=\"text\"\n          name=\"search\"\n          placeholder=\"Search Countries\"\n          onChange={e =>\n            dispatch(makeCoutrySearchChangedAction(e.target.value))\n          }\n          value={searchText}\n        />\n        <List id=\"countries\" style={flexContainer}>\n          {allCountries}\n        </List>\n      </label>\n    </SpacedPaper>\n  );\n};\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport MaterialTable, { Icons, Column } from \"material-table\";\nimport { SpacedPaper } from \"./SpacedPaper\";\nimport { LoadedState } from \"../store\";\n\nimport { forwardRef } from \"react\";\n\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport { ToggleButtonGroup, ToggleButton } from \"@material-ui/lab\";\n\nimport { makeDataTableDateSelectionChangedAction } from \"../actions\";\n\nimport { IDataFrame } from \"data-forge\";\n\nconst tableIcons: Icons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst datesAreOnSameDay = (first: Date, second: Date) =>\n  first.getFullYear() === second.getFullYear() &&\n  first.getMonth() === second.getMonth() &&\n  first.getDate() === second.getDate();\n\nexport const DataTable = () => {\n  const data = useSelector((state: LoadedState) => state.data);\n  const dateToDisplay = useSelector(\n    (state: LoadedState) => state.ui.dataTable.dateToDisplay,\n  );\n\n  const today = new Date();\n  const dateOffset = 24 * 60 * 60 * 1000 * 1; // 1 day\n  let yesterday = new Date();\n  yesterday.setTime(yesterday.getTime() - dateOffset);\n\n  const selectedDate = dateToDisplay === \"today\" ? today : yesterday;\n\n  const findFirstRowMachingDate = (\n    group: IDataFrame,\n    date: Date,\n    field: string,\n  ) => {\n    const filtered: IDataFrame = group.where((row: { date: Date }) =>\n      datesAreOnSameDay(row.date, selectedDate),\n    );\n\n    if (filtered.count() === 0) {\n      const filteredByAnythingPresent = group\n        .orderByDescending(row => row.date)\n        .where(row => row[field]);\n\n      if (filteredByAnythingPresent.count() === 0) {\n        return undefined;\n      }\n\n      return filteredByAnythingPresent.first()[field];\n    }\n\n    return filtered.first()[field];\n  };\n\n  const tableData = data\n    .orderByDescending(row => row.date)\n    .groupBy(row => row.iso_code)\n    .select(group => ({\n      date: group.first().date,\n      iso_code: group.first().iso_code,\n      location: group.first().location,\n      total_cases: findFirstRowMachingDate(group, selectedDate, \"total_cases\"),\n      new_cases: findFirstRowMachingDate(group, selectedDate, \"new_cases\"),\n      total_tests: group\n        .getSeries(\"total_tests\")\n        .select(x => (x ? x : 0))\n        .max(),\n      population: group.first().population,\n    }))\n    .toArray()\n    .map(row => ({\n      ...row,\n      date: row.date.toString(),\n      tests_per_1m_population: Math.round(\n        (row.total_tests * 1000000) / row.population,\n      ),\n    }));\n\n  const numberWithCommas = (field: string) => (rowData: any) =>\n    rowData[field].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\n  const columns: Column<any>[] = [\n    {\n      title: \"Country\",\n      field: \"location\",\n    },\n    {\n      title: \"Total Cases\",\n      field: \"total_cases\",\n      type: \"numeric\",\n      defaultSort: \"desc\",\n      render: numberWithCommas(\"total_cases\"),\n    },\n    {\n      title: \"New Cases\",\n      field: \"new_cases\",\n      type: \"numeric\",\n      render: numberWithCommas(\"new_cases\"),\n    },\n    {\n      title: \"Tests per 1M population\",\n      field: \"tests_per_1m_population\",\n      type: \"numeric\",\n      render: numberWithCommas(\"tests_per_1m_population\"),\n    },\n    {\n      title: \"Total Tests\",\n      field: \"total_tests\",\n      type: \"numeric\",\n      render: numberWithCommas(\"total_tests\"),\n    },\n  ];\n\n  const dispatch = useDispatch();\n  const handleDateSelection = (_: any, newSetting: string | null) => {\n    if (!newSetting) {\n      return;\n    }\n\n    if (!(newSetting === \"today\" || newSetting === \"yesterday\")) {\n      return;\n    }\n\n    dispatch(makeDataTableDateSelectionChangedAction(newSetting));\n  };\n\n  const options = {\n    fixedColumns: {\n      left: 1,\n      right: 0,\n    },\n  };\n\n  return (\n    <SpacedPaper>\n      <ToggleButtonGroup\n        value={dateToDisplay}\n        onChange={handleDateSelection}\n        exclusive\n        aria-label=\"log axis setting\"\n      >\n        <ToggleButton value=\"today\" aria-label=\"today\">\n          today\n        </ToggleButton>\n        <ToggleButton value=\"yesterday\" aria-label=\"yesterday\">\n          yesterday\n        </ToggleButton>\n      </ToggleButtonGroup>\n      <MaterialTable\n        columns={columns}\n        data={tableData}\n        title=\"Country Table\"\n        icons={tableIcons}\n        options={options}\n      ></MaterialTable>\n    </SpacedPaper>\n  );\n};\n","import { Observable, of } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { fromCSV, IDataFrame, Series } from \"data-forge\";\n\ninterface CovidRow {\n  iso_code: string;\n}\n\ninterface PopulationRow {\n  iso_code: string;\n  population: string;\n  year: number;\n}\n\nexport const parseCovidCSV = (data: string): Observable<IDataFrame> =>\n  of(fromCSV(data)).pipe(\n    map((df: IDataFrame): IDataFrame => df.parseDates(\"date\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"total_cases\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"new_cases\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"total_deaths\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"new_deaths\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"total_tests\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"new_tests\")),\n  );\n\nexport const parsePopulationCSV = (data: string): Observable<IDataFrame> =>\n  of(fromCSV(data)).pipe(\n    map((df: IDataFrame): IDataFrame => df.parseInts([\"Value\", \"Year\"])),\n    map(\n      (df: IDataFrame): IDataFrame =>\n        df.renameSeries({\n          Year: \"year\",\n          \"Country Code\": \"iso_code\",\n          Value: \"population\",\n        }),\n    ),\n  );\n\nexport const transformCsvData = (data: IDataFrame): IDataFrame => data;\n\ntype Maximums = Map<string, number>;\n\ntype Accumulator = {\n  maximums: Maximums;\n  result: IDataFrame;\n};\n\nconst computeLatestPopulation = (population: IDataFrame): IDataFrame =>\n  population\n    .groupBy(row => row.iso_code)\n    .select(group => {\n      const { year: maxYear } = group.summarize({ year: Series.max });\n      const pop = group.where(row => row.year === maxYear).first().population;\n      return {\n        iso_code: group.first().iso_code,\n        population: pop,\n      };\n    })\n    .inflate();\n\nexport const mergeCovidPopulation = (\n  covid: IDataFrame,\n  population: IDataFrame,\n): IDataFrame => {\n  const populationLatest = computeLatestPopulation(population);\n  return covid.join(\n    populationLatest,\n    (covid: CovidRow) => covid.iso_code,\n    (pop: PopulationRow) => pop.iso_code,\n    (covid: CovidRow, pop: PopulationRow | null) => ({\n      ...covid,\n      population: pop ? pop.population : 0,\n    }),\n  );\n};\n\nexport const smooth = (amount: number, series: number[][]): number[][] => {\n  amount = Math.ceil(Math.abs(amount));\n  let results: Array<Array<number>> = [];\n  for (let i = 0; i < series.length; i++) {\n    let [x] = series[i];\n\n    let valuesInAverage = 0;\n    let sum = 0;\n    for (let j = amount * -1; j <= amount; j++) {\n      if (series[i + j] === undefined) {\n        // ignore edges\n        continue;\n      }\n\n      sum = sum + series[i + j][1];\n      valuesInAverage = valuesInAverage + 1;\n    }\n\n    results.push([x, sum / valuesInAverage]);\n  }\n  return results;\n};\n","import React from \"react\";\n\nimport Highcharts, { SeriesOptionsType } from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nimport { useSelector } from \"react-redux\";\nimport { IDataFrame } from \"data-forge\";\n\nimport { createSelector } from \"reselect\";\n\nimport { smooth } from \"../store/data\";\n\nimport { SpacedPaper } from \"./SpacedPaper\";\n\nimport {\n  pickedCountriesSelector,\n  dataSelector,\n  colorMapSelector,\n} from \"../selectors\";\n\nconst deathCurveSelector = (\n  pickedCountries: string[],\n  data: IDataFrame,\n  colorMap: Map<string, string>,\n): SeriesOptionsType[] =>\n  pickedCountries.map(country => {\n    const filteredByCountry = data.where(row => row.iso_code === country);\n\n    const deaths = filteredByCountry.select(row => ({\n      iso_code: row.iso_code,\n      total_deaths: row.total_deaths,\n      population: row.population,\n      new_deaths: row.new_deaths,\n    }));\n\n    return {\n      name: country,\n      type: \"line\",\n      color: colorMap.get(country),\n      data: smooth(\n        7,\n        deaths\n          .toArray()\n          .map(row => [\n            row.total_deaths / row.population,\n            row.new_deaths / row.population,\n          ])\n          .sort(([a, _], [b, __]) => (a < b ? -1 : 1)),\n      ).filter(([x, y]) => x !== 0 && y !== 0),\n    };\n  });\n\nexport const DeathCurve = () => {\n  const deaths = useSelector(\n    createSelector(\n      pickedCountriesSelector,\n      dataSelector,\n      colorMapSelector,\n      deathCurveSelector,\n    ),\n  );\n\n  const options: Highcharts.Options = {\n    title: {\n      text: \"\",\n    },\n    chart: {\n      height: \"50%\",\n      zoomType: \"xy\",\n    },\n    xAxis: {\n      type: \"logarithmic\",\n      title: {\n        text: \"Fraction of dead population\",\n      },\n      min: 1e-6,\n      tickInterval: 1,\n      labels: {\n        step: 1,\n        formatter: function () {\n          return this.value.toExponential(0);\n        },\n      },\n    },\n    yAxis: {\n      type: \"logarithmic\",\n      title: {\n        text: \"Fraction of dead population per day (smoothed)\",\n      },\n      min: 1e-7,\n      tickInterval: 1,\n      labels: {\n        step: 1,\n        formatter: function () {\n          return this.value.toExponential(0);\n        },\n      },\n    },\n    series: deaths,\n    credits: {\n      enabled: false,\n    },\n  };\n\n  return (\n    <SpacedPaper id=\"deathcurve\" elevation={3}>\n      <h2>\n        Robins Death Curve\n        <span role=\"img\" aria-label=\"tm\">\n          ™️\n        </span>\n      </h2>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </SpacedPaper>\n  );\n};\n","import React from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { IDataFrame } from \"data-forge\";\nimport { createSelector } from \"reselect\";\nimport Highcharts, { SeriesOptionsType } from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport { smooth } from \"../store/data\";\nimport { SpacedPaper } from \"./SpacedPaper\";\nimport {\n  pickedCountriesSelector,\n  dataSelector,\n  colorMapSelector,\n} from \"../selectors\";\n\nimport { red } from \"@material-ui/core/colors\";\n\nexport const NewCaseChart = () => {\n  const countryCharts = useSelector(\n    createSelector(\n      pickedCountriesSelector,\n      dataSelector,\n      colorMapSelector,\n      (\n        pickedCountries: string[],\n        data: IDataFrame,\n        colorMap: Map<string, string>,\n      ) =>\n        pickedCountries.map(country => {\n          const countryData = {\n            name: country,\n            type: \"column\",\n            color: colorMap.get(country),\n            data: data\n              .where(\n                row =>\n                  row.iso_code === country && row.date > new Date(\"02-14-2020\"),\n              )\n              .toArray()\n              .map(row => [\n                row.date.getTime(),\n                (row.new_cases * 1000000) / row.population,\n              ])\n              .sort(),\n          };\n\n          const movingAverage: SeriesOptionsType = {\n            name: \"7 day average\",\n            data: smooth(3, countryData.data),\n            type: \"line\",\n            color: red[900],\n            enableMouseTracking: false,\n          };\n\n          const options: Highcharts.Options = {\n            chart: {\n              height: \"300\",\n              width: \"300\",\n            },\n            title: {\n              text: country,\n            },\n            xAxis: {\n              type: \"datetime\",\n              tickInterval: 7 * 24 * 3600 * 1000,\n            },\n            yAxis: {\n              min: 0,\n              title: {\n                text: \"daily new cases per 1M population\",\n              },\n            },\n            legend: {\n              enabled: false,\n            },\n            series: [countryData as SeriesOptionsType, movingAverage],\n            credits: {\n              enabled: false,\n            },\n          };\n\n          return (\n            <Grid item key={country}>\n              <HighchartsReact highcharts={Highcharts} options={options} />\n            </Grid>\n          );\n        }),\n    ),\n  );\n\n  return (\n    <SpacedPaper elevation={3} id=\"new-cases\">\n      <h2>New Cases</h2>\n      <Grid container justify=\"center\" spacing={0}>\n        {countryCharts}\n      </Grid>\n    </SpacedPaper>\n  );\n};\n","import React from \"react\";\n\nimport { CaseChart } from \"./CaseChart\";\nimport { CountryPicker } from \"./CountryPicker\";\nimport { DataTable } from \"./DataTable\";\nimport { DeathCurve } from \"./DeathCurve\";\nimport { NewCaseChart } from \"./NewCaseChart\";\n\nconst centered: React.CSSProperties = { textAlign: \"center\" };\n\nexport const Loaded = () => {\n  return (\n    <div>\n      <h1>Covid Stats</h1>\n      <DataTable />\n      <CountryPicker />\n      <NewCaseChart />\n      <CaseChart />\n      <DeathCurve />\n      <div style={centered}>\n        data from{\" \"}\n        <a href=\"https://covid.ourworldindata.org\">Our World In Data</a> and{\" \"}\n        <a href=\"https://github.com/datasets/population\">\n          datahub.io via the World Bank\n        </a>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { ErrorState } from \"../store\";\nimport { useSelector } from \"react-redux\";\n\nexport const Error = () => {\n  const message = useSelector((state: ErrorState) => state.message);\n  return <div>Error: {message}</div>;\n};\n","export function assertNever(x: never): never {\n    throw new Error(\"Unexpected object: \" + x);\n}","import Highcharts from \"highcharts\";\n\nconst theme: Highcharts.Options = {\n  colors: [\n    \"#058DC7\",\n    \"#50B432\",\n    \"#ED561B\",\n    \"#DDDF00\",\n    \"#24CBE5\",\n    \"#64E572\",\n    \"#FF9655\",\n    \"#FFF263\",\n    \"#6AF9C4\",\n  ],\n  chart: {\n    backgroundColor: \"#FFFFFF\",\n    plotBackgroundColor: \"rgba(255, 255, 255, .9)\",\n    plotShadow: false,\n    plotBorderWidth: 0,\n  },\n  title: {\n    style: {\n      color: \"#000\",\n      font: 'bold 16px \"Trebuchet MS\", Verdana, sans-serif',\n    },\n  },\n  subtitle: {\n    style: {\n      color: \"#666666\",\n      font: 'bold 12px \"Trebuchet MS\", Verdana, sans-serif',\n    },\n  },\n  xAxis: {\n    gridLineWidth: 1,\n    lineColor: \"#000\",\n    tickColor: \"#000\",\n    labels: {\n      style: {\n        color: \"#000\",\n        font: \"11px Trebuchet MS, Verdana, sans-serif\",\n      },\n    },\n    title: {\n      style: {\n        color: \"#333\",\n        fontWeight: \"bold\",\n        fontSize: \"12px\",\n        fontFamily: \"Trebuchet MS, Verdana, sans-serif\",\n      },\n    },\n  },\n  yAxis: {\n    minorTickInterval: \"auto\",\n    lineColor: \"#000\",\n    lineWidth: 1,\n    tickWidth: 1,\n    tickColor: \"#000\",\n    labels: {\n      style: {\n        color: \"#000\",\n        font: \"11px Trebuchet MS, Verdana, sans-serif\",\n      },\n    },\n    title: {\n      style: {\n        color: \"#333\",\n        fontWeight: \"bold\",\n        fontSize: \"12px\",\n        fontFamily: \"Trebuchet MS, Verdana, sans-serif\",\n      },\n    },\n  },\n  legend: {\n    itemStyle: {\n      font: \"9pt Trebuchet MS, Verdana, sans-serif\",\n      color: \"black\",\n    },\n    itemHoverStyle: {\n      color: \"#039\",\n    },\n    itemHiddenStyle: {\n      color: \"gray\",\n    },\n  },\n  navigation: {\n    buttonOptions: {\n      theme: {\n        stroke: \"#CCCCCC\",\n      },\n    },\n  },\n};\n\nHighcharts.setOptions(theme);\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"./App.css\";\nimport \"github-fork-ribbon-css/gh-fork-ribbon.css\";\n\nimport { State } from \"../store\";\n\nimport { Loading } from \"./Loading\";\nimport { Loaded } from \"./Loaded\";\nimport { Error } from \"./Error\";\n\nimport { assertNever } from \"../utils\";\nimport \"./highchartsTheme\";\n\nimport Box from \"@material-ui/core/Box\";\n\nexport const App = () => {\n  const type = useSelector<State, State[\"type\"]>(state => state.type);\n\n  return (\n    <>\n      <a\n        className=\"github-fork-ribbon right-top\"\n        href=\"https://github.com/jupp0r/covid-stats\"\n        data-ribbon=\"Fork me on GitHub\"\n        title=\"Fork me on GitHub\"\n      >\n        Fork me on GitHub\n      </a>\n      <Box px={3} py={3} my={3} textAlign=\"center\">\n        {((type: State[\"type\"]) => {\n          switch (type) {\n            case \"loading\":\n              return <Loading />;\n            case \"loaded\":\n              return <Loaded />;\n            case \"error\":\n              return <Error />;\n            default:\n              return assertNever(type);\n          }\n        })(type)}\n      </Box>\n    </>\n  );\n};\n","import { Action } from \"../actions\";\nimport { State } from \"../store\";\n\nimport { Store } from \"redux\";\n\nimport { makeUrlUpdated } from \"../actions\";\nimport { defaultCountries } from \"../store\";\n\n\nexport const updateCountriesInPathName = (\n  urlString: string,\n  countries: string[],\n): string => {\n  const url = new URL(urlString);\n  const params = new URLSearchParams(url.search);\n  params.set(\"countries[]\", JSON.stringify(countries));\n  url.search = params.toString();\n  return url.toString();\n};\n\nexport const getPickedCountriesFromUrl = (urlString: string): string[] => {\n  const url = new URL(urlString);\n  const params = new URLSearchParams(url.search);\n  const countries = params.get(\"countries[]\");\n  if (!countries) {\n    return defaultCountries;\n  }\n\n  const parsedCountries: string[] = JSON.parse(countries);\n\n  if (!Array.isArray(parsedCountries)) {\n    console.error(\"invalid url params\");\n    return defaultCountries;\n  }\n\n  return parsedCountries;\n};\n\nexport const setupRouting = (store: Store<State, Action>) => {\n  window.addEventListener(\"popstate\", () => {\n    store.dispatch(makeUrlUpdated(window.location.toString()));\n  });\n\n  store.subscribe(() => {\n    const { url } = store.getState().routing;\n    if (window.location.toString() !== url) {\n      window.history.pushState(null, \"\", url);\n      document.body.scrollTop = 0;\n    }\n  });\n};\n","import { initialState, State, LoadedState, LoadingState } from \"../store\";\n\nimport { Action } from \"../actions\";\nimport { transformCsvData } from \"../store/data\";\n\nimport { assertNever } from \"../utils\";\n\nimport { includes, filter } from \"lodash/fp\";\n\nimport { getPickedCountriesFromUrl, updateCountriesInPathName } from \"./router\";\n\nconst errorReducer = (state: State, action: Action): State => state;\n\nconst loadingReducer = (state: LoadingState, action: Action): State => {\n  switch (action.type) {\n    case \"fetch-success\":\n      const pickedCountries = getPickedCountriesFromUrl(state.routing.url);\n      return {\n        ...state,\n        type: \"loaded\",\n        data: transformCsvData(action.response),\n        ui: {\n          pickedCountries,\n          searchText: \"\",\n          caseChart: {\n            logSetting: \"logarithmic\",\n          },\n          dataTable: {\n            dateToDisplay: \"yesterday\",\n          },\n        },\n        routing: {\n          url: updateCountriesInPathName(state.routing.url, pickedCountries),\n        },\n      };\n    case \"progress\":\n      return {\n        ...state,\n        progress: {\n          ...state.progress,\n          [action.target]: {\n            done: action.done,\n            total: Math.max(state.progress[action.target].total, action.done),\n            ...(action.total !== 0 && {\n              total: Math.max(action.total, action.done),\n            }),\n          },\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nconst loadedReducer = (state: LoadedState, action: Action): State => {\n  switch (action.type) {\n    case \"country-toggled\":\n      const toggleCountryToPicked = (\n        country: string,\n        countries: string[],\n      ): string[] => {\n        if (includes(country)(countries)) {\n          return filter(c => c !== country, countries);\n        }\n\n        return [country, ...countries];\n      };\n\n      const newCountries = toggleCountryToPicked(\n        action.countryCode,\n        state.ui.pickedCountries,\n      );\n\n      return {\n        ...state,\n        ui: {\n          ...state.ui,\n          pickedCountries: newCountries,\n        },\n        routing: {\n          url: updateCountriesInPathName(state.routing.url, newCountries),\n        },\n      };\n    case \"country-search-changed\":\n      return { ...state, ui: { ...state.ui, searchText: action.search } };\n    case \"case-chart-log-setting-changed\":\n      return {\n        ...state,\n        ui: {\n          ...state.ui,\n          caseChart: { ...state.ui.caseChart, logSetting: action.newSetting },\n        },\n      };\n    case \"data-table-date-selection-changed\":\n      return {\n        ...state,\n        ui: {\n          ...state.ui,\n          dataTable: {\n            ...state.ui.dataTable,\n            dateToDisplay: action.newSetting,\n          },\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport const reducer = (state: State = initialState, action: Action): State => {\n  if (action.type === \"url-updated\") {\n    return { ...state, routing: { ...state.routing, url: action.url } };\n  }\n\n  switch (state.type) {\n    case \"error\":\n      return errorReducer(state, action);\n    case \"loading\":\n      return loadingReducer(state, action);\n    case \"loaded\":\n      return loadedReducer(state, action);\n    default:\n      return assertNever(state);\n  }\n};\n","import { Observable, zip, merge } from \"rxjs\";\n\nimport { filter, flatMap, map } from \"rxjs/operators\";\n\nimport { Action, makeProgressAction, ProgressAction } from \"../actions\";\n\nimport { combineEpics } from \"redux-observable\";\n\nimport {\n  parseCovidCSV,\n  parsePopulationCSV,\n  mergeCovidPopulation,\n} from \"../store/data\";\nimport { IDataFrame } from \"data-forge\";\n\ntype DataResult =\n  | { type: \"success\"; data: IDataFrame }\n  | { type: \"error\"; reason: string };\n\ninterface Progress {\n  done: number;\n  total: number;\n}\n\nconst fromXhr = (\n  url: string,\n): {\n  progress: Observable<Progress>;\n  result: Observable<string>;\n} => {\n  const xhr = new XMLHttpRequest();\n  xhr.responseType = \"text\";\n  const progress$ = new Observable<Progress>((subscriber): void => {\n    xhr.addEventListener(\"progress\", ev =>\n      subscriber.next({\n        done: ev.loaded,\n        total: ev.total,\n      }),\n    );\n  });\n\n  const result$ = new Observable<string>(subscriber => {\n    xhr.addEventListener(\"readystatechange\", ev => {\n      if (xhr.readyState !== 4) {\n        return;\n      }\n\n      if (xhr.status === 200) {\n        subscriber.next(xhr.response);\n        subscriber.complete();\n      } else {\n        subscriber.error(xhr.response);\n      }\n    });\n  });\n\n  xhr.open(\"GET\", url);\n  xhr.send();\n  return { progress: progress$, result: result$ };\n};\n\nexport const startLoadingEpic = (\n  action$: Observable<Action>,\n): Observable<Action> => {\n  const covidData$: Observable<ProgressAction | DataResult> = action$.pipe(\n    filter((action: Action) => action.type === \"initialized\"),\n    flatMap(() => {\n      const { progress, result } = fromXhr(\n        \"https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv\",\n      );\n      const progress$ = progress.pipe(\n        map((update: Progress) =>\n          makeProgressAction({ ...update, target: \"covid\" }),\n        ),\n      );\n\n      const result$ = result.pipe(\n        flatMap(parseCovidCSV),\n        map((data: IDataFrame): DataResult => ({ type: \"success\", data })),\n      );\n\n      return merge(progress$, result$);\n    }),\n  );\n\n  const populationData$: Observable<ProgressAction | DataResult> = action$.pipe(\n    filter((action: Action) => action.type === \"initialized\"),\n    flatMap(() => {\n      const { progress, result } = fromXhr(\n        \"https://raw.githubusercontent.com/datasets/population/master/data/population.csv\",\n      );\n      const progress$ = progress.pipe(\n        map((update: Progress) =>\n          makeProgressAction({ ...update, target: \"population\" }),\n        ),\n      );\n\n      const result$ = result.pipe(\n        flatMap(parsePopulationCSV),\n        map((data: IDataFrame): DataResult => ({ type: \"success\", data })),\n      );\n\n      return merge(progress$, result$);\n    }),\n  );\n\n  const combinedProgress$: Observable<ProgressAction> = merge(\n    covidData$,\n    populationData$,\n  ).pipe(\n    filter(item => item.type === \"progress\"),\n    map(item => item as ProgressAction),\n  );\n\n  const filterForResult = (data$: Observable<ProgressAction | DataResult>) =>\n    data$.pipe(filter(item => item.type === \"success\"));\n\n  const combinedResults$: Observable<Action> = zip(\n    filterForResult(covidData$),\n    filterForResult(populationData$),\n  ).pipe(\n    map(\n      ([covid, population]): Action => {\n        if (covid.type === \"success\" && population.type === \"success\") {\n          return {\n            type: \"fetch-success\",\n            response: mergeCovidPopulation(covid.data, population.data),\n          };\n        } else {\n          return {\n            type: \"error-during-fetch\",\n            message: `Error: ${covid} or ${population} failed to fetch`,\n          };\n        }\n      },\n    ),\n  );\n\n  return merge(combinedProgress$, combinedResults$);\n};\n\nexport const rootEpic = combineEpics(startLoadingEpic);\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { reducer } from \"../reducers/reducers\";\nimport { createEpicMiddleware } from \"redux-observable\";\nimport { rootEpic } from \"../epics\";\nimport { makeInitialized } from \"../actions\";\nimport { IDataFrame } from \"data-forge\";\nimport { Store as ReduxStore } from \"redux\";\nimport { Action } from \"../actions\";\nimport { setupRouting } from \"../reducers/router\";\n\nexport type State = (LoadingState | LoadedState | ErrorState);\ninterface RoutingState {\n  routing: {\n    url: string,\n  }\n}\n\ninterface Progress {\n  done: number;\n  total: number;\n}\nexport type LoadingState = {\n  type: \"loading\";\n  progress: {\n    covid: Progress;\n    population: Progress;\n  };\n} & RoutingState;\n\nexport type UIState = {\n  pickedCountries: string[];\n  searchText: string;\n  caseChart: {\n    logSetting: \"linear\" | \"logarithmic\";\n  };\n  dataTable: {\n    dateToDisplay: \"today\" | \"yesterday\";\n  };\n}\n\nexport type LoadedState = {\n  type: \"loaded\";\n  data: IDataFrame;\n  ui: UIState;\n} & RoutingState\n\nexport type ErrorState = {\n  type: \"error\";\n  message: string;\n} & RoutingState;\n\nconst covidSizeEstimate = 2459742;\nconst populationSizeEstimate = 487991;\n\nexport const initialState: State = {\n  type: \"loading\",\n  progress: {\n    covid: { done: 0, total: covidSizeEstimate },\n    population: { done: 0, total: populationSizeEstimate },\n  },\n  routing: {\n    url: window.location.toString(),\n  }\n};\n\nexport const defaultCountries = [\"USA\", \"DEU\", \"SWE\", \"ITA\", \"NGA\"];\n\nexport type Store = ReduxStore<State, Action>;\n\nconst epicMiddleware = createEpicMiddleware();\nexport const store = configureStore({\n  reducer,\n  middleware: [epicMiddleware],\n});\nepicMiddleware.run(rootEpic);\n\nsetupRouting(store);\nstore.dispatch(makeInitialized());\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./components/App\";\n\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\nimport { createMuiTheme, ThemeProvider, CssBaseline } from \"@material-ui/core\";\n\nimport \"typeface-roboto\";\n\nconst rootElement = document.getElementById(\"root\");\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: \"light\",\n  },\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <ThemeProvider theme={darkTheme}>\n        <CssBaseline />\n        <App />\n      </ThemeProvider>\n    </React.StrictMode>\n  </Provider>,\n  rootElement,\n);\n"],"sourceRoot":""}