{"version":3,"sources":["components/SpacedPaper.tsx","components/Loading.tsx","actions/index.ts","components/countryColors.ts","selectors/index.ts","components/CaseChart.tsx","components/CountryPicker.tsx","components/DataTable.tsx","store/data.ts","components/DeathCurve.tsx","components/NewCaseChart.tsx","components/Loaded.tsx","components/Error.tsx","utils.ts","components/highchartsTheme.ts","components/App.tsx","reducers/router.ts","reducers/reducers.ts","epics/index.ts","store/index.ts","index.tsx"],"names":["withPadding","createStyles","paperPadding","padding","SpacedPaper","withStyles","props","Box","my","py","Paper","elevation","className","classes","children","Loading","progress","useSelector","state","normalize","done","total","LinearProgress","variant","value","covid","population","makeProgressAction","type","colors","red","pink","purple","blue","cyan","teal","green","lime","amber","orange","brown","grey","blueGrey","shades","dataSelector","data","pickedCountriesSelector","ui","pickedCountries","colorMapSelector","createSelector","isoCodes","results","Map","pickedColors","Set","forEach","country","picked","hash","murmur3","toString","length","has","size","add","set","countryNameSelector","kvPairs","groupBy","row","iso_code","select","group","code","first","name","location","toArray","map","console","log","selectDataToRenderIntoChart","colorMap","countryNameMap","pickedCountry","get","where","date","getTime","total_cases","color","CaseChart","cases","logAxisSetting","caseChart","logSetting","options","chart","height","zoomType","title","text","xAxis","labels","step","yAxis","series","credits","enabled","dispatch","useDispatch","id","ToggleButtonGroup","onChange","_","newSetting","makeCaseChartLogSettingChangedAction","exclusive","aria-label","ToggleButton","highcharts","Highcharts","coutrySelector","searchText","distinct","orderBy","toPairs","active","includes","filter","toLowerCase","startsWith","CountryPicker","autoWidthItem","width","allCountries","ListItem","button","key","onClick","countryCode","style","Checkbox","edge","checked","tabIndex","disableRipple","inputProps","TextField","placeholder","e","search","target","List","display","flexWrap","alignItems","justifyContent","tableIcons","Add","forwardRef","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","DataTable","dateToDisplay","dataTable","today","Date","yesterday","setTime","selectedDate","findFirstRowMachingDate","field","filtered","second","getFullYear","getMonth","getDate","count","filteredByAnythingPresent","orderByDescending","tableData","new_cases","total_tests","getSeries","x","max","tests_per_1m_population","Math","round","numberWithCommas","rowData","replace","columns","defaultSort","render","makeDataTableDateSelectionChangedAction","icons","fixedColumns","left","right","parseCovidCSV","of","fromCSV","pipe","df","parseDates","parseInts","parsePopulationCSV","renameSeries","Year","Value","mergeCovidPopulation","populationLatest","maxYear","summarize","year","Series","pop","inflate","computeLatestPopulation","join","smooth","amount","ceil","abs","i","valuesInAverage","sum","j","undefined","push","deathCurveSelector","deaths","total_deaths","new_deaths","sort","a","b","y","DeathCurve","min","tickInterval","formatter","this","toExponential","rotation","role","NewCaseChart","countryCharts","countryData","movingAverage","enableMouseTracking","legend","Grid","item","container","justify","spacing","centered","textAlign","Loaded","href","Error","message","assertNever","setOptions","backgroundColor","plotBackgroundColor","plotShadow","plotBorderWidth","font","subtitle","gridLineWidth","lineColor","tickColor","fontWeight","fontSize","fontFamily","minorTickInterval","lineWidth","tickWidth","itemStyle","itemHoverStyle","itemHiddenStyle","navigation","buttonOptions","theme","stroke","store","App","data-ribbon","px","updateCountriesInPathName","urlString","countries","url","URL","params","URLSearchParams","JSON","stringify","errorReducer","action","loadingReducer","defaultCountries","parsedCountries","parse","Array","isArray","error","getPickedCountriesFromUrl","routing","response","loadedReducer","newCountries","c","fromXhr","xhr","XMLHttpRequest","responseType","progress$","Observable","subscriber","addEventListener","ev","next","loaded","result$","readyState","status","complete","open","send","result","rootEpic","combineEpics","action$","covidData$","flatMap","update","merge","populationData$","combinedProgress$","filterForResult","data$","combinedResults$","zip","initialState","window","epicMiddleware","createEpicMiddleware","configureStore","reducer","middleware","run","subscribe","getState","history","pushState","document","body","scrollTop","rootElement","getElementById","darkTheme","createMuiTheme","palette","ReactDOM","StrictMode","ThemeProvider","CssBaseline"],"mappings":"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","file":"static/js/main.1c192aa4.chunk.js","sourcesContent":["import React from \"react\";\n\nimport {\n  Box,\n  Paper,\n  PaperProps,\n  withStyles,\n  createStyles,\n  WithStyles,\n} from \"@material-ui/core\";\n\nconst withPadding = createStyles({\n  paperPadding: {\n    padding: \"30px\",\n  },\n});\n\nconst spacedPaper: React.FC<PaperProps & WithStyles<typeof withPadding>> = (\n  props: PaperProps & WithStyles<typeof withPadding>,\n) => (\n  <Box my={3} py={3}>\n    <Paper elevation={props.elevation} className={props.classes.paperPadding}>\n      {props.children}\n    </Paper>\n  </Box>\n);\n\nexport const SpacedPaper = withStyles(withPadding)(spacedPaper);\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { LoadingState } from \"../store\";\n\nimport { LinearProgress } from \"@material-ui/core\";\nimport { SpacedPaper } from \"./SpacedPaper\";\n\nexport const Loading = () => {\n  const progress = useSelector((state: LoadingState) => state.progress);\n\n  const normalize = ({ done, total }: { done: number; total: number }) =>\n    (done / total) * 100;\n\n  return (\n    <SpacedPaper>\n      <div>\n        <h2>loading covid data</h2>\n        <LinearProgress\n          variant=\"determinate\"\n          value={normalize(progress.covid)}\n        />\n      </div>\n      <div>\n        <h2>loading world population data</h2>\n        <LinearProgress\n          variant=\"determinate\"\n          value={normalize(progress.population)}\n        />\n      </div>\n    </SpacedPaper>\n  );\n};\n","import { IDataFrame } from \"data-forge\";\n\nexport type Action =\n  | InitialAction\n  | ErrorDuringFetchAction\n  | FetchSuccessAction\n  | CountryToggleAction\n  | CountrySearchChangedAction\n  | ProgressAction\n  | UrlUpdatedAction\n  | CaseChartLogSettingChangedAction\n  | DataTableDateSelectionChangedAction;\n\nexport interface InitialAction {\n  type: \"initialized\";\n}\nexport const makeInitialized = (): InitialAction => ({\n  type: \"initialized\",\n});\n\nexport interface ErrorDuringFetchAction {\n  type: \"error-during-fetch\";\n  message: string;\n}\nexport const makeErrorDuringFetch = (\n  message: string,\n): ErrorDuringFetchAction => ({\n  type: \"error-during-fetch\",\n  message,\n});\n\nexport interface FetchSuccessAction {\n  type: \"fetch-success\";\n  response: IDataFrame;\n}\nexport const makeFetchSuccess = (response: IDataFrame): FetchSuccessAction => ({\n  type: \"fetch-success\",\n  response,\n});\n\nexport interface CountryToggleAction {\n  type: \"country-toggled\";\n  countryCode: string;\n}\nexport const makeCountryToggleAction = (\n  countryCode: string,\n): CountryToggleAction => ({\n  type: \"country-toggled\",\n  countryCode,\n});\n\nexport interface CountrySearchChangedAction {\n  type: \"country-search-changed\";\n  search: string;\n}\n\nexport const makeCoutrySearchChangedAction = (\n  search: string,\n): CountrySearchChangedAction => ({\n  type: \"country-search-changed\",\n  search,\n});\n\nexport interface ProgressAction {\n  type: \"progress\";\n  target: \"covid\" | \"population\";\n  done: number;\n  total: number;\n}\n\nexport const makeProgressAction = (progress: {\n  target: \"covid\" | \"population\";\n  done: number;\n  total: number;\n}): ProgressAction => {\n  return { ...progress, type: \"progress\" };\n};\n\nexport interface UrlUpdatedAction {\n  type: \"url-updated\";\n  url: string;\n}\n\nexport const makeUrlUpdated = (url: string): UrlUpdatedAction => ({\n  type: \"url-updated\",\n  url,\n});\n\nexport interface CaseChartLogSettingChangedAction {\n  type: \"case-chart-log-setting-changed\";\n  newSetting: \"linear\" | \"logarithmic\";\n}\n\nexport const makeCaseChartLogSettingChangedAction = (\n  newSetting: \"linear\" | \"logarithmic\",\n): CaseChartLogSettingChangedAction => ({\n  type: \"case-chart-log-setting-changed\",\n  newSetting,\n});\n\nexport interface DataTableDateSelectionChangedAction {\n  type: \"data-table-date-selection-changed\";\n  newSetting: \"today\" | \"yesterday\";\n}\n\nexport const makeDataTableDateSelectionChangedAction = (\n  newSetting: \"today\" | \"yesterday\",\n): DataTableDateSelectionChangedAction => ({\n  type: \"data-table-date-selection-changed\",\n  newSetting,\n});\n","import {\n  red,\n  pink,\n  purple,\n  blue,\n  cyan,\n  teal,\n  green,\n  lime,\n  amber,\n  orange,\n  brown,\n  grey,\n  blueGrey,\n} from \"@material-ui/core/colors\";\n\nimport { murmur3 } from \"murmurhash-js\";\n\nconst colors = [\n  red,\n  pink,\n  purple,\n  blue,\n  cyan,\n  teal,\n  green,\n  lime,\n  amber,\n  orange,\n  brown,\n  grey,\n  blueGrey,\n];\n\nconst shades = [300, 600];\n\nexport const makeCountryColors = (isoCodes: string[]): Map<string, string> => {\n  let results = new Map<string, string>();\n  let pickedColors = new Set<string>();\n\n  isoCodes.forEach(country => {\n    let picked = \"undefined\";\n\n    let hash = murmur3(country);\n    // do multiple hash rounds to avoid collisions,\n    // unless collisions are unavoidable with many countries\n    do {\n      hash = murmur3(hash.toString());\n      const color = colors[hash % colors.length];\n      const shade = shades[hash % shades.length];\n\n      picked = (color as any)[shade.toString()];\n \n    } while (pickedColors.has(picked) && pickedColors.size < colors.length * shades.length);\n   \n\n    pickedColors.add(picked);\n    results.set(country, picked);\n  });\n\n  return results;\n};\n","import { IDataFrame } from \"data-forge\";\n\nimport { LoadedState } from \"../store\";\n\nimport { createSelector } from \"reselect\";\nimport { makeCountryColors } from \"../components/countryColors\";\n\nexport const dataSelector = (state: LoadedState) => state.data;\nexport const pickedCountriesSelector = (state: LoadedState) =>\n  state.ui.pickedCountries;\nexport const colorMapSelector = createSelector(\n  pickedCountriesSelector,\n  makeCountryColors,\n);\n\nexport const countryNameSelector = createSelector(\n  dataSelector,\n  (data: IDataFrame): Map<string, string> => {\n    const kvPairs: [string, string][] = data\n      .groupBy(row => row.iso_code)\n      .select(group => ({\n        code: group.first().iso_code,\n        name: group.first().location,\n      }))\n      .toArray()\n      .map(({ code, name }) => [code, name]);\n    console.log(kvPairs);\n    return new Map(\n      kvPairs,\n    );\n  }\n);\n","import React from \"react\";\n\nimport { createSelector } from \"reselect\";\n\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nimport { LoadedState } from \"../store\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { makeCaseChartLogSettingChangedAction } from \"../actions\";\n\nimport { SpacedPaper } from \"./SpacedPaper\";\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\n\nimport { IDataFrame } from \"data-forge\";\n\nimport {\n  pickedCountriesSelector,\n  dataSelector,\n  colorMapSelector,\n  countryNameSelector,\n} from \"../selectors\";\n\nconst selectDataToRenderIntoChart = (\n  pickedCountries: string[],\n  data: IDataFrame,\n  colorMap: Map<string, string>,\n  countryNameMap: Map<string, string>,\n): {\n  name: string;\n  data: [Date, number][];\n  type: \"line\";\n  color: string | undefined;\n}[] =>\n  pickedCountries.map((pickedCountry: string) => ({\n    name: countryNameMap.get(pickedCountry) || \"\",\n    data: data\n      .where(row => row.iso_code === pickedCountry)\n      .toArray()\n      .map(row => [\n        row.date.getTime(),\n        (row.total_cases * 1000000) / row.population,\n      ]),\n    type: \"line\",\n    color: colorMap.get(pickedCountry),\n  }));\n\nexport const CaseChart = () => {\n  const cases = useSelector(\n    createSelector(\n      pickedCountriesSelector,\n      dataSelector,\n      colorMapSelector,\n      countryNameSelector,\n      selectDataToRenderIntoChart,\n    ),\n  );\n  const logAxisSetting = useSelector(\n    (state: LoadedState) => state.ui.caseChart.logSetting,\n  );\n\n  const options: Highcharts.Options = {\n    chart: {\n      height: \"50%\",\n      zoomType: \"x\",\n    },\n    title: {\n      text: \"\",\n    },\n    xAxis: {\n      type: \"datetime\",\n      title: {\n        text: \"Date\",\n      },\n      labels: {\n        step: 1,\n      },\n    },\n    yAxis: {\n      type: logAxisSetting,\n      title: {\n        text: \"Cases per 1M population\",\n      },\n    },\n    series: cases,\n    credits: {\n      enabled: false,\n    },\n  };\n\n  const dispatch = useDispatch();\n  const handleAxisLogarithmicToggle = (_: any, newSetting: string | null) => {\n    if (!newSetting) {\n      return;\n    }\n\n    if (!(newSetting === \"linear\" || newSetting === \"logarithmic\")) {\n      return;\n    }\n\n    dispatch(makeCaseChartLogSettingChangedAction(newSetting));\n  };\n\n  return (\n    <SpacedPaper id=\"cases\" elevation={3}>\n      <h2>Cases over Time</h2>\n      <ToggleButtonGroup\n        value={logAxisSetting}\n        onChange={handleAxisLogarithmicToggle}\n        exclusive\n        aria-label=\"log axis setting\"\n      >\n        <ToggleButton value=\"logarithmic\" aria-label=\"logarithmic\">\n          log\n        </ToggleButton>\n        <ToggleButton value=\"linear\" aria-label=\"linear\">\n          linear\n        </ToggleButton>\n      </ToggleButtonGroup>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </SpacedPaper>\n  );\n};\n","import React, { CSSProperties } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { LoadedState } from \"../store\";\n\nimport { createSelector } from \"reselect\";\n\nimport { includes } from \"lodash/fp\";\nimport {\n  makeCountryToggleAction,\n  makeCoutrySearchChangedAction,\n} from \"../actions\";\nimport { IDataFrame } from \"data-forge\";\n\nimport { List, ListItem, Checkbox, TextField } from \"@material-ui/core\";\n\nimport { SpacedPaper } from \"./SpacedPaper\";\n\nconst dataSelector = (state: LoadedState) => state.data;\nconst pickedCountriesSelector = (state: LoadedState) =>\n  state.ui.pickedCountries;\nconst searchTextSelector = (state: LoadedState) => state.ui.searchText;\n\nconst coutrySelector = createSelector(\n  dataSelector,\n  pickedCountriesSelector,\n  searchTextSelector,\n  (data: IDataFrame, pickedCountries: string[], searchText) =>\n    data\n      .select(\n        ({ iso_code, location }: { iso_code: string; location: string }) => ({\n          iso_code,\n          location,\n        }),\n      )\n      .distinct(row => row.iso_code)\n      .orderBy(row => row.location)\n      .toPairs()\n      .map(([_, row]) => ({\n        ...row,\n        active: includes(row.iso_code)(pickedCountries),\n      }))\n      .filter(\n        row =>\n          row.active ||\n          (searchText !== \"\" &&\n            row.location.toLowerCase().startsWith(searchText.toLowerCase())),\n      ),\n);\n\nexport const CountryPicker = () => {\n  const dispatch = useDispatch();\n\n  const autoWidthItem: CSSProperties = {\n    width: \"180px\",\n  };\n\n  const allCountries = useSelector(coutrySelector).map(\n    ({ iso_code, location, active }) => (\n      <ListItem\n        button\n        key={iso_code}\n        onClick={_ => dispatch(makeCountryToggleAction(iso_code))}\n        style={autoWidthItem}\n      >\n        <Checkbox\n          edge=\"start\"\n          checked={active}\n          tabIndex={-1}\n          disableRipple\n          inputProps={{ \"aria-labelledby\": iso_code }}\n        />\n        {location}\n      </ListItem>\n    ),\n  );\n\n  const searchText = useSelector((state: LoadedState) => state.ui.searchText);\n\n  const flexContainer: CSSProperties = {\n    display: \"flex\",\n    padding: 0,\n    flexWrap: \"wrap\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  };\n\n  return (\n    <SpacedPaper elevation={3}>\n      <label>\n        <br />\n        <TextField\n          type=\"text\"\n          name=\"search\"\n          placeholder=\"Search Countries\"\n          onChange={e =>\n            dispatch(makeCoutrySearchChangedAction(e.target.value))\n          }\n          value={searchText}\n        />\n        <List id=\"countries\" style={flexContainer}>\n          {allCountries}\n        </List>\n      </label>\n    </SpacedPaper>\n  );\n};\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport MaterialTable, { Icons, Column } from \"material-table\";\nimport { SpacedPaper } from \"./SpacedPaper\";\nimport { LoadedState } from \"../store\";\n\nimport { forwardRef } from \"react\";\n\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport { ToggleButtonGroup, ToggleButton } from \"@material-ui/lab\";\n\nimport { makeDataTableDateSelectionChangedAction } from \"../actions\";\n\nimport { IDataFrame } from \"data-forge\";\n\nconst tableIcons: Icons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst datesAreOnSameDay = (first: Date, second: Date) =>\n  first.getFullYear() === second.getFullYear() &&\n  first.getMonth() === second.getMonth() &&\n  first.getDate() === second.getDate();\n\nexport const DataTable = () => {\n  const data = useSelector((state: LoadedState) => state.data);\n  const dateToDisplay = useSelector(\n    (state: LoadedState) => state.ui.dataTable.dateToDisplay,\n  );\n\n  const today = new Date();\n  const dateOffset = 24 * 60 * 60 * 1000 * 1; // 1 day\n  let yesterday = new Date();\n  yesterday.setTime(yesterday.getTime() - dateOffset);\n\n  const selectedDate = dateToDisplay === \"today\" ? today : yesterday;\n\n  const findFirstRowMachingDate = (\n    group: IDataFrame,\n    date: Date,\n    field: string,\n  ) => {\n    const filtered: IDataFrame = group.where((row: { date: Date }) =>\n      datesAreOnSameDay(row.date, selectedDate),\n    );\n\n    if (filtered.count() === 0) {\n      const filteredByAnythingPresent = group\n        .orderByDescending(row => row.date)\n        .where(row => row[field]);\n\n      if (filteredByAnythingPresent.count() === 0) {\n        return undefined;\n      }\n\n      return filteredByAnythingPresent.first()[field];\n    }\n\n    return filtered.first()[field];\n  };\n\n  const tableData = data\n    .orderByDescending(row => row.date)\n    .groupBy(row => row.iso_code)\n    .select(group => ({\n      date: group.first().date,\n      iso_code: group.first().iso_code,\n      location: group.first().location,\n      total_cases: findFirstRowMachingDate(group, selectedDate, \"total_cases\"),\n      new_cases: findFirstRowMachingDate(group, selectedDate, \"new_cases\"),\n      total_tests: group\n        .getSeries(\"total_tests\")\n        .select(x => (x ? x : 0))\n        .max(),\n      population: group.first().population,\n    }))\n    .toArray()\n    .map(row => ({\n      ...row,\n      date: row.date.toString(),\n      tests_per_1m_population: Math.round(\n        (row.total_tests * 1000000) / row.population,\n      ),\n    }));\n\n  const numberWithCommas = (field: string) => (rowData: any) =>\n    rowData[field].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\n  const columns: Column<any>[] = [\n    {\n      title: \"Country\",\n      field: \"location\",\n    },\n    {\n      title: \"Total Cases\",\n      field: \"total_cases\",\n      type: \"numeric\",\n      defaultSort: \"desc\",\n      render: numberWithCommas(\"total_cases\"),\n    },\n    {\n      title: \"New Cases\",\n      field: \"new_cases\",\n      type: \"numeric\",\n      render: numberWithCommas(\"new_cases\"),\n    },\n    {\n      title: \"Tests per 1M population\",\n      field: \"tests_per_1m_population\",\n      type: \"numeric\",\n      render: numberWithCommas(\"tests_per_1m_population\"),\n    },\n    {\n      title: \"Total Tests\",\n      field: \"total_tests\",\n      type: \"numeric\",\n      render: numberWithCommas(\"total_tests\"),\n    },\n  ];\n\n  const dispatch = useDispatch();\n  const handleDateSelection = (_: any, newSetting: string | null) => {\n    if (!newSetting) {\n      return;\n    }\n\n    if (!(newSetting === \"today\" || newSetting === \"yesterday\")) {\n      return;\n    }\n\n    dispatch(makeDataTableDateSelectionChangedAction(newSetting));\n  };\n\n  const options = {\n    fixedColumns: {\n      left: 1,\n      right: 0,\n    },\n  };\n\n  return (\n    <SpacedPaper>\n      <ToggleButtonGroup\n        value={dateToDisplay}\n        onChange={handleDateSelection}\n        exclusive\n        aria-label=\"log axis setting\"\n      >\n        <ToggleButton value=\"today\" aria-label=\"today\">\n          today\n        </ToggleButton>\n        <ToggleButton value=\"yesterday\" aria-label=\"yesterday\">\n          yesterday\n        </ToggleButton>\n      </ToggleButtonGroup>\n      <MaterialTable\n        columns={columns}\n        data={tableData}\n        title=\"Country Table\"\n        icons={tableIcons}\n        options={options}\n      ></MaterialTable>\n    </SpacedPaper>\n  );\n};\n","import { Observable, of } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { fromCSV, IDataFrame, Series } from \"data-forge\";\n\ninterface CovidRow {\n  iso_code: string;\n}\n\ninterface PopulationRow {\n  iso_code: string;\n  population: string;\n  year: number;\n}\n\nexport const parseCovidCSV = (data: string): Observable<IDataFrame> =>\n  of(fromCSV(data)).pipe(\n    map((df: IDataFrame): IDataFrame => df.parseDates(\"date\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"total_cases\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"new_cases\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"total_deaths\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"new_deaths\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"total_tests\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"new_tests\")),\n  );\n\nexport const parsePopulationCSV = (data: string): Observable<IDataFrame> =>\n  of(fromCSV(data)).pipe(\n    map((df: IDataFrame): IDataFrame => df.parseInts([\"Value\", \"Year\"])),\n    map(\n      (df: IDataFrame): IDataFrame =>\n        df.renameSeries({\n          Year: \"year\",\n          \"Country Code\": \"iso_code\",\n          Value: \"population\",\n        }),\n    ),\n  );\n\nexport const transformCsvData = (data: IDataFrame): IDataFrame => data;\n\ntype Maximums = Map<string, number>;\n\ntype Accumulator = {\n  maximums: Maximums;\n  result: IDataFrame;\n};\n\nconst computeLatestPopulation = (population: IDataFrame): IDataFrame =>\n  population\n    .groupBy(row => row.iso_code)\n    .select(group => {\n      const { year: maxYear } = group.summarize({ year: Series.max });\n      const pop = group.where(row => row.year === maxYear).first().population;\n      return {\n        iso_code: group.first().iso_code,\n        population: pop,\n      };\n    })\n    .inflate();\n\nexport const mergeCovidPopulation = (\n  covid: IDataFrame,\n  population: IDataFrame,\n): IDataFrame => {\n  const populationLatest = computeLatestPopulation(population);\n  return covid.join(\n    populationLatest,\n    (covid: CovidRow) => covid.iso_code,\n    (pop: PopulationRow) => pop.iso_code,\n    (covid: CovidRow, pop: PopulationRow | null) => ({\n      ...covid,\n      population: pop ? pop.population : 0,\n    }),\n  );\n};\n\nexport const smooth = (amount: number, series: number[][]): number[][] => {\n  amount = Math.ceil(Math.abs(amount));\n  let results: Array<Array<number>> = [];\n  for (let i = 0; i < series.length; i++) {\n    let [x] = series[i];\n\n    let valuesInAverage = 0;\n    let sum = 0;\n    for (let j = amount * -1; j <= amount; j++) {\n      if (series[i + j] === undefined) {\n        // ignore edges\n        continue;\n      }\n\n      sum = sum + series[i + j][1];\n      valuesInAverage = valuesInAverage + 1;\n    }\n\n    results.push([x, sum / valuesInAverage]);\n  }\n  return results;\n};\n","import React from \"react\";\n\nimport Highcharts, { SeriesOptionsType } from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nimport { useSelector } from \"react-redux\";\nimport { IDataFrame } from \"data-forge\";\n\nimport { createSelector } from \"reselect\";\n\nimport { smooth } from \"../store/data\";\n\nimport { SpacedPaper } from \"./SpacedPaper\";\n\nimport {\n  pickedCountriesSelector,\n  dataSelector,\n  colorMapSelector,\n  countryNameSelector,\n} from \"../selectors\";\n\nconst deathCurveSelector = (\n  pickedCountries: string[],\n  data: IDataFrame,\n  colorMap: Map<string, string>,\n  countryNameMap: Map<string, string>,\n): SeriesOptionsType[] =>\n  pickedCountries.map(country => {\n    const filteredByCountry = data.where(row => row.iso_code === country);\n\n    const deaths = filteredByCountry.select(row => ({\n      iso_code: row.iso_code,\n      total_deaths: row.total_deaths,\n      population: row.population,\n      new_deaths: row.new_deaths,\n    }));\n\n    return {\n      name: countryNameMap.get(country),\n      type: \"line\",\n      color: colorMap.get(country),\n      data: smooth(\n        7,\n        deaths\n          .toArray()\n          .map(row => [\n            row.total_deaths / row.population,\n            row.new_deaths / row.population,\n          ])\n          .sort(([a, _], [b, __]) => (a < b ? -1 : 1)),\n      ).filter(([x, y]) => x !== 0 && y !== 0),\n    };\n  });\n\nexport const DeathCurve = () => {\n  const deaths = useSelector(\n    createSelector(\n      pickedCountriesSelector,\n      dataSelector,\n      colorMapSelector,\n      countryNameSelector,\n      deathCurveSelector,\n    ),\n  );\n\n  const options: Highcharts.Options = {\n    title: {\n      text: \"\",\n    },\n    chart: {\n      height: \"50%\",\n      zoomType: \"xy\",\n    },\n    xAxis: {\n      type: \"logarithmic\",\n      title: {\n        text: \"Fraction of dead population\",\n      },\n      min: 1e-6,\n      tickInterval: 0.1,\n      labels: {\n        step: 1,\n        formatter: function () {\n          return this.value.toExponential(1);\n        },\n        rotation: -45,\n      },\n    },\n    yAxis: {\n      type: \"logarithmic\",\n      title: {\n        text: \"Fraction of dead population per day (smoothed)\",\n      },\n      tickInterval: 0.1,\n      labels: {\n        step: 1,\n        formatter: function () {\n          return this.value.toExponential(1);\n        },\n      },\n    },\n    series: deaths,\n    credits: {\n      enabled: false,\n    },\n  };\n\n  return (\n    <SpacedPaper id=\"deathcurve\" elevation={3}>\n      <h2>\n        Robins Death Curve\n        <span role=\"img\" aria-label=\"tm\">\n          ™️\n        </span>\n      </h2>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </SpacedPaper>\n  );\n};\n","import React from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { IDataFrame } from \"data-forge\";\nimport { createSelector } from \"reselect\";\nimport Highcharts, { SeriesOptionsType } from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport { smooth } from \"../store/data\";\nimport { SpacedPaper } from \"./SpacedPaper\";\nimport {\n  pickedCountriesSelector,\n  dataSelector,\n  colorMapSelector,\n  countryNameSelector,\n} from \"../selectors\";\n\nimport { red } from \"@material-ui/core/colors\";\n\nexport const NewCaseChart = () => {\n  const countryCharts = useSelector(\n    createSelector(\n      pickedCountriesSelector,\n      dataSelector,\n      colorMapSelector,\n      countryNameSelector,\n      (\n        pickedCountries: string[],\n        data: IDataFrame,\n        colorMap: Map<string, string>,\n        countryNameMap: Map<string, string>,\n      ) =>\n        pickedCountries.map(country => {\n          const countryData = {\n            name: countryNameMap.get(country),\n            type: \"column\",\n            color: colorMap.get(country),\n            data: data\n              .where(\n                row =>\n                  row.iso_code === country && row.date > new Date(\"02-14-2020\"),\n              )\n              .toArray()\n              .map(row => [\n                row.date.getTime(),\n                (row.new_cases * 1000000) / row.population,\n              ])\n              .sort(),\n          };\n\n          const movingAverage: SeriesOptionsType = {\n            name: \"7 day average\",\n            data: smooth(3, countryData.data),\n            type: \"line\",\n            color: red[900],\n            enableMouseTracking: false,\n          };\n\n          const options: Highcharts.Options = {\n            chart: {\n              height: \"300\",\n              width: \"300\",\n            },\n            title: {\n              text: countryNameMap.get(country),\n            },\n            xAxis: {\n              type: \"datetime\",\n              tickInterval: 7 * 24 * 3600 * 1000,\n            },\n            yAxis: {\n              min: 0,\n              title: {\n                text: \"daily new cases per 1M population\",\n              },\n            },\n            legend: {\n              enabled: false,\n            },\n            series: [countryData as SeriesOptionsType, movingAverage],\n            credits: {\n              enabled: false,\n            },\n          };\n\n          return (\n            <Grid item key={country}>\n              <HighchartsReact highcharts={Highcharts} options={options} />\n            </Grid>\n          );\n        }),\n    ),\n  );\n\n  return (\n    <SpacedPaper elevation={3} id=\"new-cases\">\n      <h2>New Cases</h2>\n      <Grid container justify=\"center\" spacing={0}>\n        {countryCharts}\n      </Grid>\n    </SpacedPaper>\n  );\n};\n","import React from \"react\";\n\nimport { CaseChart } from \"./CaseChart\";\nimport { CountryPicker } from \"./CountryPicker\";\nimport { DataTable } from \"./DataTable\";\nimport { DeathCurve } from \"./DeathCurve\";\nimport { NewCaseChart } from \"./NewCaseChart\";\n\nconst centered: React.CSSProperties = { textAlign: \"center\" };\n\nexport const Loaded = () => {\n  return (\n    <div>\n      <h1>Covid Stats</h1>\n      <DataTable />\n      <CountryPicker />\n      <NewCaseChart />\n      <CaseChart />\n      <DeathCurve />\n      <div style={centered}>\n        data from{\" \"}\n        <a href=\"https://covid.ourworldindata.org\">Our World In Data</a> and{\" \"}\n        <a href=\"https://github.com/datasets/population\">\n          datahub.io via the World Bank\n        </a>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { ErrorState } from \"../store\";\nimport { useSelector } from \"react-redux\";\n\nexport const Error = () => {\n  const message = useSelector((state: ErrorState) => state.message);\n  return <div>Error: {message}</div>;\n};\n","export function assertNever(x: never): never {\n    throw new Error(\"Unexpected object: \" + x);\n}","import Highcharts from \"highcharts\";\n\nconst theme: Highcharts.Options = {\n  colors: [\n    \"#058DC7\",\n    \"#50B432\",\n    \"#ED561B\",\n    \"#DDDF00\",\n    \"#24CBE5\",\n    \"#64E572\",\n    \"#FF9655\",\n    \"#FFF263\",\n    \"#6AF9C4\",\n  ],\n  chart: {\n    backgroundColor: \"#FFFFFF\",\n    plotBackgroundColor: \"rgba(255, 255, 255, .9)\",\n    plotShadow: false,\n    plotBorderWidth: 0,\n  },\n  title: {\n    style: {\n      color: \"#000\",\n      font: 'bold 16px \"Trebuchet MS\", Verdana, sans-serif',\n    },\n  },\n  subtitle: {\n    style: {\n      color: \"#666666\",\n      font: 'bold 12px \"Trebuchet MS\", Verdana, sans-serif',\n    },\n  },\n  xAxis: {\n    gridLineWidth: 1,\n    lineColor: \"#000\",\n    tickColor: \"#000\",\n    labels: {\n      style: {\n        color: \"#000\",\n        font: \"11px Trebuchet MS, Verdana, sans-serif\",\n      },\n    },\n    title: {\n      style: {\n        color: \"#333\",\n        fontWeight: \"bold\",\n        fontSize: \"12px\",\n        fontFamily: \"Trebuchet MS, Verdana, sans-serif\",\n      },\n    },\n  },\n  yAxis: {\n    minorTickInterval: \"auto\",\n    lineColor: \"#000\",\n    lineWidth: 1,\n    tickWidth: 1,\n    tickColor: \"#000\",\n    labels: {\n      style: {\n        color: \"#000\",\n        font: \"11px Trebuchet MS, Verdana, sans-serif\",\n      },\n    },\n    title: {\n      style: {\n        color: \"#333\",\n        fontWeight: \"bold\",\n        fontSize: \"12px\",\n        fontFamily: \"Trebuchet MS, Verdana, sans-serif\",\n      },\n    },\n  },\n  legend: {\n    itemStyle: {\n      font: \"9pt Trebuchet MS, Verdana, sans-serif\",\n      color: \"black\",\n    },\n    itemHoverStyle: {\n      color: \"#039\",\n    },\n    itemHiddenStyle: {\n      color: \"gray\",\n    },\n  },\n  navigation: {\n    buttonOptions: {\n      theme: {\n        stroke: \"#CCCCCC\",\n      },\n    },\n  },\n};\n\nHighcharts.setOptions(theme);\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"./App.css\";\nimport \"github-fork-ribbon-css/gh-fork-ribbon.css\";\n\nimport { State } from \"../store\";\n\nimport { Loading } from \"./Loading\";\nimport { Loaded } from \"./Loaded\";\nimport { Error } from \"./Error\";\n\nimport { assertNever } from \"../utils\";\nimport \"./highchartsTheme\";\n\nimport Box from \"@material-ui/core/Box\";\n\nexport const App = () => {\n  const type = useSelector<State, State[\"type\"]>(state => state.type);\n\n  return (\n    <>\n      <a\n        className=\"github-fork-ribbon right-top\"\n        href=\"https://github.com/jupp0r/covid-stats\"\n        data-ribbon=\"Fork me on GitHub\"\n        title=\"Fork me on GitHub\"\n      >\n        Fork me on GitHub\n      </a>\n      <Box px={3} py={3} my={3} textAlign=\"center\">\n        {((type: State[\"type\"]) => {\n          switch (type) {\n            case \"loading\":\n              return <Loading />;\n            case \"loaded\":\n              return <Loaded />;\n            case \"error\":\n              return <Error />;\n            default:\n              return assertNever(type);\n          }\n        })(type)}\n      </Box>\n    </>\n  );\n};\n","import { Action } from \"../actions\";\nimport { State } from \"../store\";\n\nimport { Store } from \"redux\";\n\nimport { makeUrlUpdated } from \"../actions\";\nimport { defaultCountries } from \"../store\";\n\n\nexport const updateCountriesInPathName = (\n  urlString: string,\n  countries: string[],\n): string => {\n  const url = new URL(urlString);\n  const params = new URLSearchParams(url.search);\n  params.set(\"countries[]\", JSON.stringify(countries));\n  url.search = params.toString();\n  return url.toString();\n};\n\nexport const getPickedCountriesFromUrl = (urlString: string): string[] => {\n  const url = new URL(urlString);\n  const params = new URLSearchParams(url.search);\n  const countries = params.get(\"countries[]\");\n  if (!countries) {\n    return defaultCountries;\n  }\n\n  const parsedCountries: string[] = JSON.parse(countries);\n\n  if (!Array.isArray(parsedCountries)) {\n    console.error(\"invalid url params\");\n    return defaultCountries;\n  }\n\n  return parsedCountries;\n};\n\nexport const setupRouting = (store: Store<State, Action>) => {\n  window.addEventListener(\"popstate\", () => {\n    store.dispatch(makeUrlUpdated(window.location.toString()));\n  });\n\n  store.subscribe(() => {\n    const { url } = store.getState().routing;\n    if (window.location.toString() !== url) {\n      window.history.pushState(null, \"\", url);\n      document.body.scrollTop = 0;\n    }\n  });\n};\n","import { initialState, State, LoadedState, LoadingState } from \"../store\";\n\nimport { Action } from \"../actions\";\nimport { transformCsvData } from \"../store/data\";\n\nimport { assertNever } from \"../utils\";\n\nimport { includes, filter } from \"lodash/fp\";\n\nimport { getPickedCountriesFromUrl, updateCountriesInPathName } from \"./router\";\n\nconst errorReducer = (state: State, action: Action): State => state;\n\nconst loadingReducer = (state: LoadingState, action: Action): State => {\n  switch (action.type) {\n    case \"fetch-success\":\n      const pickedCountries = getPickedCountriesFromUrl(state.routing.url);\n      return {\n        ...state,\n        type: \"loaded\",\n        data: transformCsvData(action.response),\n        ui: {\n          pickedCountries,\n          searchText: \"\",\n          caseChart: {\n            logSetting: \"logarithmic\",\n          },\n          dataTable: {\n            dateToDisplay: \"yesterday\",\n          },\n        },\n        routing: {\n          url: updateCountriesInPathName(state.routing.url, pickedCountries),\n        },\n      };\n    case \"progress\":\n      return {\n        ...state,\n        progress: {\n          ...state.progress,\n          [action.target]: {\n            done: action.done,\n            total: Math.max(state.progress[action.target].total, action.done),\n            ...(action.total !== 0 && {\n              total: Math.max(action.total, action.done),\n            }),\n          },\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nconst loadedReducer = (state: LoadedState, action: Action): State => {\n  switch (action.type) {\n    case \"country-toggled\":\n      const toggleCountryToPicked = (\n        country: string,\n        countries: string[],\n      ): string[] => {\n        if (includes(country)(countries)) {\n          return filter(c => c !== country, countries);\n        }\n\n        return [country, ...countries];\n      };\n\n      const newCountries = toggleCountryToPicked(\n        action.countryCode,\n        state.ui.pickedCountries,\n      );\n\n      return {\n        ...state,\n        ui: {\n          ...state.ui,\n          pickedCountries: newCountries,\n        },\n        routing: {\n          url: updateCountriesInPathName(state.routing.url, newCountries),\n        },\n      };\n    case \"country-search-changed\":\n      return { ...state, ui: { ...state.ui, searchText: action.search } };\n    case \"case-chart-log-setting-changed\":\n      return {\n        ...state,\n        ui: {\n          ...state.ui,\n          caseChart: { ...state.ui.caseChart, logSetting: action.newSetting },\n        },\n      };\n    case \"data-table-date-selection-changed\":\n      return {\n        ...state,\n        ui: {\n          ...state.ui,\n          dataTable: {\n            ...state.ui.dataTable,\n            dateToDisplay: action.newSetting,\n          },\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport const reducer = (state: State = initialState, action: Action): State => {\n  if (action.type === \"url-updated\") {\n    return { ...state, routing: { ...state.routing, url: action.url } };\n  }\n\n  switch (state.type) {\n    case \"error\":\n      return errorReducer(state, action);\n    case \"loading\":\n      return loadingReducer(state, action);\n    case \"loaded\":\n      return loadedReducer(state, action);\n    default:\n      return assertNever(state);\n  }\n};\n","import { Observable, zip, merge } from \"rxjs\";\n\nimport { filter, flatMap, map } from \"rxjs/operators\";\n\nimport { Action, makeProgressAction, ProgressAction } from \"../actions\";\n\nimport { combineEpics } from \"redux-observable\";\n\nimport {\n  parseCovidCSV,\n  parsePopulationCSV,\n  mergeCovidPopulation,\n} from \"../store/data\";\nimport { IDataFrame } from \"data-forge\";\n\ntype DataResult =\n  | { type: \"success\"; data: IDataFrame }\n  | { type: \"error\"; reason: string };\n\ninterface Progress {\n  done: number;\n  total: number;\n}\n\nconst fromXhr = (\n  url: string,\n): {\n  progress: Observable<Progress>;\n  result: Observable<string>;\n} => {\n  const xhr = new XMLHttpRequest();\n  xhr.responseType = \"text\";\n  const progress$ = new Observable<Progress>((subscriber): void => {\n    xhr.addEventListener(\"progress\", ev =>\n      subscriber.next({\n        done: ev.loaded,\n        total: ev.total,\n      }),\n    );\n  });\n\n  const result$ = new Observable<string>(subscriber => {\n    xhr.addEventListener(\"readystatechange\", ev => {\n      if (xhr.readyState !== 4) {\n        return;\n      }\n\n      if (xhr.status === 200) {\n        subscriber.next(xhr.response);\n        subscriber.complete();\n      } else {\n        subscriber.error(xhr.response);\n      }\n    });\n  });\n\n  xhr.open(\"GET\", url);\n  xhr.send();\n  return { progress: progress$, result: result$ };\n};\n\nexport const startLoadingEpic = (\n  action$: Observable<Action>,\n): Observable<Action> => {\n  const covidData$: Observable<ProgressAction | DataResult> = action$.pipe(\n    filter((action: Action) => action.type === \"initialized\"),\n    flatMap(() => {\n      const { progress, result } = fromXhr(\n        \"https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv\",\n      );\n      const progress$ = progress.pipe(\n        map((update: Progress) =>\n          makeProgressAction({ ...update, target: \"covid\" }),\n        ),\n      );\n\n      const result$ = result.pipe(\n        flatMap(parseCovidCSV),\n        map((data: IDataFrame): DataResult => ({ type: \"success\", data })),\n      );\n\n      return merge(progress$, result$);\n    }),\n  );\n\n  const populationData$: Observable<ProgressAction | DataResult> = action$.pipe(\n    filter((action: Action) => action.type === \"initialized\"),\n    flatMap(() => {\n      const { progress, result } = fromXhr(\n        \"https://raw.githubusercontent.com/datasets/population/master/data/population.csv\",\n      );\n      const progress$ = progress.pipe(\n        map((update: Progress) =>\n          makeProgressAction({ ...update, target: \"population\" }),\n        ),\n      );\n\n      const result$ = result.pipe(\n        flatMap(parsePopulationCSV),\n        map((data: IDataFrame): DataResult => ({ type: \"success\", data })),\n      );\n\n      return merge(progress$, result$);\n    }),\n  );\n\n  const combinedProgress$: Observable<ProgressAction> = merge(\n    covidData$,\n    populationData$,\n  ).pipe(\n    filter(item => item.type === \"progress\"),\n    map(item => item as ProgressAction),\n  );\n\n  const filterForResult = (data$: Observable<ProgressAction | DataResult>) =>\n    data$.pipe(filter(item => item.type === \"success\"));\n\n  const combinedResults$: Observable<Action> = zip(\n    filterForResult(covidData$),\n    filterForResult(populationData$),\n  ).pipe(\n    map(\n      ([covid, population]): Action => {\n        if (covid.type === \"success\" && population.type === \"success\") {\n          return {\n            type: \"fetch-success\",\n            response: mergeCovidPopulation(covid.data, population.data),\n          };\n        } else {\n          return {\n            type: \"error-during-fetch\",\n            message: `Error: ${covid} or ${population} failed to fetch`,\n          };\n        }\n      },\n    ),\n  );\n\n  return merge(combinedProgress$, combinedResults$);\n};\n\nexport const rootEpic = combineEpics(startLoadingEpic);\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { reducer } from \"../reducers/reducers\";\nimport { createEpicMiddleware } from \"redux-observable\";\nimport { rootEpic } from \"../epics\";\nimport { makeInitialized } from \"../actions\";\nimport { IDataFrame } from \"data-forge\";\nimport { Store as ReduxStore } from \"redux\";\nimport { Action } from \"../actions\";\nimport { setupRouting } from \"../reducers/router\";\n\nexport type State = (LoadingState | LoadedState | ErrorState);\ninterface RoutingState {\n  routing: {\n    url: string,\n  }\n}\n\ninterface Progress {\n  done: number;\n  total: number;\n}\nexport type LoadingState = {\n  type: \"loading\";\n  progress: {\n    covid: Progress;\n    population: Progress;\n  };\n} & RoutingState;\n\nexport type UIState = {\n  pickedCountries: string[];\n  searchText: string;\n  caseChart: {\n    logSetting: \"linear\" | \"logarithmic\";\n  };\n  dataTable: {\n    dateToDisplay: \"today\" | \"yesterday\";\n  };\n}\n\nexport type LoadedState = {\n  type: \"loaded\";\n  data: IDataFrame;\n  ui: UIState;\n} & RoutingState\n\nexport type ErrorState = {\n  type: \"error\";\n  message: string;\n} & RoutingState;\n\nconst covidSizeEstimate = 2459742;\nconst populationSizeEstimate = 487991;\n\nexport const initialState: State = {\n  type: \"loading\",\n  progress: {\n    covid: { done: 0, total: covidSizeEstimate },\n    population: { done: 0, total: populationSizeEstimate },\n  },\n  routing: {\n    url: window.location.toString(),\n  }\n};\n\nexport const defaultCountries = [\"USA\", \"DEU\", \"SWE\", \"ITA\", \"NGA\"];\n\nexport type Store = ReduxStore<State, Action>;\n\nconst epicMiddleware = createEpicMiddleware();\nexport const store = configureStore({\n  reducer,\n  middleware: [epicMiddleware],\n});\nepicMiddleware.run(rootEpic);\n\nsetupRouting(store);\nstore.dispatch(makeInitialized());\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./components/App\";\n\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\nimport { createMuiTheme, ThemeProvider, CssBaseline } from \"@material-ui/core\";\n\nimport \"typeface-roboto\";\n\nconst rootElement = document.getElementById(\"root\");\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: \"light\",\n  },\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <ThemeProvider theme={darkTheme}>\n        <CssBaseline />\n        <App />\n      </ThemeProvider>\n    </React.StrictMode>\n  </Provider>,\n  rootElement,\n);\n"],"sourceRoot":""}