{"version":3,"sources":["components/highchartsTheme.ts","utils.ts","components/Error.tsx","reducers/router.ts","actions/index.ts","components/countryColors.ts","selectors/index.ts","components/SpacedPaper.tsx","components/CaseChart.tsx","components/CountryPicker.tsx","components/DataTable.tsx","store/data.ts","components/DeathCurve.tsx","components/NewCaseChart.tsx","components/Loaded.tsx","components/Loading.tsx","components/App.tsx","epics/util.ts","epics/index.ts","reducers/reducers.ts","store/index.ts","index.tsx"],"names":["Highcharts","setOptions","colors","chart","backgroundColor","plotBackgroundColor","plotShadow","plotBorderWidth","title","style","color","font","subtitle","xAxis","gridLineWidth","lineColor","tickColor","labels","fontWeight","fontSize","fontFamily","yAxis","minorTickInterval","lineWidth","tickWidth","legend","itemStyle","itemHoverStyle","itemHiddenStyle","navigation","buttonOptions","theme","stroke","assertNever","x","Error","store","message","useSelector","state","makeCountryToggleAction","countryCode","type","makeCaseChartLogSettingChangedAction","newSetting","red","pink","purple","blue","cyan","teal","green","lime","amber","orange","brown","grey","blueGrey","shades","dataSelector","data","pickedCountriesSelector","ui","pickedCountries","colorMapSelector","createSelector","isoCodes","results","Map","pickedColors","Set","forEach","country","picked","hash","murmur3","toString","length","has","size","add","set","countryNameSelector","kvPairs","groupBy","row","isoCode","select","group","code","first","name","location","toArray","map","withPadding","createStyles","paperPadding","padding","SpacedPaper","withStyles","props","wide","useMediaQuery","Box","my","py","Paper","elevation","className","classes","children","selectDataToRenderIntoChart","colorMap","countryNameMap","pickedCountry","get","where","date","getTime","makeHighchartsOptions","logAxisSetting","cases","height","zoomType","text","step","yAxisLabel","series","credits","enabled","CaseChart","totalCases","population","caseChart","logSetting","dispatch","useDispatch","options","id","ToggleButtonGroup","value","onChange","_","exclusive","aria-label","ToggleButton","highcharts","DeathChart","totalDeaths","countrySelector","searchText","distinct","orderBy","toPairs","active","includes","filter","toLowerCase","startsWith","CountryPicker","autoWidthItem","width","allCountries","ListItem","button","key","onClick","Checkbox","edge","checked","tabIndex","disableRipple","inputProps","TextField","placeholder","e","search","target","List","display","flexWrap","alignItems","justifyContent","tableIcons","Add","forwardRef","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","DataTable","dateToDisplay","dataTable","today","Date","yesterday","setTime","selectedDate","findFirstRowMachingDate","field","filtered","second","getFullYear","getMonth","getDate","count","filteredByAnythingPresent","orderByDescending","undefined","tableData","newCases","totalTests","getSeries","max","testsPer1MPopulation","Math","round","numberWithCommas","rowData","replace","columns","render","defaultSort","makeDataTableDateSelectionChangedAction","icons","fixedColumns","left","right","parseCovidCSV","of","fromCSV","pipe","df","renameSeries","parseDates","parseInts","parsePopulationCSV","Year","Value","replaceEmptyBy0","parseUsCSV","positive","positiveIncrease","death","deathIncrease","totalTestResults","totalTestResultsIncrease","transformSeries","newDeaths","newTests","parseUsStateInfoCSV","mergeData","covid","us","stateInfo","populationLatest","maxYear","summarize","year","Series","pop","inflate","computeLatestPopulation","joinedUsData","join","dataRow","infoRow","locationType","joinedWorldData","concat","smooth","amount","ceil","abs","i","valuesInAverage","sum","j","push","deathCurveSelector","deaths","sort","a","b","y","DeathCurve","min","tickInterval","formatter","this","toExponential","rotation","role","newSelector","selector","isSynced","maxValue","lMax","order","pow","floor","log10","yAxisMax","lRound","countryData","movingAverage","enableMouseTracking","Grid","item","isSyncedSelector","syncAxes","SyncSwitch","FormGroup","FormControlLabel","control","Switch","label","NewCaseChart","countryCharts","container","justify","spacing","NewDeathChart","centered","textAlign","Loaded","href","Loading","progress","normalize","done","total","LinearProgress","variant","App","data-ribbon","px","makeProgressStream","action$","url","csvParser","action","flatMap","xhr","XMLHttpRequest","responseType","progress$","Observable","subscriber","addEventListener","ev","next","loaded","result$","readyState","status","response","complete","error","open","send","result","fromXhr","update","makeProgressAction","merge","rootEpic","combineEpics","covidData$","populationData$","usData$","stateInfo$","combinedProgress$","ofType","filterForResult","data$","combinedResults$","zip","updateCountriesInPathName","urlString","countries","URL","params","URLSearchParams","JSON","stringify","errorReducer","loadingReducer","defaultCountries","parsedCountries","parse","Array","isArray","console","getPickedCountriesFromUrl","routing","loadedReducer","newCountries","c","initialState","window","epicMiddleware","createEpicMiddleware","configureStore","reducer","middleware","run","subscribe","getState","history","pushState","document","body","scrollTop","rootElement","getElementById","darkTheme","createMuiTheme","palette","ReactDOM","StrictMode","ThemeProvider","CssBaseline"],"mappings":"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","file":"static/js/main.48b28a82.chunk.js","sourcesContent":["import Highcharts from \"highcharts\";\n\nconst theme: Highcharts.Options = {\n  colors: [\n    \"#058DC7\",\n    \"#50B432\",\n    \"#ED561B\",\n    \"#DDDF00\",\n    \"#24CBE5\",\n    \"#64E572\",\n    \"#FF9655\",\n    \"#FFF263\",\n    \"#6AF9C4\",\n  ],\n  chart: {\n    backgroundColor: \"#FFFFFF\",\n    plotBackgroundColor: \"rgba(255, 255, 255, .9)\",\n    plotShadow: false,\n    plotBorderWidth: 0,\n  },\n  title: {\n    style: {\n      color: \"#000\",\n      font: 'bold 16px \"Trebuchet MS\", Verdana, sans-serif',\n    },\n  },\n  subtitle: {\n    style: {\n      color: \"#666666\",\n      font: 'bold 12px \"Trebuchet MS\", Verdana, sans-serif',\n    },\n  },\n  xAxis: {\n    gridLineWidth: 1,\n    lineColor: \"#000\",\n    tickColor: \"#000\",\n    labels: {\n      style: {\n        color: \"#000\",\n        font: \"11px Trebuchet MS, Verdana, sans-serif\",\n      },\n    },\n    title: {\n      style: {\n        color: \"#333\",\n        fontWeight: \"bold\",\n        fontSize: \"12px\",\n        fontFamily: \"Trebuchet MS, Verdana, sans-serif\",\n      },\n    },\n  },\n  yAxis: {\n    minorTickInterval: \"auto\",\n    lineColor: \"#000\",\n    lineWidth: 1,\n    tickWidth: 1,\n    tickColor: \"#000\",\n    labels: {\n      style: {\n        color: \"#000\",\n        font: \"11px Trebuchet MS, Verdana, sans-serif\",\n      },\n    },\n    title: {\n      style: {\n        color: \"#333\",\n        fontWeight: \"bold\",\n        fontSize: \"12px\",\n        fontFamily: \"Trebuchet MS, Verdana, sans-serif\",\n      },\n    },\n  },\n  legend: {\n    itemStyle: {\n      font: \"9pt Trebuchet MS, Verdana, sans-serif\",\n      color: \"black\",\n    },\n    itemHoverStyle: {\n      color: \"#039\",\n    },\n    itemHiddenStyle: {\n      color: \"gray\",\n    },\n  },\n  navigation: {\n    buttonOptions: {\n      theme: {\n        stroke: \"#CCCCCC\",\n      },\n    },\n  },\n};\n\nHighcharts.setOptions(theme);\n","export function assertNever(x: never): never {\n    throw new Error(\"Unexpected object: \" + x);\n}","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { ErrorState } from \"../store\";\n\nexport const Error = (): JSX.Element => {\n  const message = useSelector((state: ErrorState) => state.message);\n  return <div>Error: {message}</div>;\n};\n","import { Store } from \"redux\";\n\nimport { Action } from \"../actions\";\nimport { makeUrlUpdated } from \"../actions\";\nimport { State } from \"../store\";\nimport { defaultCountries } from \"../store\";\n\n\nexport const updateCountriesInPathName = (\n  urlString: string,\n  countries: string[],\n): string => {\n  const url = new URL(urlString);\n  const params = new URLSearchParams(url.search);\n  params.set(\"countries[]\", JSON.stringify(countries));\n  url.search = params.toString();\n  return url.toString();\n};\n\nexport const getPickedCountriesFromUrl = (urlString: string): string[] => {\n  const url = new URL(urlString);\n  const params = new URLSearchParams(url.search);\n  const countries = params.get(\"countries[]\");\n  if (!countries) {\n    return defaultCountries;\n  }\n\n  const parsedCountries: string[] = JSON.parse(countries);\n\n  if (!Array.isArray(parsedCountries)) {\n    console.error(\"invalid url params\");\n    return defaultCountries;\n  }\n\n  return parsedCountries;\n};\n\nexport const setupRouting = (store: Store<State, Action>): void => {\n  window.addEventListener(\"popstate\", () => {\n    store.dispatch(makeUrlUpdated(window.location.toString()));\n  });\n\n  store.subscribe(() => {\n    const { url } = store.getState().routing;\n    if (window.location.toString() !== url) {\n      window.history.pushState(null, \"\", url);\n      document.body.scrollTop = 0;\n    }\n  });\n};\n","import { IDataFrame } from \"data-forge\";\n\nexport type Action =\n  | InitialAction\n  | ErrorDuringFetchAction\n  | FetchSuccessAction\n  | CountryToggleAction\n  | CountrySearchChangedAction\n  | ProgressAction\n  | UrlUpdatedAction\n  | CaseChartLogSettingChangedAction\n  | DataTableDateSelectionChangedAction\n  | SyncAxisToggleAction;\n\nexport interface InitialAction {\n  type: \"initialized\";\n}\nexport const makeInitialized = (): InitialAction => ({\n  type: \"initialized\",\n});\n\nexport interface ErrorDuringFetchAction {\n  type: \"error-during-fetch\";\n  message: string;\n}\nexport const makeErrorDuringFetch = (\n  message: string,\n): ErrorDuringFetchAction => ({\n  type: \"error-during-fetch\",\n  message,\n});\n\nexport interface FetchSuccessAction {\n  type: \"fetch-success\";\n  response: IDataFrame;\n}\nexport const makeFetchSuccess = (response: IDataFrame): FetchSuccessAction => ({\n  type: \"fetch-success\",\n  response,\n});\n\nexport interface CountryToggleAction {\n  type: \"country-toggled\";\n  countryCode: string;\n}\nexport const makeCountryToggleAction = (\n  countryCode: string,\n): CountryToggleAction => ({\n  type: \"country-toggled\",\n  countryCode,\n});\n\nexport interface CountrySearchChangedAction {\n  type: \"country-search-changed\";\n  search: string;\n}\n\nexport const makeCoutrySearchChangedAction = (\n  search: string,\n): CountrySearchChangedAction => ({\n  type: \"country-search-changed\",\n  search,\n});\n\nexport type DownloadCategory = \"covid\" | \"population\" | \"us\" | \"stateInfo\";\n\nexport interface ProgressAction {\n  type: \"progress\";\n  target: DownloadCategory;\n  done: number;\n  total: number;\n}\n\nexport const makeProgressAction = (progress: {\n  target: DownloadCategory;\n  done: number;\n  total: number;\n}): ProgressAction => {\n  return { ...progress, type: \"progress\" };\n};\n\nexport interface UrlUpdatedAction {\n  type: \"url-updated\";\n  url: string;\n}\n\nexport const makeUrlUpdated = (url: string): UrlUpdatedAction => ({\n  type: \"url-updated\",\n  url,\n});\n\nexport interface CaseChartLogSettingChangedAction {\n  type: \"case-chart-log-setting-changed\";\n  newSetting: \"linear\" | \"logarithmic\";\n}\n\nexport const makeCaseChartLogSettingChangedAction = (\n  newSetting: \"linear\" | \"logarithmic\",\n): CaseChartLogSettingChangedAction => ({\n  type: \"case-chart-log-setting-changed\",\n  newSetting,\n});\n\nexport interface DataTableDateSelectionChangedAction {\n  type: \"data-table-date-selection-changed\";\n  newSetting: \"today\" | \"yesterday\";\n}\n\nexport const makeDataTableDateSelectionChangedAction = (\n  newSetting: \"today\" | \"yesterday\",\n): DataTableDateSelectionChangedAction => ({\n  type: \"data-table-date-selection-changed\",\n  newSetting,\n});\n\nexport interface SyncAxisToggleAction {\n  type: \"sync-axis-toggle\";\n};\n\nexport const makeSyncAxisToggleAction = (): SyncAxisToggleAction => ({\n  type: \"sync-axis-toggle\",\n});","import {\n  amber,\n  blue,\n  blueGrey,\n  brown,\n  cyan,\n  green,\n  grey,\n  lime,\n  orange,\n  pink,\n  purple,\n  red,\n  teal,\n} from \"@material-ui/core/colors\";\nimport { murmur3 } from \"murmurhash-js\";\n\nconst colors = [\n  red,\n  pink,\n  purple,\n  blue,\n  cyan,\n  teal,\n  green,\n  lime,\n  amber,\n  orange,\n  brown,\n  grey,\n  blueGrey,\n];\n\nconst shades: (300 | 600)[] = [300, 600];\n\nexport const makeCountryColors = (isoCodes: string[]): Map<string, string> => {\n  const results = new Map<string, string>();\n  const pickedColors = new Set<string>();\n\n  isoCodes.forEach(country => {\n    let picked = \"undefined\";\n\n    let hash = murmur3(country);\n    // do multiple hash rounds to avoid collisions,\n    // unless collisions are unavoidable with many countries\n    do {\n      hash = murmur3(hash.toString());\n      const color: typeof colors[0] = colors[hash % colors.length];\n      const shade: keyof typeof colors[0] = shades[hash % shades.length];\n\n      picked = color[shade];\n \n    } while (pickedColors.has(picked) && pickedColors.size < colors.length * shades.length);\n   \n\n    pickedColors.add(picked);\n    results.set(country, picked);\n  });\n\n  return results;\n};\n","import { IDataFrame } from \"data-forge\";\nimport { createSelector } from \"reselect\";\n\nimport { makeCountryColors } from \"../components/countryColors\";\nimport { LoadedState } from \"../store\";\nimport { Row } from \"../store/data\";\n\nexport const dataSelector = (state: LoadedState): IDataFrame<number, Row> => state.data;\nexport const pickedCountriesSelector = (state: LoadedState): string[] =>\n  state.ui.pickedCountries;\nexport const colorMapSelector = createSelector(\n  pickedCountriesSelector,\n  makeCountryColors,\n);\n\nexport const countryNameSelector = createSelector(\n  dataSelector,\n  (data: IDataFrame): Map<string, string> => {\n    const kvPairs: [string, string][] = data\n      .groupBy(row => row.isoCode)\n      .select(group => ({\n        code: group.first().isoCode,\n        name: group.first().location,\n      }))\n      .toArray()\n      .map(({ code, name }) => [code, name]);\n    return new Map(\n      kvPairs,\n    );\n  }\n);\n","import {\n  Box,\n  createStyles,\n  Paper,\n  PaperProps,\n  useMediaQuery,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\n\nconst withPadding = createStyles({\n  paperPadding: {\n    padding: \"30px\",\n  },\n});\n\nconst spacedPaper: React.FC<PaperProps & WithStyles<typeof withPadding>> = (\n  props: PaperProps & WithStyles<typeof withPadding>,\n) => {\n  // eslint:disable\n  const wide = useMediaQuery(\"(min-width:600px)\"); // eslint-disable-line react-hooks/rules-of-hooks\n  return (\n    <Box my={3} py={3}>\n      <Paper\n        elevation={props.elevation}\n        className={wide ? props.classes.paperPadding : \"\"}\n      >\n        {props.children}\n      </Paper>\n    </Box>\n  );\n};\n\nexport const SpacedPaper = withStyles(withPadding)(spacedPaper);\n","import { useMediaQuery } from \"@material-ui/core\";\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\nimport { IDataFrame } from \"data-forge\";\nimport Highcharts, { SeriesOptionsType } from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createSelector } from \"reselect\";\n\nimport { makeCaseChartLogSettingChangedAction } from \"../actions\";\nimport {\n  colorMapSelector,\n  countryNameSelector,\n  dataSelector,\n  pickedCountriesSelector,\n} from \"../selectors\";\nimport { LoadedState } from \"../store\";\nimport { Row } from \"../store/data\"\nimport { SpacedPaper } from \"./SpacedPaper\";\n\nconst selectDataToRenderIntoChart = (dataSelector: (row: Row) => number) => (\n  pickedCountries: string[],\n  data: IDataFrame,\n  colorMap: Map<string, string>,\n  countryNameMap: Map<string, string>,\n): SeriesOptionsType[] =>\n  pickedCountries.map((pickedCountry: string) => ({\n    name: countryNameMap.get(pickedCountry) || \"\",\n    data: data\n      .where(row => row.isoCode === pickedCountry)\n      .toArray()\n      .map(row => [row.date.getTime(), dataSelector(row)]),\n    type: \"line\",\n    color: colorMap.get(pickedCountry),\n  }));\n\nconst makeHighchartsOptions = ({\n  logAxisSetting,\n  cases,\n  wide,\n  yAxisLabel,\n}: {\n  logAxisSetting: \"linear\" | \"logarithmic\";\n  cases: SeriesOptionsType[];\n  wide: boolean;\n  yAxisLabel: string;\n}): Highcharts.Options => ({\n  chart: {\n    height: wide ? \"50%\" : \"100%\",\n    zoomType: \"x\",\n  },\n  title: {\n    text: \"\",\n  },\n  xAxis: {\n    type: \"datetime\",\n    title: {\n      text: \"Date\",\n    },\n    labels: {\n      step: 1,\n    },\n  },\n  yAxis: {\n    type: logAxisSetting,\n    title: {\n      text: yAxisLabel,\n    },\n  },\n  series: cases,\n  credits: {\n    enabled: false,\n  },\n});\n\nexport const CaseChart = (): JSX.Element => {\n  const cases = useSelector(\n    createSelector(\n      pickedCountriesSelector,\n      dataSelector,\n      colorMapSelector,\n      countryNameSelector,\n      selectDataToRenderIntoChart(\n        row => (row.totalCases * 1000000) / row.population,\n      ),\n    ),\n  );\n  const logAxisSetting = useSelector(\n    (state: LoadedState) => state.ui.caseChart.logSetting,\n  );\n\n  const dispatch = useDispatch();\n  const handleAxisLogarithmicToggle = (_: React.MouseEvent, newSetting: string | null): void => {\n    if (!newSetting) {\n      return;\n    }\n\n    if (!(newSetting === \"linear\" || newSetting === \"logarithmic\")) {\n      return;\n    }\n\n    dispatch(makeCaseChartLogSettingChangedAction(newSetting));\n  };\n\n  const wide = useMediaQuery(\"(min-width:600px)\");\n  const options = makeHighchartsOptions({ logAxisSetting, cases, wide, yAxisLabel: \"Cases per 1M population\" });\n\n  return (\n    <SpacedPaper id=\"cases\" elevation={3}>\n      <h2>Cases over Time</h2>\n      <ToggleButtonGroup\n        value={logAxisSetting}\n        onChange={handleAxisLogarithmicToggle}\n        exclusive\n        aria-label=\"log axis setting\"\n      >\n        <ToggleButton value=\"linear\" aria-label=\"linear\">\n          linear\n        </ToggleButton>\n        <ToggleButton value=\"logarithmic\" aria-label=\"logarithmic\">\n          log\n        </ToggleButton>\n\n      </ToggleButtonGroup>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </SpacedPaper>\n  );\n};\n\nexport const DeathChart = (): JSX.Element => {\n  const cases = useSelector(\n    createSelector(\n      pickedCountriesSelector,\n      dataSelector,\n      colorMapSelector,\n      countryNameSelector,\n      selectDataToRenderIntoChart(\n        row => (row.totalDeaths * 1000000) / row.population,\n      ),\n    ),\n  );\n  const logAxisSetting = useSelector(\n    (state: LoadedState) => state.ui.caseChart.logSetting,\n  );\n\n  const wide = useMediaQuery(\"(min-width:600px)\");\n  const options = makeHighchartsOptions({ logAxisSetting, cases, wide, yAxisLabel: \"Deaths per 1M population\" });\n\n  const dispatch = useDispatch();\n  const handleAxisLogarithmicToggle = (_: React.MouseEvent, newSetting: string | null): void => {\n    if (!newSetting) {\n      return;\n    }\n\n    if (!(newSetting === \"linear\" || newSetting === \"logarithmic\")) {\n      return;\n    }\n\n    dispatch(makeCaseChartLogSettingChangedAction(newSetting));\n  };\n\n  return (\n    <SpacedPaper id=\"cases\" elevation={3}>\n      <h2>Deaths over Time</h2>\n      <ToggleButtonGroup\n        value={logAxisSetting}\n        onChange={handleAxisLogarithmicToggle}\n        exclusive\n        aria-label=\"log axis setting\"\n      >\n        <ToggleButton value=\"linear\" aria-label=\"linear\">\n          linear\n        </ToggleButton>\n        <ToggleButton value=\"logarithmic\" aria-label=\"logarithmic\">\n          log\n        </ToggleButton>\n      </ToggleButtonGroup>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </SpacedPaper>\n  );\n};\n","import { Checkbox, List, ListItem, TextField } from \"@material-ui/core\";\nimport { IDataFrame } from \"data-forge\";\nimport { includes } from \"lodash/fp\";\nimport React, { CSSProperties } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createSelector } from \"reselect\";\n\nimport {\n  makeCountryToggleAction,\n  makeCoutrySearchChangedAction,\n} from \"../actions\";\nimport { LoadedState } from \"../store\";\nimport { SpacedPaper } from \"./SpacedPaper\";\n\nconst dataSelector = (state: LoadedState): IDataFrame => state.data;\nconst pickedCountriesSelector = (state: LoadedState): string[] =>\n  state.ui.pickedCountries;\nconst searchTextSelector = (state: LoadedState): string => state.ui.searchText;\n\nconst countrySelector = createSelector(\n  dataSelector,\n  pickedCountriesSelector,\n  searchTextSelector,\n  (data: IDataFrame, pickedCountries: string[], searchText) =>\n    data\n      .select(\n        ({ isoCode, location }: { isoCode: string; location: string }) => ({\n          isoCode,\n          location,\n        }),\n      )\n      .distinct(row => row.isoCode)\n      .orderBy(row => row.location)\n      .toPairs()\n      .map(([_, row]) => ({\n        ...row,\n        active: includes(row.isoCode)(pickedCountries),\n      }))\n      .filter(\n        row =>\n          row.active ||\n          (searchText !== \"\" &&\n            row.location.toLowerCase().startsWith(searchText.toLowerCase())),\n      ),\n);\n\nexport const CountryPicker = (): JSX.Element => {\n  const dispatch = useDispatch();\n\n  const autoWidthItem: CSSProperties = {\n    width: \"180px\",\n  };\n\n  const allCountries = useSelector(countrySelector).map(\n    ({ isoCode, location, active }) => (\n      <ListItem\n        button\n        key={isoCode}\n        onClick={(_): void => { dispatch(makeCountryToggleAction(isoCode)); }}\n        style={autoWidthItem}\n      >\n        <Checkbox\n          edge=\"start\"\n          checked={active}\n          tabIndex={-1}\n          disableRipple\n          inputProps={{ \"aria-labelledby\": isoCode }}\n        />\n        {location}\n      </ListItem>\n    ),\n  );\n\n  const searchText = useSelector((state: LoadedState) => state.ui.searchText);\n\n  const flexContainer: CSSProperties = {\n    display: \"flex\",\n    padding: 0,\n    flexWrap: \"wrap\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  };\n\n  return (\n    <SpacedPaper elevation={3}>\n      <label>\n        <br />\n        <TextField\n          type=\"text\"\n          name=\"search\"\n          placeholder=\"Search Countries\"\n          onChange={\n            (e): void => { dispatch(makeCoutrySearchChangedAction(e.target.value)); }\n          }\n          value={searchText}\n        />\n        <List id=\"countries\" style={flexContainer}>\n          {allCountries}\n        </List>\n      </label>\n    </SpacedPaper>\n  );\n};\n","import { Checkbox } from \"@material-ui/core\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\nimport { IDataFrame } from \"data-forge\";\nimport { includes } from \"lodash/fp\";\nimport MaterialTable, { Column, Icons } from \"material-table\";\nimport React from \"react\";\nimport { forwardRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { makeDataTableDateSelectionChangedAction } from \"../actions\";\nimport { makeCountryToggleAction } from \"../actions\";\nimport { LoadedState } from \"../store\";\nimport { Row } from \"../store/data\";\nimport { SpacedPaper } from \"./SpacedPaper\";\n\ntype TableRow = Row & {\n  \"testsPer1MPopulation\": string;\n}\n\nconst tableIcons: Icons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst datesAreOnSameDay = (first: Date, second: Date): boolean =>\n  first.getFullYear() === second.getFullYear() &&\n  first.getMonth() === second.getMonth() &&\n  first.getDate() === second.getDate();\n\nexport const DataTable = (): JSX.Element => {\n  const data = useSelector((state: LoadedState) => state.data);\n\n  const pickedCountriesSelector = (state: LoadedState): string[] =>\n    state.ui.pickedCountries;\n  const pickedCountries = useSelector(pickedCountriesSelector);\n  const isSelected = (isoCode: string): boolean => includes(isoCode)(pickedCountries);\n\n  const dateToDisplay = useSelector(\n    (state: LoadedState) => state.ui.dataTable.dateToDisplay,\n  );\n\n  const today = new Date();\n  const dateOffset = 24 * 60 * 60 * 1000 * 1; // 1 day\n  const yesterday = new Date();\n  yesterday.setTime(yesterday.getTime() - dateOffset);\n\n  const selectedDate = dateToDisplay === \"today\" ? today : yesterday;\n\n  const findFirstRowMachingDate = (\n    group: IDataFrame<number, Row>,\n    date: Date,\n    field: keyof Row,\n  ): string | number | Date | undefined => {\n    const filtered: IDataFrame<\n      number,\n      Row\n    > = group.where((row: { date: Date }) =>\n      datesAreOnSameDay(row.date, selectedDate),\n    );\n\n    if (filtered.count() === 0) {\n      const filteredByAnythingPresent = group\n        .orderByDescending(row => row.date)\n        .where((row: Row) => row[field] !== undefined);\n\n      if (filteredByAnythingPresent.count() === 0) {\n        return undefined;\n      }\n\n      return filteredByAnythingPresent.first()[field];\n    }\n\n    return filtered.first()[field];\n  };\n\n  const tableData = data\n    .orderByDescending((row: Row) => row.date)\n    .groupBy((row: Row) => row.isoCode)\n    .select(group => ({\n      date: group.first().date,\n      isoCode: group.first().isoCode,\n      location: group.first().location,\n      totalCases: findFirstRowMachingDate(group, selectedDate, \"totalCases\") as number,\n      newCases: findFirstRowMachingDate(group, selectedDate, \"newCases\") as number,\n      totalTests: group\n        .getSeries(\"totalTests\")\n        .select(x => (x ? x : 0))\n        .max(),\n      population: group.first().population,\n    }))\n    .toArray()\n    .map(row => ({\n      ...row,\n      date: row.date.toString(),\n      testsPer1MPopulation: Math.round(\n        (row.totalTests * 1000000) / row.population,\n      ),\n    }));\n\n  const numberWithCommas = (field: keyof typeof tableData[0]) => (rowData: typeof tableData[0]): string =>\n    rowData[field].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n\n  const columns: Column<typeof tableData[0]>[] = [\n    {\n      title: \"Country\",\n      field: \"location\",\n      render: (row: typeof tableData[0]): JSX.Element => (\n        <>\n          <Checkbox\n            checked={isSelected(row.isoCode)}\n            onChange={(_): void => { dispatch(makeCountryToggleAction(row.isoCode)); }}\n          />{\" \"}\n          {row.location}\n        </>\n      ),\n    },\n    {\n      title: \"Total Cases\",\n      field: \"totalCases\",\n      type: \"numeric\",\n      defaultSort: \"desc\",\n      render: numberWithCommas(\"totalCases\"),\n    },\n    {\n      title: \"New Cases\",\n      field: \"newCases\",\n      type: \"numeric\",\n      render: numberWithCommas(\"newCases\"),\n    },\n    {\n      title: \"Tests per 1M population\",\n      field: \"testsPer1MPopulation\",\n      type: \"numeric\",\n      render: numberWithCommas(\"testsPer1MPopulation\"),\n    },\n    {\n      title: \"Total Tests\",\n      field: \"totalTests\",\n      type: \"numeric\",\n      render: numberWithCommas(\"totalTests\"),\n    },\n  ];\n\n  const dispatch = useDispatch();\n  const handleDateSelection = (_: React.MouseEvent, newSetting: string | null): void => {\n    if (!newSetting) {\n      return;\n    }\n\n    if (!(newSetting === \"today\" || newSetting === \"yesterday\")) {\n      return;\n    }\n\n    dispatch(makeDataTableDateSelectionChangedAction(newSetting));\n  };\n\n  const options = {\n    fixedColumns: {\n      left: 1,\n      right: 0,\n    },\n  };\n\n  return (\n    <SpacedPaper>\n      <ToggleButtonGroup\n        value={dateToDisplay}\n        onChange={handleDateSelection}\n        exclusive\n        aria-label=\"log axis setting\"\n      >\n        <ToggleButton value=\"today\" aria-label=\"today\">\n          today\n        </ToggleButton>\n        <ToggleButton value=\"yesterday\" aria-label=\"yesterday\">\n          yesterday\n        </ToggleButton>\n      </ToggleButtonGroup>\n      <MaterialTable\n        columns={columns}\n        data={tableData}\n        title=\"Country Table\"\n        icons={tableIcons}\n        options={options}\n      ></MaterialTable>\n    </SpacedPaper>\n  );\n};\n","import { fromCSV, IDataFrame, Series } from \"data-forge\";\nimport { Observable, of } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\n\nexport interface Row {\n  date: Date;\n  isoCode: string;\n  location: string;\n  totalCases: number;\n  newCases: number;\n  totalDeaths: number;\n  newDeaths: number;\n  totalTests: number;\n  newTests: number;\n  population: number;\n  locationType: \"country\" | \"us-state\";\n}\n\ninterface CovidRow {\n  date: Date;\n  isoCode: string;\n  location: string;\n  totalCases: number;\n  newCases: number;\n  totalDeaths: number;\n  newDeaths: number;\n  totalTests: number;\n  newTests: number;\n}\n\ninterface PopulationRow {\n  isoCode: string;\n  population: number;\n  year: number;\n}\n\nexport const parseCovidCSV = (data: string): Observable<IDataFrame> =>\n  of(fromCSV(data)).pipe(\n    map((df: IDataFrame): IDataFrame => df.renameSeries({\n      \"iso_code\": \"isoCode\",\n      \"total_cases\": \"totalCases\",\n      \"new_cases\": \"newCases\",\n      \"total_deaths\": \"totalDeaths\",\n      \"new_deaths\": \"newDeaths\",\n      \"total_tests\": \"totalTests\",\n      \"new_tests\": \"newTests\",\n    })),\n    map((df: IDataFrame): IDataFrame => df.parseDates(\"date\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"totalCases\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"newCases\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"totalDeaths\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"newDeaths\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"totalTests\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"newTests\")),\n  );\n\nexport const parsePopulationCSV = (data: string): Observable<IDataFrame> =>\n  of(fromCSV(data)).pipe(\n    map((df: IDataFrame): IDataFrame => df.parseInts([\"Value\", \"Year\"])),\n    map(\n      (df: IDataFrame): IDataFrame =>\n        df.renameSeries({\n          Year: \"year\",\n          \"Country Code\": \"isoCode\",\n          Value: \"population\",\n        }),\n    ),\n  );\n\nconst replaceEmptyBy0 = (field: string): string => (field === \"\" ? \"0\" : field);\n\nexport const parseUsCSV = (data: string): Observable<IDataFrame> =>\n  of(fromCSV(data)).pipe(\n    map((df: IDataFrame): IDataFrame => df.parseDates(\"date\", \"YYYYMMDD\")),\n    map(\n      (df: IDataFrame): IDataFrame =>\n        df.renameSeries({\n          state: \"isoCode\",\n          positive: \"totalCases\",\n          positiveIncrease: \"newCases\",\n          death: \"totalDeaths\",\n          deathIncrease: \"newDeaths\",\n          totalTestResults: \"totalTests\",\n          totalTestResultsIncrease: \"newTests\",\n        }),\n    ),\n    map(\n      (df: IDataFrame): IDataFrame =>\n        df.transformSeries({\n          totalCases: replaceEmptyBy0,\n          newCases: replaceEmptyBy0,\n          totalDeaths: replaceEmptyBy0,\n          newDeaths: replaceEmptyBy0,\n          totalTests: replaceEmptyBy0,\n          newTests: replaceEmptyBy0,\n        }),\n    ),\n    map(\n      (df: IDataFrame): IDataFrame =>\n        df.parseInts([\n          \"totalCases\",\n          \"newCases\",\n          \"totalDeaths\",\n          \"newDeaths\",\n          \"totalTests\",\n          \"newTests\",\n        ]),\n    ),\n  );\n\nexport const parseUsStateInfoCSV = (data: string): Observable<IDataFrame> =>\n  of(fromCSV(data)).pipe(\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"population\")),\n  );\n\nexport const transformCsvData = (data: IDataFrame): IDataFrame => data;\n\ntype Maximums = Map<string, number>;\n\ntype Accumulator = {\n  maximums: Maximums;\n  result: IDataFrame;\n};\n\nconst computeLatestPopulation = (population: IDataFrame): IDataFrame =>\n  population\n    .groupBy(row => row.isoCode)\n    .select(group => {\n      const { year: maxYear } = group.summarize({ year: Series.max });\n      const pop = group.where(row => row.year === maxYear).first().population;\n      return {\n        isoCode: group.first().isoCode,\n        population: pop,\n      };\n    })\n    .inflate();\n\nexport const mergeData = (\n  covid: IDataFrame,\n  population: IDataFrame,\n  us: IDataFrame,\n  stateInfo: IDataFrame,\n): IDataFrame<number, Row> => {\n  const populationLatest = computeLatestPopulation(population);\n\n  const joinedUsData: IDataFrame<number, Row> = us.join(\n    stateInfo,\n    row => row.isoCode,\n    row => row.code,\n    (dataRow, infoRow) => ({\n      ...dataRow,\n      location: infoRow ? infoRow.state : \"unknown location name\",\n      population: infoRow.population,\n      locationType: \"us-state\",\n    }),\n  );\n\n  const joinedWorldData: IDataFrame<number, Row> = covid.join(\n    populationLatest,\n    (covid: CovidRow) => covid.isoCode,\n    (pop: PopulationRow) => pop.isoCode,\n    (covid: CovidRow, pop: PopulationRow | null) => ({\n      ...covid,\n      population: pop ? pop.population : 0,\n      locationType: \"country\",\n    }),\n  );\n\n  const combined = joinedUsData.concat(joinedWorldData);\n\n  return combined;\n};\n\nexport const smooth = (amount: number, series: number[][]): number[][] => {\n  amount = Math.ceil(Math.abs(amount));\n  const results: Array<Array<number>> = [];\n  for (let i = 0; i < series.length; i++) {\n    const [x] = series[i];\n\n    let valuesInAverage = 0;\n    let sum = 0;\n    for (let j = amount * -1; j <= amount; j++) {\n      if (series[i + j] === undefined) {\n        // ignore edges\n        continue;\n      }\n\n      sum = sum + series[i + j][1];\n      valuesInAverage = valuesInAverage + 1;\n    }\n\n    results.push([x, sum / valuesInAverage]);\n  }\n  return results;\n};\n","import { useMediaQuery } from \"@material-ui/core\";\nimport { IDataFrame } from \"data-forge\";\nimport Highcharts, { SeriesOptionsType } from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { createSelector } from \"reselect\";\n\nimport {\n  colorMapSelector,\n  countryNameSelector,\n  dataSelector,\n  pickedCountriesSelector,\n} from \"../selectors\";\nimport { smooth } from \"../store/data\";\nimport { SpacedPaper } from \"./SpacedPaper\";\n\nconst deathCurveSelector = (\n  pickedCountries: string[],\n  data: IDataFrame,\n  colorMap: Map<string, string>,\n  countryNameMap: Map<string, string>,\n): SeriesOptionsType[] =>\n  pickedCountries.map(country => {\n    const filteredByCountry = data.where(row => row.isoCode === country);\n\n    const deaths = filteredByCountry.select(row => ({\n      isoCode: row.isoCode,\n      totalDeaths: row.totalDeaths,\n      population: row.population,\n      newDeaths: row.newDeaths,\n    }));\n\n    return {\n      name: countryNameMap.get(country),\n      type: \"line\",\n      color: colorMap.get(country),\n      data: smooth(\n        7,\n        deaths\n          .toArray()\n          .map(row => [\n            row.totalDeaths / row.population,\n            row.newDeaths / row.population,\n          ])\n          .sort(([a, _], [b, __]) => (a < b ? -1 : 1)),\n      ).filter(([x, y]) => x !== 0 && y !== 0),\n    };\n  });\n\nexport const DeathCurve = (): JSX.Element => {\n  const deaths = useSelector(\n    createSelector(\n      pickedCountriesSelector,\n      dataSelector,\n      colorMapSelector,\n      countryNameSelector,\n      deathCurveSelector,\n    ),\n  );\n\n  const wide = useMediaQuery(\"(min-width:600px)\");\n\n  const options: Highcharts.Options = {\n    title: {\n      text: \"\",\n    },\n    chart: {\n      height: wide ? \"50%\" : \"100%\",\n      zoomType: \"xy\",\n    },\n    xAxis: {\n      type: \"logarithmic\",\n      title: {\n        text: \"Fraction of dead population\",\n      },\n      min: 1e-6,\n      tickInterval: 0.1,\n      labels: {\n        step: wide ? 1 : 5,\n        formatter: function (): string {\n          return this.value.toExponential(1);\n        },\n        rotation: -45,\n      },\n    },\n    yAxis: {\n      type: \"logarithmic\",\n      title: {\n        text: \"Fraction of dead population per day (smoothed)\",\n      },\n      tickInterval: 0.1,\n      labels: {\n        step: 1,\n        formatter: function (): string {\n          return this.value.toExponential(1);\n        },\n      },\n    },\n    series: deaths,\n    credits: {\n      enabled: false,\n    },\n  };\n\n  return (\n    <SpacedPaper id=\"deathcurve\" elevation={3}>\n      <h2>\n        Robins Death Curve\n        <span role=\"img\" aria-label=\"tm\">\n          ™️\n        </span>\n      </h2>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </SpacedPaper>\n  );\n};\n","import { FormControlLabel, FormGroup, Grid, Switch } from \"@material-ui/core\";\nimport { red } from \"@material-ui/core/colors\";\nimport { IDataFrame } from \"data-forge\";\nimport Highcharts, { SeriesOptionsType } from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport { max as lMax, round as lRound } from \"lodash\"\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createSelector } from \"reselect\";\n\nimport { makeSyncAxisToggleAction, SyncAxisToggleAction } from \"../actions\";\nimport {\n  colorMapSelector,\n  countryNameSelector,\n  dataSelector,\n  pickedCountriesSelector,\n} from \"../selectors\";\nimport { LoadedState } from \"../store\";\nimport { smooth } from \"../store/data\";\nimport { Row } from \"../store/data\";\nimport { SpacedPaper } from \"./SpacedPaper\";\n\nconst newSelector = (selector: (row: Row) => number, title: string) => (\n  pickedCountries: string[],\n  data: IDataFrame,\n  colorMap: Map<string, string>,\n  countryNameMap: Map<string, string>,\n  isSynced: boolean,\n): JSX.Element[] => {\n  const maxValue =\n    lMax(\n      data\n        .where(\n          (row: Row) => pickedCountries.includes(row.isoCode))\n        .toArray()\n        .map((row: Row) => selector(row)))\n    || 1000;\n\n  const order = Math.pow(10, Math.floor(Math.log10(maxValue)));\n  const yAxisMax = lRound(maxValue + (order / 2), -Math.log10(order));\n\n  return pickedCountries.map(country => {\n    const countryData = {\n      name: countryNameMap.get(country),\n      type: \"column\",\n      color: colorMap.get(country),\n      data: data\n        .where(\n          (row: Row) =>\n            row.isoCode === country && row.date > new Date(2020, 2, 14),\n        )\n        .toArray()\n        .map(row => [row.date.getTime(), selector(row)])\n        .sort(),\n    };\n\n    const movingAverage: SeriesOptionsType = {\n      name: \"7 day average\",\n      data: smooth(3, countryData.data),\n      type: \"line\",\n      color: red[900],\n      enableMouseTracking: false,\n    };\n\n    const options: Highcharts.Options = {\n      chart: {\n        height: \"300\",\n        width: \"300\",\n      },\n      title: {\n        text: countryNameMap.get(country),\n      },\n      xAxis: {\n        type: \"datetime\",\n        tickInterval: 7 * 24 * 3600 * 1000,\n      },\n      yAxis: {\n        min: 0,\n        max: isSynced ? yAxisMax : undefined,\n        title: {\n          text: title,\n        },\n      },\n      legend: {\n        enabled: false,\n      },\n      series: [countryData as SeriesOptionsType, movingAverage],\n      credits: {\n        enabled: false,\n      },\n    };\n\n    return (\n      <Grid item key={country}>\n        <HighchartsReact highcharts={Highcharts} options={options} />\n      </Grid>\n    );\n  })\n};\n\nconst isSyncedSelector = (state: LoadedState): boolean => state.ui.caseChart.syncAxes;\n\nconst SyncSwitch = (): JSX.Element => {\n  const isSynced = useSelector(isSyncedSelector);\n  const dispatch = useDispatch();\n\n  const handleChange = (): SyncAxisToggleAction => dispatch(makeSyncAxisToggleAction());\n\n  return (<FormGroup row>\n    <FormControlLabel\n      control={<Switch checked={isSynced} onChange={handleChange} name=\"syncAxes\" />}\n      label=\"Sync Axis Range\"\n    /></FormGroup>);\n}\n\nexport const NewCaseChart = (): JSX.Element => {\n  const countryCharts = useSelector(\n    createSelector(\n      pickedCountriesSelector,\n      dataSelector,\n      colorMapSelector,\n      countryNameSelector,\n      isSyncedSelector,\n      newSelector(\n        (row: Row) => (row.newCases * 1000000) / row.population,\n        \"daily new cases per 1M population\",\n      ),\n    ),\n  );\n\n  return (\n    <SpacedPaper elevation={3} id=\"new-cases\">\n      <h2>New Cases</h2>\n      <SyncSwitch />\n      <Grid container justify=\"center\" spacing={0}>\n        {countryCharts}\n      </Grid>\n    </SpacedPaper>\n  );\n};\n\nexport const NewDeathChart = (): JSX.Element => {\n  const countryCharts = useSelector(\n    createSelector(\n      pickedCountriesSelector,\n      dataSelector,\n      colorMapSelector,\n      countryNameSelector,\n      isSyncedSelector,\n      newSelector(\n        (row: Row) => (row.newDeaths * 1000000) / row.population,\n        \"daily new deaths per 1M population\",\n      ),\n    ),\n  );\n\n  return (\n    <SpacedPaper elevation={3} id=\"new-deaths\">\n      <h2>New Deaths</h2>\n      <SyncSwitch />\n      <Grid container justify=\"center\" spacing={0}>\n        {countryCharts}\n      </Grid>\n    </SpacedPaper>\n  );\n};\n","import React from \"react\";\n\nimport { CaseChart, DeathChart } from \"./CaseChart\";\nimport { CountryPicker } from \"./CountryPicker\";\nimport { DataTable } from \"./DataTable\";\nimport { DeathCurve } from \"./DeathCurve\";\nimport { NewCaseChart, NewDeathChart } from \"./NewCaseChart\";\n\nconst centered: React.CSSProperties = { textAlign: \"center\" };\n\nexport const Loaded = (): JSX.Element => {\n  return (\n    <div>\n      <h1>Covid Stats</h1>\n      <DataTable />\n      <CountryPicker />\n      <NewCaseChart />\n      <NewDeathChart />\n      <CaseChart />\n      <DeathChart />\n      <DeathCurve />\n      <div style={centered}>\n        data from{\" \"}\n        <a href=\"https://covid.ourworldindata.org\">Our World In Data</a>,{\" \"}\n        <a href=\"https://github.com/datasets/population\">\n          datahub.io via the World Bank\n        </a>{\" \"}\n        , <a href=\"https://covidtracking.com/\">The Covid Tracking Project</a>{\" \"}\n        and <a href=\"https://civil.services\">Civil Services</a>\n      </div>\n    </div>\n  );\n};\n","import { LinearProgress } from \"@material-ui/core\";\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { LoadingState } from \"../store\";\nimport { SpacedPaper } from \"./SpacedPaper\";\n\nexport const Loading = (): JSX.Element => {\n  const progress = useSelector((state: LoadingState) => state.progress);\n\n  const normalize = ({ done, total }: { done: number; total: number }): number =>\n    (done / total) * 100;\n\n  return (\n    <SpacedPaper>\n      <div>\n        <h2>loading world covid data</h2>\n        <LinearProgress\n          variant=\"determinate\"\n          value={normalize(progress.covid)}\n        />\n      </div>\n      <div>\n        <h2>loading US covid data</h2>\n        <LinearProgress variant=\"determinate\" value={normalize(progress.us)} />\n      </div>\n      <div>\n        <h2>loading world population data</h2>\n        <LinearProgress\n          variant=\"determinate\"\n          value={normalize(progress.population)}\n        />\n      </div>\n      <div>\n        <h2>loading US state data</h2>\n        <LinearProgress\n          variant=\"determinate\"\n          value={normalize(progress.stateInfo)}\n        />\n      </div>\n    </SpacedPaper>\n  );\n};\n","import \"./App.css\";\nimport \"./highchartsTheme\";\nimport \"github-fork-ribbon-css/gh-fork-ribbon.css\";\n\nimport Box from \"@material-ui/core/Box\";\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { State } from \"../store\";\nimport { assertNever } from \"../utils\";\nimport { Error } from \"./Error\";\nimport { Loaded } from \"./Loaded\";\nimport { Loading } from \"./Loading\";\n\nexport const App = (): JSX.Element => {\n  const type = useSelector<State, State[\"type\"]>(state => state.type);\n\n  return (\n    <>\n      <a\n        className=\"github-fork-ribbon right-top\"\n        href=\"https://github.com/jupp0r/covid-stats\"\n        data-ribbon=\"Fork me on GitHub\"\n        title=\"Fork me on GitHub\"\n      >\n        Fork me on GitHub\n      </a>\n      <Box px={3} py={3} my={3} textAlign=\"center\">\n        {((type: State[\"type\"]): JSX.Element => {\n          switch (type) {\n            case \"loading\":\n              return <Loading />;\n            case \"loaded\":\n              return <Loaded />;\n            case \"error\":\n              return <Error />;\n            default:\n              return assertNever(type);\n          }\n        })(type)}\n      </Box>\n    </>\n  );\n};\n","import { IDataFrame } from \"data-forge\";\nimport { merge,Observable } from \"rxjs\";\nimport { filter, flatMap, map } from \"rxjs/operators\";\n\nimport { Action, DownloadCategory,makeProgressAction, ProgressAction } from \"../actions\";\n\nexport type DataResult =\n  | { type: \"success\"; data: IDataFrame }\n  | { type: \"error\"; reason: string };\n\nexport interface Progress {\n  done: number;\n  total: number;\n}\n\nconst fromXhr = (\n  url: string,\n): {\n  progress: Observable<Progress>;\n  result: Observable<string>;\n} => {\n  const xhr = new XMLHttpRequest();\n  xhr.responseType = \"text\";\n  const progress$ = new Observable<Progress>((subscriber): void => {\n    xhr.addEventListener(\"progress\", ev =>\n      subscriber.next({\n        done: ev.loaded,\n        total: ev.total,\n      }),\n    );\n  });\n\n  const result$ = new Observable<string>(subscriber => {\n    xhr.addEventListener(\"readystatechange\", ev => {\n      if (xhr.readyState !== 4) {\n        return;\n      }\n\n      if (xhr.status === 200) {\n        subscriber.next(xhr.response);\n        subscriber.complete();\n      } else {\n        subscriber.error(xhr.response);\n      }\n    });\n  });\n\n  xhr.open(\"GET\", url);\n  xhr.send();\n  return { progress: progress$, result: result$ };\n};\n\nexport const makeProgressStream = (\n  action$: Observable<Action>,\n  url: string,\n  csvParser: (data: string) => Observable<IDataFrame>,\n  target: DownloadCategory,\n): Observable<ProgressAction | DataResult> =>\n  action$.pipe(\n    filter((action: Action) => action.type === \"initialized\"),\n    flatMap(() => {\n      const { progress, result } = fromXhr(url);\n      const progress$ = progress.pipe(\n        map((update: Progress) =>\n          makeProgressAction({ ...update, target }),\n        ),\n      );\n\n      const result$ = result.pipe(\n        flatMap(csvParser),\n        map((data: IDataFrame): DataResult => ({ type: \"success\", data })),\n      );\n\n      return merge(progress$, result$);\n    }),\n  );\n","import { ofType } from 'redux-observable';\nimport { combineEpics } from \"redux-observable\";\nimport { merge,Observable, zip } from \"rxjs\";\nimport { filter, map } from \"rxjs/operators\";\n\nimport { Action, ProgressAction } from \"../actions\";\nimport {\n  mergeData,\n  parseCovidCSV,\n  parsePopulationCSV,\n  parseUsCSV,\n  parseUsStateInfoCSV,\n} from \"../store/data\";\nimport { DataResult,makeProgressStream } from \"./util\";\n\nexport const startLoadingEpic = (\n  action$: Observable<Action>,\n): Observable<Action> => {\n  const covidData$ = makeProgressStream(\n    action$,\n    \"https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv\",\n    parseCovidCSV,\n    \"covid\",\n  );\n\n  const populationData$ = makeProgressStream(\n    action$,\n    \"https://raw.githubusercontent.com/datasets/population/master/data/population.csv\",\n    parsePopulationCSV,\n    \"population\"\n  );\n\n  const usData$ = makeProgressStream(\n    action$,\n    \"https://covidtracking.com/api/v1/states/daily.csv\",\n    parseUsCSV,\n    \"us\",\n  );\n\n  const stateInfo$ = makeProgressStream(\n    action$,\n    \"https://raw.githubusercontent.com/CivilServiceUSA/us-states/master/data/states.csv\",\n    parseUsStateInfoCSV,\n    \"stateInfo\",\n  );\n\n  const combinedProgress$: Observable<ProgressAction> = merge(\n    covidData$,\n    populationData$,\n    usData$,\n    stateInfo$,\n  ).pipe(\n    ofType(\"progress\"),\n  );\n\n  const filterForResult = (data$: Observable<ProgressAction | DataResult>): Observable<ProgressAction | DataResult> =>\n    data$.pipe(filter(item => item.type === \"success\"));\n\n  const combinedResults$: Observable<Action> = zip(\n    filterForResult(covidData$),\n    filterForResult(populationData$),\n    filterForResult(usData$),\n    filterForResult(stateInfo$),\n  ).pipe(\n    map(\n      ([covid, population, us, stateInfo]): Action => {\n        if (\n          covid.type === \"success\" &&\n          population.type === \"success\" &&\n          us.type === \"success\" &&\n          stateInfo.type === \"success\"\n        ) {\n          return {\n            type: \"fetch-success\",\n            response: mergeData(covid.data, population.data, us.data, stateInfo.data),\n          };\n        } else {\n          return {\n            type: \"error-during-fetch\",\n            message: `Error: ${covid} or ${population} failed to fetch`,\n          };\n        }\n      },\n    ),\n  );\n\n  return merge(combinedProgress$, combinedResults$);\n};\n\nexport const rootEpic = combineEpics(startLoadingEpic);\n","import { filter,includes } from \"lodash/fp\";\n\nimport { Action } from \"../actions\";\nimport { initialState, LoadedState, LoadingState,State } from \"../store\";\nimport { transformCsvData } from \"../store/data\";\nimport { assertNever } from \"../utils\";\nimport { getPickedCountriesFromUrl, updateCountriesInPathName } from \"./router\";\n\nconst errorReducer = (state: State, action: Action): State => state;\n\nconst loadingReducer = (state: LoadingState, action: Action): State => {\n  switch (action.type) {\n    case \"fetch-success\":\n      const pickedCountries = getPickedCountriesFromUrl(state.routing.url);\n      return {\n        ...state,\n        type: \"loaded\",\n        data: transformCsvData(action.response),\n        ui: {\n          pickedCountries,\n          searchText: \"\",\n          caseChart: {\n            logSetting: \"linear\",\n            syncAxes: false,\n          },\n          dataTable: {\n            dateToDisplay: \"yesterday\",\n          },\n        },\n        routing: {\n          url: updateCountriesInPathName(state.routing.url, pickedCountries),\n        },\n      };\n    case \"progress\":\n      return {\n        ...state,\n        progress: {\n          ...state.progress,\n          [action.target]: {\n            done: action.done,\n            total: Math.max(state.progress[action.target].total, action.done),\n            ...(action.total !== 0 && {\n              total: Math.max(action.total, action.done),\n            }),\n          },\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nconst loadedReducer = (state: LoadedState, action: Action): State => {\n  switch (action.type) {\n    case \"country-toggled\":\n      const toggleCountryToPicked = (\n        country: string,\n        countries: string[],\n      ): string[] => {\n        if (includes(country)(countries)) {\n          return filter(c => c !== country, countries);\n        }\n\n        return [country, ...countries];\n      };\n\n      const newCountries = toggleCountryToPicked(\n        action.countryCode,\n        state.ui.pickedCountries,\n      );\n\n      return {\n        ...state,\n        ui: {\n          ...state.ui,\n          pickedCountries: newCountries,\n        },\n        routing: {\n          url: updateCountriesInPathName(state.routing.url, newCountries),\n        },\n      };\n    case \"country-search-changed\":\n      return { ...state, ui: { ...state.ui, searchText: action.search } };\n    case \"case-chart-log-setting-changed\":\n      return {\n        ...state,\n        ui: {\n          ...state.ui,\n          caseChart: { ...state.ui.caseChart, logSetting: action.newSetting },\n        },\n      };\n    case \"data-table-date-selection-changed\":\n      return {\n        ...state,\n        ui: {\n          ...state.ui,\n          dataTable: {\n            ...state.ui.dataTable,\n            dateToDisplay: action.newSetting,\n          },\n        },\n      };\n    case \"sync-axis-toggle\":\n      return {\n        ...state,\n        ui: {\n          ...state.ui,\n          caseChart: {\n            ...state.ui.caseChart,\n            syncAxes: !state.ui.caseChart.syncAxes,\n          }\n        }\n      }\n    default:\n      return state;\n  }\n};\n\nexport const reducer = (state: State = initialState, action: Action): State => {\n  if (action.type === \"url-updated\") {\n    return { ...state, routing: { ...state.routing, url: action.url } };\n  }\n\n  switch (state.type) {\n    case \"error\":\n      return errorReducer(state, action);\n    case \"loading\":\n      return loadingReducer(state, action);\n    case \"loaded\":\n      return loadedReducer(state, action);\n    default:\n      return assertNever(state);\n  }\n};\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { IDataFrame } from \"data-forge\";\nimport { Store as ReduxStore } from \"redux\";\nimport { createEpicMiddleware } from \"redux-observable\";\n\nimport { makeInitialized } from \"../actions\";\nimport { Action } from \"../actions\";\nimport { rootEpic } from \"../epics\";\nimport { reducer } from \"../reducers/reducers\";\nimport { setupRouting } from \"../reducers/router\";\nimport { Row } from \"./data\";\n\nexport type State = (LoadingState | LoadedState | ErrorState);\ninterface RoutingState {\n  routing: {\n    url: string;\n  };\n}\n\ninterface Progress {\n  done: number;\n  total: number;\n}\nexport type LoadingState = {\n  type: \"loading\";\n  progress: {\n    covid: Progress;\n    population: Progress;\n    us: Progress;\n    stateInfo: Progress;\n  };\n} & RoutingState;\n\nexport type UIState = {\n  pickedCountries: string[];\n  searchText: string;\n  caseChart: {\n    logSetting: \"linear\" | \"logarithmic\";\n    syncAxes: boolean;\n  };\n  dataTable: {\n    dateToDisplay: \"today\" | \"yesterday\";\n  };\n}\n\nexport type LoadedState = {\n  type: \"loaded\";\n  data: IDataFrame<number, Row>;\n  ui: UIState;\n} & RoutingState\n\nexport type ErrorState = {\n  type: \"error\";\n  message: string;\n} & RoutingState;\n\n/// approximate download sizes for the progress bar in case servers don't send Content-Length\nconst covidSizeEstimate = 2459742;\nconst populationSizeEstimate = 487991;\nconst usDataEstimate = 679331;\nconst stateInfoEstimate = 30102;\n\nexport const initialState: State = {\n  type: \"loading\",\n  progress: {\n    covid: { done: 0, total: covidSizeEstimate },\n    population: { done: 0, total: populationSizeEstimate },\n    us: { done: 0, total: usDataEstimate },\n    stateInfo: { done: 0, total: stateInfoEstimate },\n  },\n  routing: {\n    url: window.location.toString(),\n  }\n};\n\nexport const defaultCountries = [\n         \"AZ\",\n         \"CA\",\n         \"FL\",\n         \"OK\",\n         \"TX\",\n         \"USA\",\n         \"DEU\",\n         \"SWE\",\n         \"NGA\",\n         \"RUS\",\n         \"BRA\",\n       ];\n\nexport type Store = ReduxStore<State, Action>;\n\nconst epicMiddleware = createEpicMiddleware();\nexport const store = configureStore({\n  reducer,\n  middleware: [epicMiddleware],\n});\nepicMiddleware.run(rootEpic);\n\nsetupRouting(store);\nstore.dispatch(makeInitialized());\n","import \"./index.css\";\nimport \"typeface-roboto\";\n\nimport { createMuiTheme, CssBaseline,ThemeProvider } from \"@material-ui/core\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport { App } from \"./components/App\";\nimport { store } from \"./store\";\n\nconst rootElement = document.getElementById(\"root\");\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: \"light\",\n  },\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <ThemeProvider theme={darkTheme}>\n        <CssBaseline />\n        <App />\n      </ThemeProvider>\n    </React.StrictMode>\n  </Provider>,\n  rootElement,\n);\n"],"sourceRoot":""}