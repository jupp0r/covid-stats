{"version":3,"sources":["Loading.tsx","CaseChart.tsx","actions.ts","CountryPicker.tsx","Loaded.tsx","Error.tsx","utils.ts","App.tsx","data.ts","reducers.ts","epics.ts","store.ts","index.tsx"],"names":["Loading","selectDataToRenderIntoChart","state","ui","pickedCountries","map","pickedCountry","name","data","where","row","iso_code","toArray","date","getTime","total_cases","type","CaseChart","cases","useSelector","options","title","text","xAxis","yAxis","series","console","log","highcharts","Highcharts","makeProgressAction","progress","coutrySelector","select","location","distinct","orderBy","toPairs","active","includes","filter","searchText","toLowerCase","startsWith","CountryPicker","dispatch","useDispatch","allCountries","selected","key","style","fontWeight","onClick","_","countryCode","onChange","e","search","target","value","id","Loaded","Error","message","assertNever","x","App","className","parseCovidCSV","of","fromCSV","pipe","df","parseDates","parseInts","parsePopulationCSV","renameSeries","mergeCovidPopulation","covid","population","populationLatest","groupBy","group","maxYear","summarize","year","Series","max","pop","first","inflate","computeLatestPopulation","join","errorReducer","action","loadingReducer","response","loadedReducer","country","countries","c","fromXhr","url","xhr","XMLHttpRequest","responseType","progress$","Observable","subscriber","addEventListener","ev","next","done","loaded","total","result$","readyState","status","complete","error","open","send","result","rootEpic","combineEpics","action$","covidData$","flatMap","update","merge","populationData$","combinedProgress$","item","filterForResult","data$","combinedResults$","zip","initialState","epicMiddleware","createEpicMiddleware","store","configureStore","reducer","middleware","run","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1a501bf8.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Loading = () => <div>loading</div>;","import React from \"react\";\n\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport { LoadedState } from \"./store\";\nimport { useSelector } from \"react-redux\";\n\nconst selectDataToRenderIntoChart = (\n  state: LoadedState,\n): {\n  name: string;\n  data: [Date, number][];\n  type: \"line\";\n}[] =>\n  state.ui.pickedCountries.map((pickedCountry: string) => ({\n    name: pickedCountry,\n    data: state.data\n      .where(row => row.iso_code === pickedCountry)\n      .toArray()\n      .map(row => [row.date.getTime(), row.total_cases]),\n    type: \"line\",\n  }));\n\nexport const CaseChart = () => {\n  const cases = useSelector(selectDataToRenderIntoChart);\n\n  const options: Highcharts.Options = {\n    title: {\n      text: \"Cases over time\",\n    },\n    xAxis: {\n      type: \"datetime\",\n      title: {\n        text: \"Date\",\n      },\n    },\n    yAxis: {\n      type: \"logarithmic\",\n    },\n    series: cases,\n  };\n\n  console.log(cases);\n  return (\n    <div>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </div>\n  );\n};\n","import { IDataFrame } from \"data-forge\";\n\nexport type Action =\n  | InitialAction\n  | ErrorDuringFetchAction\n  | FetchSuccessAction\n  | CountryToggleAction\n  | CountrySearchChangedAction\n  | ProgressAction;\n\nexport interface InitialAction {\n  type: \"initialized\";\n}\nexport const makeInitialized = (): InitialAction => ({\n  type: \"initialized\",\n});\n\nexport interface ErrorDuringFetchAction {\n  type: \"error-during-fetch\";\n  message: string;\n}\nexport const makeErrorDuringFetch = (\n  message: string,\n): ErrorDuringFetchAction => ({\n  type: \"error-during-fetch\",\n  message,\n});\n\nexport interface FetchSuccessAction {\n  type: \"fetch-success\";\n  response: IDataFrame;\n}\nexport const makeFetchSuccess = (response: IDataFrame): FetchSuccessAction => ({\n  type: \"fetch-success\",\n  response,\n});\n\nexport interface CountryToggleAction {\n  type: \"country-toggled\";\n  countryCode: string;\n}\nexport const makeCountryToggleAction = (\n  countryCode: string,\n): CountryToggleAction => ({\n  type: \"country-toggled\",\n  countryCode,\n});\n\nexport interface CountrySearchChangedAction {\n  type: \"country-search-changed\";\n  search: string;\n}\n\nexport const makeCoutrySearchChangedAction = (\n  search: string,\n): CountrySearchChangedAction => ({\n  type: \"country-search-changed\",\n  search,\n});\n\nexport interface ProgressAction {\n  type: \"progress\";\n  target: \"covid\" | \"population\";\n  done: number;\n  total: number;\n}\n\nexport const makeProgressAction = (progress: {\n  target: \"covid\" | \"population\";\n  done: number;\n  total: number;\n}): ProgressAction => {\n  return { ...progress, type: \"progress\" };\n};\n","import React, { CSSProperties } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { LoadedState } from \"./store\";\n\nimport { includes } from \"lodash/fp\";\nimport {\n  makeCountryToggleAction,\n  makeCoutrySearchChangedAction,\n} from \"./actions\";\n\nconst coutrySelector = (state: LoadedState) =>\n  state.data\n    .select(\n      ({ iso_code, location }: { iso_code: string; location: string }) => ({\n        iso_code,\n        location,\n      }),\n    )\n    .distinct(row => row.iso_code)\n    .orderBy(row => row.location)\n    .toPairs()\n    .map(([_, row]) => ({\n      ...row,\n      active: includes(row.iso_code)(state.ui.pickedCountries),\n    }))\n    .filter(\n      row =>\n        row.active ||\n        (state.ui.searchText !== \"\" &&\n          row.location\n            .toLowerCase()\n            .startsWith(state.ui.searchText.toLowerCase())),\n    );\n\nexport const CountryPicker = () => {\n  const dispatch = useDispatch();\n\n  const boldIfSelected = (selected: boolean): CSSProperties => ({\n    fontWeight: selected ? \"bold\" : \"normal\",\n  });\n\n  const allCountries = useSelector(coutrySelector).map(\n    ({ iso_code, location, active }) => (\n      <li\n        key={iso_code}\n        style={boldIfSelected(active)}\n        onClick={_ => dispatch(makeCountryToggleAction(iso_code))}\n      >\n        {location}\n      </li>\n    ),\n  );\n\n  const searchText = useSelector((state: LoadedState) => state.ui.searchText);\n\n  return (\n    <div>\n      <label>\n        Country Picker\n        <input\n          type=\"text\"\n          name=\"search\"\n          onChange={e =>\n            dispatch(makeCoutrySearchChangedAction(e.target.value))\n          }\n          value={searchText}\n        />\n        <ul id=\"countries\">{allCountries}</ul>\n      </label>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { CaseChart } from \"./CaseChart\";\nimport { CountryPicker } from \"./CountryPicker\";\n\nexport const Loaded = () => {\n  return (\n    <div>\n      <CountryPicker />\n      <CaseChart />\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { ErrorState } from \"./store\";\nimport { useSelector } from \"react-redux\";\n\nexport const Error = () => {\n  const message = useSelector((state: ErrorState) => state.message);\n  return <div>Error: {message}</div>;\n};\n","export function assertNever(x: never): never {\n    throw new Error(\"Unexpected object: \" + x);\n}","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"./App.css\";\n\nimport { State } from \"./store\";\n\nimport { Loading } from \"./Loading\";\nimport { Loaded } from \"./Loaded\";\nimport { Error } from \"./Error\";\n\nimport { assertNever } from \"./utils\";\n\nexport const App = () => {\n  const state: State = useSelector<State, State>(_ => _);\n  return (\n    <div className=\"App\">\n      {((state: State) => {\n        switch (state.type) {\n          case \"loading\":\n            return <Loading />;\n          case \"loaded\":\n            return <Loaded />;\n          case \"error\":\n            return <Error />;\n          default:\n            return assertNever(state);\n        }\n      })(state)}\n    </div>\n  );\n};\n","import { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { fromCSV, IDataFrame, Series } from 'data-forge';\n\ninterface CovidRow {\n    iso_code: string,\n}\n\ninterface PopulationRow {\n    \"iso_code\": string,\n    \"population\": string,\n    \"year\": number,\n}\n\nexport const parseCovidCSV = (data: string): Observable<IDataFrame> =>\n    of(fromCSV(data))\n        .pipe(\n            map((df: IDataFrame): IDataFrame => df.parseDates('date')),\n            map((df: IDataFrame): IDataFrame => df.parseInts('total_cases')),\n        );\n\nexport const parsePopulationCSV = (data: string): Observable<IDataFrame> =>\n    of(fromCSV(data))\n        .pipe(\n            map(\n                (df: IDataFrame): IDataFrame => df.parseInts(['Value', 'Year'])\n            ),\n            map((df: IDataFrame): IDataFrame => df.renameSeries({\n                \"Year\": \"year\",\n                \"Country Code\": \"iso_code\",\n                \"Value\": \"population\",\n            }))\n        );\n\nexport const transformCsvData = (data: IDataFrame): IDataFrame => data;\n\ntype Maximums = Map<string, number>;\n\ntype Accumulator = {\n    maximums: Maximums,\n    result: IDataFrame,\n}\n\nconst computeLatestPopulation = (population: IDataFrame): IDataFrame =>\n    population\n        .groupBy(row => row.iso_code)\n        .select(group => {\n            const { year: maxYear } = group.summarize({ year: Series.max });\n            const pop = group.where(row => row.year === maxYear).first().population;\n            return {\n                iso_code: group.first().iso_code,\n                population: pop,\n            };\n        }).inflate();\n\nexport const mergeCovidPopulation = (covid: IDataFrame, population: IDataFrame): IDataFrame => {\n    const populationLatest = computeLatestPopulation(population);\n    console.log(covid.toArray());\n    return covid.join(\n        populationLatest,\n        (covid: CovidRow) => covid.iso_code,\n        (pop: PopulationRow) => pop.iso_code,\n        (covid: CovidRow, pop: PopulationRow | null) => (\n            {\n                ...covid,\n                population: pop ? pop.population : 0\n            }\n        )\n    );\n};\n","import { initialState, State, LoadedState } from \"./store\";\n\nimport { Action } from \"./actions\";\nimport { transformCsvData } from \"./data\";\n\nimport { assertNever } from \"./utils\";\n\nimport { includes, filter } from 'lodash/fp';\n\nconst errorReducer = (state: State, action: Action): State => state;\n\nconst loadingReducer = (state: State, action: Action): State => {\n    switch (action.type) {\n        case \"fetch-success\":\n            return {\n                type: \"loaded\",\n                data: transformCsvData(action.response),\n                ui: {\n                    pickedCountries: [\"USA\"],\n                    searchText: \"\",\n                },\n            };\n        default:\n            return state;\n    }\n};\n\nconst loadedReducer = (state: LoadedState, action: Action): State => {\n    switch (action.type) {\n        case \"country-toggled\":\n             const toggleCountryToPicked = (\n               country: string,\n               countries: string[],\n             ): string[] => {\n               if (includes(country)(countries)) {\n                 return filter(c => c !== country, countries);\n               }\n\n               return [country, ...countries];\n             };\n            \n            return {\n              ...state,\n              ui: {\n                ...state.ui,\n                pickedCountries: toggleCountryToPicked(\n                  action.countryCode,\n                  state.ui.pickedCountries,\n                ),\n              },\n            };\n        case \"country-search-changed\":\n            return { ...state, ui: { ...state.ui, searchText: action.search } };\n        default:\n            return state;\n    }\n};\n\nexport const reducer = (state: State = initialState, action: Action): State => {\n    switch (state.type) {\n        case \"error\":\n            return errorReducer(state, action);\n        case \"loading\":\n            return loadingReducer(state, action);\n        case \"loaded\":\n            return loadedReducer(state, action);\n        default:\n            return assertNever(state);\n    }\n};\n","import { Observable, zip, merge } from \"rxjs\";\n\nimport { filter, flatMap, map } from \"rxjs/operators\";\n\nimport { Action, makeProgressAction, ProgressAction } from \"./actions\";\n\nimport { combineEpics } from \"redux-observable\";\n\nimport {\n  parseCovidCSV,\n  parsePopulationCSV,\n  mergeCovidPopulation,\n} from \"./data\";\nimport { IDataFrame } from \"data-forge\";\n\ntype DataResult =\n  | { type: \"success\"; data: IDataFrame }\n  | { type: \"error\"; reason: string };\n\ninterface Progress {\n  done: number;\n  total: number;\n}\n\nconst fromXhr = (\n  url: string,\n): {\n  progress: Observable<Progress>;\n  result: Observable<string>;\n} => {\n  const xhr = new XMLHttpRequest();\n  xhr.responseType = \"text\";\n  const progress$ = new Observable<Progress>((subscriber): void => {\n    xhr.addEventListener(\"progress\", ev =>\n      subscriber.next({\n        done: ev.loaded,\n        total: ev.total,\n      }),\n    );\n  });\n\n  const result$ = new Observable<string>(subscriber => {\n    xhr.addEventListener(\"readystatechange\", ev => {\n      if (xhr.readyState !== 4) {\n        return;\n      }\n\n      if (xhr.status === 200) {\n        subscriber.next(xhr.response);\n        subscriber.complete();\n      } else {\n        subscriber.error(xhr.response);\n      }\n    });\n  });\n\n  xhr.open(\"GET\", url);\n  xhr.send();\n  return { progress: progress$, result: result$ };\n};\n\nexport const startLoadingEpic = (\n  action$: Observable<Action>,\n): Observable<Action> => {\n  const covidData$: Observable<ProgressAction | DataResult> = action$.pipe(\n    filter((action: Action) => action.type === \"initialized\"),\n    flatMap(() => {\n      const { progress, result } = fromXhr(\n        \"https://covid.ourworldindata.org/data/owid-covid-data.csv\",\n      );\n      const progress$ = progress.pipe(\n        map((update: Progress) =>\n          makeProgressAction({ ...update, target: \"covid\" }),\n        ),\n      );\n\n      const result$ = result.pipe(\n        flatMap(parseCovidCSV),\n        map((data: IDataFrame): DataResult => ({ type: \"success\", data })),\n      );\n\n      return merge(progress$, result$);\n    }),\n  );\n\n  const populationData$: Observable<ProgressAction | DataResult> = action$.pipe(\n    filter((action: Action) => action.type === \"initialized\"),\n    flatMap(() => {\n      const { progress, result } = fromXhr(\n        \"https://raw.githubusercontent.com/datasets/population/master/data/population.csv\",\n      );\n      const progress$ = progress.pipe(\n        map((update: Progress) =>\n          makeProgressAction({ ...update, target: \"population\" }),\n        ),\n      );\n\n      const result$ = result.pipe(\n        flatMap(parsePopulationCSV),\n        map((data: IDataFrame): DataResult => ({ type: \"success\", data })),\n      );\n\n      return merge(progress$, result$);\n    }),\n  );\n\n  const combinedProgress$: Observable<ProgressAction> = merge(\n    covidData$,\n    populationData$,\n  ).pipe(\n    filter(item => item.type === \"progress\"),\n    map(item => item as ProgressAction),\n  );\n\n  const filterForResult = (data$: Observable<ProgressAction | DataResult>) =>\n    data$.pipe(filter(item => item.type === \"success\"));\n\n  const combinedResults$: Observable<Action> = zip(\n    filterForResult(covidData$),\n    filterForResult(populationData$),\n  ).pipe(\n    map(\n      ([covid, population]): Action => {\n        console.log(\"happened\");\n        if (covid.type === \"success\" && population.type === \"success\") {\n          return {\n            type: \"fetch-success\",\n            response: mergeCovidPopulation(covid.data, population.data),\n          };\n        } else {\n          return {\n            type: \"error-during-fetch\",\n            message: `Error: ${covid} or ${population} failed to fetch`,\n          };\n        }\n      },\n    ),\n  );\n\n  return merge(combinedProgress$, combinedResults$);\n};\n\nexport const rootEpic = combineEpics(startLoadingEpic);\n","import {configureStore} from '@reduxjs/toolkit';\nimport {reducer} from './reducers';\nimport { createEpicMiddleware } from 'redux-observable';\nimport { rootEpic } from './epics';\nimport { makeInitialized } from './actions'\nimport { IDataFrame } from 'data-forge';\nimport { Store as ReduxStore } from 'redux';\nimport { Action } from './actions';\n\nexport type State = LoadingState | LoadedState | ErrorState;\n\nexport interface LoadingState {\n    type: \"loading\",\n}\n\nexport interface UIState {\n    pickedCountries: string[],\n    searchText: string,\n}\n\nexport interface LoadedState {\n    type: \"loaded\",\n    data: IDataFrame,\n    ui: UIState,\n}\n\nexport interface ErrorState {\n    type: \"error\",\n    message: string,\n}\n\nexport const initialState: State = {type: \"loading\"};\n\nexport type Store = ReduxStore<State, Action>;\n\nconst epicMiddleware = createEpicMiddleware();\nexport const store = configureStore({\n    reducer,\n    middleware: [epicMiddleware],\n});\nepicMiddleware.run(rootEpic);\n\nstore.dispatch(makeInitialized());","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\n\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\n\nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  rootElement,\n);\n"],"sourceRoot":""}