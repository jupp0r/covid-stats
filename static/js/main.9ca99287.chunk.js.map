{"version":3,"sources":["components/SpacedPaper.tsx","components/Loading.tsx","actions/index.ts","components/countryColors.ts","selectors/index.ts","components/CaseChart.tsx","components/CountryPicker.tsx","components/DataTable.tsx","store/data.ts","components/DeathCurve.tsx","components/NewCaseChart.tsx","components/Loaded.tsx","components/Error.tsx","utils.ts","components/highchartsTheme.ts","components/App.tsx","reducers/router.ts","reducers/reducers.ts","epics/util.ts","epics/index.ts","store/index.ts","index.tsx"],"names":["withPadding","createStyles","paperPadding","padding","SpacedPaper","withStyles","props","wide","useMediaQuery","Box","my","py","Paper","elevation","className","classes","children","Loading","progress","useSelector","state","normalize","done","total","LinearProgress","variant","value","covid","us","population","stateInfo","makeCountryToggleAction","countryCode","type","makeCaseChartLogSettingChangedAction","newSetting","colors","red","pink","purple","blue","cyan","teal","green","lime","amber","orange","brown","grey","blueGrey","shades","dataSelector","data","pickedCountriesSelector","ui","pickedCountries","colorMapSelector","createSelector","isoCodes","results","Map","pickedColors","Set","forEach","country","picked","hash","murmur3","toString","length","has","size","add","set","countryNameSelector","kvPairs","groupBy","row","iso_code","select","group","code","first","name","location","toArray","map","selectDataToRenderIntoChart","colorMap","countryNameMap","pickedCountry","get","where","date","getTime","color","makeHighchartsOptions","logAxisSetting","cases","chart","height","zoomType","title","text","xAxis","labels","step","yAxis","series","credits","enabled","CaseChart","total_cases","caseChart","logSetting","dispatch","useDispatch","options","id","ToggleButtonGroup","onChange","_","exclusive","aria-label","ToggleButton","highcharts","Highcharts","DeathChart","total_deaths","countrySelector","searchText","distinct","orderBy","toPairs","active","includes","filter","toLowerCase","startsWith","CountryPicker","autoWidthItem","width","allCountries","ListItem","button","key","onClick","style","Checkbox","edge","checked","tabIndex","disableRipple","inputProps","TextField","placeholder","e","search","target","List","display","flexWrap","alignItems","justifyContent","tableIcons","Add","forwardRef","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","DataTable","dateToDisplay","dataTable","today","Date","yesterday","setTime","selectedDate","findFirstRowMachingDate","field","filtered","second","getFullYear","getMonth","getDate","count","filteredByAnythingPresent","orderByDescending","undefined","tableData","new_cases","total_tests","getSeries","x","max","tests_per_1m_population","Math","round","numberWithCommas","rowData","replace","columns","render","defaultSort","makeDataTableDateSelectionChangedAction","icons","fixedColumns","left","right","parseCovidCSV","of","fromCSV","pipe","df","parseDates","parseInts","parsePopulationCSV","renameSeries","Year","Value","replaceEmptyBy0","parseUsCSV","positive","positiveIncrease","death","deathIncrease","totalTestResults","totalTestResultsIncrease","transformSeries","new_deaths","new_tests","parseUsStateInfoCSV","mergeData","populationLatest","maxYear","summarize","year","Series","pop","inflate","computeLatestPopulation","joinedUsData","join","dataRow","infoRow","location_type","joinedWorldData","concat","smooth","amount","ceil","abs","i","valuesInAverage","sum","j","push","deathCurveSelector","deaths","sort","a","b","y","DeathCurve","min","tickInterval","formatter","this","toExponential","rotation","role","newSelector","selector","countryData","movingAverage","enableMouseTracking","legend","Grid","item","NewCaseChart","countryCharts","container","justify","spacing","NewDeathChart","centered","textAlign","Loaded","href","Error","message","assertNever","setOptions","backgroundColor","plotBackgroundColor","plotShadow","plotBorderWidth","font","subtitle","gridLineWidth","lineColor","tickColor","fontWeight","fontSize","fontFamily","minorTickInterval","lineWidth","tickWidth","itemStyle","itemHoverStyle","itemHiddenStyle","navigation","buttonOptions","theme","stroke","store","App","data-ribbon","px","updateCountriesInPathName","urlString","countries","url","URL","params","URLSearchParams","JSON","stringify","errorReducer","action","loadingReducer","defaultCountries","parsedCountries","parse","Array","isArray","console","error","getPickedCountriesFromUrl","routing","response","loadedReducer","newCountries","c","makeProgressStream","action$","csvParser","flatMap","xhr","XMLHttpRequest","responseType","progress$","Observable","subscriber","addEventListener","ev","next","loaded","result$","readyState","status","complete","open","send","result","fromXhr","update","makeProgressAction","merge","rootEpic","combineEpics","covidData$","populationData$","usData$","stateInfo$","combinedProgress$","ofType","filterForResult","data$","combinedResults$","zip","initialState","window","epicMiddleware","createEpicMiddleware","configureStore","reducer","middleware","run","subscribe","getState","history","pushState","document","body","scrollTop","rootElement","getElementById","darkTheme","createMuiTheme","palette","ReactDOM","StrictMode","ThemeProvider","CssBaseline"],"mappings":"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","file":"static/js/main.9ca99287.chunk.js","sourcesContent":["import React from \"react\";\n\nimport {\n  Box,\n  Paper,\n  PaperProps,\n  withStyles,\n  createStyles,\n  WithStyles,\n  useMediaQuery,\n} from \"@material-ui/core\";\n\nconst withPadding = createStyles({\n  paperPadding: {\n    padding: \"30px\",\n  },\n});\n\nconst spacedPaper: React.FC<PaperProps & WithStyles<typeof withPadding>> = (\n  props: PaperProps & WithStyles<typeof withPadding>,\n) => {\n  // eslint:disable\n  const wide = useMediaQuery(\"(min-width:600px)\"); // eslint-disable-line react-hooks/rules-of-hooks\n  return (\n    <Box my={3} py={3}>\n      <Paper\n        elevation={props.elevation}\n        className={wide ? props.classes.paperPadding : \"\"}\n      >\n        {props.children}\n      </Paper>\n    </Box>\n  );\n};\n\nexport const SpacedPaper = withStyles(withPadding)(spacedPaper);\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { LoadingState } from \"../store\";\n\nimport { LinearProgress } from \"@material-ui/core\";\nimport { SpacedPaper } from \"./SpacedPaper\";\n\nexport const Loading = () => {\n  const progress = useSelector((state: LoadingState) => state.progress);\n\n  const normalize = ({ done, total }: { done: number; total: number }) =>\n    (done / total) * 100;\n\n  return (\n    <SpacedPaper>\n      <div>\n        <h2>loading world covid data</h2>\n        <LinearProgress\n          variant=\"determinate\"\n          value={normalize(progress.covid)}\n        />\n      </div>\n      <div>\n        <h2>loading US covid data</h2>\n        <LinearProgress variant=\"determinate\" value={normalize(progress.us)} />\n      </div>\n      <div>\n        <h2>loading world population data</h2>\n        <LinearProgress\n          variant=\"determinate\"\n          value={normalize(progress.population)}\n        />\n      </div>\n      <div>\n        <h2>loading US state data</h2>\n        <LinearProgress\n          variant=\"determinate\"\n          value={normalize(progress.stateInfo)}\n        />\n      </div>\n    </SpacedPaper>\n  );\n};\n","import { IDataFrame } from \"data-forge\";\n\nexport type Action =\n  | InitialAction\n  | ErrorDuringFetchAction\n  | FetchSuccessAction\n  | CountryToggleAction\n  | CountrySearchChangedAction\n  | ProgressAction\n  | UrlUpdatedAction\n  | CaseChartLogSettingChangedAction\n  | DataTableDateSelectionChangedAction;\n\nexport interface InitialAction {\n  type: \"initialized\";\n}\nexport const makeInitialized = (): InitialAction => ({\n  type: \"initialized\",\n});\n\nexport interface ErrorDuringFetchAction {\n  type: \"error-during-fetch\";\n  message: string;\n}\nexport const makeErrorDuringFetch = (\n  message: string,\n): ErrorDuringFetchAction => ({\n  type: \"error-during-fetch\",\n  message,\n});\n\nexport interface FetchSuccessAction {\n  type: \"fetch-success\";\n  response: IDataFrame;\n}\nexport const makeFetchSuccess = (response: IDataFrame): FetchSuccessAction => ({\n  type: \"fetch-success\",\n  response,\n});\n\nexport interface CountryToggleAction {\n  type: \"country-toggled\";\n  countryCode: string;\n}\nexport const makeCountryToggleAction = (\n  countryCode: string,\n): CountryToggleAction => ({\n  type: \"country-toggled\",\n  countryCode,\n});\n\nexport interface CountrySearchChangedAction {\n  type: \"country-search-changed\";\n  search: string;\n}\n\nexport const makeCoutrySearchChangedAction = (\n  search: string,\n): CountrySearchChangedAction => ({\n  type: \"country-search-changed\",\n  search,\n});\n\nexport type DownloadCategory = \"covid\" | \"population\" | \"us\" | \"stateInfo\";\n\nexport interface ProgressAction {\n  type: \"progress\";\n  target: DownloadCategory;\n  done: number;\n  total: number;\n}\n\nexport const makeProgressAction = (progress: {\n  target: DownloadCategory;\n  done: number;\n  total: number;\n}): ProgressAction => {\n  return { ...progress, type: \"progress\" };\n};\n\nexport interface UrlUpdatedAction {\n  type: \"url-updated\";\n  url: string;\n}\n\nexport const makeUrlUpdated = (url: string): UrlUpdatedAction => ({\n  type: \"url-updated\",\n  url,\n});\n\nexport interface CaseChartLogSettingChangedAction {\n  type: \"case-chart-log-setting-changed\";\n  newSetting: \"linear\" | \"logarithmic\";\n}\n\nexport const makeCaseChartLogSettingChangedAction = (\n  newSetting: \"linear\" | \"logarithmic\",\n): CaseChartLogSettingChangedAction => ({\n  type: \"case-chart-log-setting-changed\",\n  newSetting,\n});\n\nexport interface DataTableDateSelectionChangedAction {\n  type: \"data-table-date-selection-changed\";\n  newSetting: \"today\" | \"yesterday\";\n}\n\nexport const makeDataTableDateSelectionChangedAction = (\n  newSetting: \"today\" | \"yesterday\",\n): DataTableDateSelectionChangedAction => ({\n  type: \"data-table-date-selection-changed\",\n  newSetting,\n});\n","import {\n  red,\n  pink,\n  purple,\n  blue,\n  cyan,\n  teal,\n  green,\n  lime,\n  amber,\n  orange,\n  brown,\n  grey,\n  blueGrey,\n} from \"@material-ui/core/colors\";\n\nimport { murmur3 } from \"murmurhash-js\";\n\nconst colors = [\n  red,\n  pink,\n  purple,\n  blue,\n  cyan,\n  teal,\n  green,\n  lime,\n  amber,\n  orange,\n  brown,\n  grey,\n  blueGrey,\n];\n\nconst shades = [300, 600];\n\nexport const makeCountryColors = (isoCodes: string[]): Map<string, string> => {\n  let results = new Map<string, string>();\n  let pickedColors = new Set<string>();\n\n  isoCodes.forEach(country => {\n    let picked = \"undefined\";\n\n    let hash = murmur3(country);\n    // do multiple hash rounds to avoid collisions,\n    // unless collisions are unavoidable with many countries\n    do {\n      hash = murmur3(hash.toString());\n      const color = colors[hash % colors.length];\n      const shade = shades[hash % shades.length];\n\n      picked = (color as any)[shade.toString()];\n \n    } while (pickedColors.has(picked) && pickedColors.size < colors.length * shades.length);\n   \n\n    pickedColors.add(picked);\n    results.set(country, picked);\n  });\n\n  return results;\n};\n","import { IDataFrame } from \"data-forge\";\n\nimport { LoadedState } from \"../store\";\n\nimport { createSelector } from \"reselect\";\nimport { makeCountryColors } from \"../components/countryColors\";\n\nexport const dataSelector = (state: LoadedState) => state.data;\nexport const pickedCountriesSelector = (state: LoadedState) =>\n  state.ui.pickedCountries;\nexport const colorMapSelector = createSelector(\n  pickedCountriesSelector,\n  makeCountryColors,\n);\n\nexport const countryNameSelector = createSelector(\n  dataSelector,\n  (data: IDataFrame): Map<string, string> => {\n    const kvPairs: [string, string][] = data\n      .groupBy(row => row.iso_code)\n      .select(group => ({\n        code: group.first().iso_code,\n        name: group.first().location,\n      }))\n      .toArray()\n      .map(({ code, name }) => [code, name]);\n    return new Map(\n      kvPairs,\n    );\n  }\n);\n","import React from \"react\";\n\nimport { createSelector } from \"reselect\";\n\nimport Highcharts, { SeriesOptionsType } from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nimport { LoadedState } from \"../store\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { makeCaseChartLogSettingChangedAction } from \"../actions\";\n\nimport { SpacedPaper } from \"./SpacedPaper\";\nimport { useMediaQuery } from \"@material-ui/core\";\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\n\nimport { IDataFrame } from \"data-forge\";\n\nimport {\n  pickedCountriesSelector,\n  dataSelector,\n  colorMapSelector,\n  countryNameSelector,\n} from \"../selectors\";\n\nconst selectDataToRenderIntoChart = (dataSelector: (row: any) => number) => (\n  pickedCountries: string[],\n  data: IDataFrame,\n  colorMap: Map<string, string>,\n  countryNameMap: Map<string, string>,\n): SeriesOptionsType[] =>\n  pickedCountries.map((pickedCountry: string) => ({\n    name: countryNameMap.get(pickedCountry) || \"\",\n    data: data\n      .where(row => row.iso_code === pickedCountry)\n      .toArray()\n      .map(row => [row.date.getTime(), dataSelector(row)]),\n    type: \"line\",\n    color: colorMap.get(pickedCountry),\n  }));\n\nconst makeHighchartsOptions = ({\n  logAxisSetting,\n  cases,\n  wide,\n}: {\n  logAxisSetting: \"linear\" | \"logarithmic\";\n  cases: SeriesOptionsType[];\n  wide: boolean;\n}): Highcharts.Options => ({\n  chart: {\n    height: wide ? \"50%\" : \"100%\",\n    zoomType: \"x\",\n  },\n  title: {\n    text: \"\",\n  },\n  xAxis: {\n    type: \"datetime\",\n    title: {\n      text: \"Date\",\n    },\n    labels: {\n      step: 1,\n    },\n  },\n  yAxis: {\n    type: logAxisSetting,\n    title: {\n      text: \"Cases per 1M population\",\n    },\n  },\n  series: cases,\n  credits: {\n    enabled: false,\n  },\n});\n\nexport const CaseChart = () => {\n  const cases = useSelector(\n    createSelector(\n      pickedCountriesSelector,\n      dataSelector,\n      colorMapSelector,\n      countryNameSelector,\n      selectDataToRenderIntoChart(\n        row => (row.total_cases * 1000000) / row.population,\n      ),\n    ),\n  );\n  const logAxisSetting = useSelector(\n    (state: LoadedState) => state.ui.caseChart.logSetting,\n  );\n\n  const dispatch = useDispatch();\n  const handleAxisLogarithmicToggle = (_: any, newSetting: string | null) => {\n    if (!newSetting) {\n      return;\n    }\n\n    if (!(newSetting === \"linear\" || newSetting === \"logarithmic\")) {\n      return;\n    }\n\n    dispatch(makeCaseChartLogSettingChangedAction(newSetting));\n  };\n\n  const wide = useMediaQuery(\"(min-width:600px)\");\n  const options = makeHighchartsOptions({ logAxisSetting, cases, wide });\n\n  return (\n    <SpacedPaper id=\"cases\" elevation={3}>\n      <h2>Cases over Time</h2>\n      <ToggleButtonGroup\n        value={logAxisSetting}\n        onChange={handleAxisLogarithmicToggle}\n        exclusive\n        aria-label=\"log axis setting\"\n      >\n        <ToggleButton value=\"logarithmic\" aria-label=\"logarithmic\">\n          log\n        </ToggleButton>\n        <ToggleButton value=\"linear\" aria-label=\"linear\">\n          linear\n        </ToggleButton>\n      </ToggleButtonGroup>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </SpacedPaper>\n  );\n};\n\nexport const DeathChart = () => {\n  const cases = useSelector(\n    createSelector(\n      pickedCountriesSelector,\n      dataSelector,\n      colorMapSelector,\n      countryNameSelector,\n      selectDataToRenderIntoChart(\n        row => (row.total_deaths * 1000000) / row.population,\n      ),\n    ),\n  );\n  const logAxisSetting = useSelector(\n    (state: LoadedState) => state.ui.caseChart.logSetting,\n  );\n\n  const wide = useMediaQuery(\"(min-width:600px)\");\n  const options = makeHighchartsOptions({ logAxisSetting, cases, wide });\n\n  const dispatch = useDispatch();\n  const handleAxisLogarithmicToggle = (_: any, newSetting: string | null) => {\n    if (!newSetting) {\n      return;\n    }\n\n    if (!(newSetting === \"linear\" || newSetting === \"logarithmic\")) {\n      return;\n    }\n\n    dispatch(makeCaseChartLogSettingChangedAction(newSetting));\n  };\n\n  return (\n    <SpacedPaper id=\"cases\" elevation={3}>\n      <h2>Deaths over Time</h2>\n      <ToggleButtonGroup\n        value={logAxisSetting}\n        onChange={handleAxisLogarithmicToggle}\n        exclusive\n        aria-label=\"log axis setting\"\n      >\n        <ToggleButton value=\"linear\" aria-label=\"linear\">\n          linear\n        </ToggleButton>\n        <ToggleButton value=\"logarithmic\" aria-label=\"logarithmic\">\n          log\n        </ToggleButton>\n      </ToggleButtonGroup>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </SpacedPaper>\n  );\n};\n","import React, { CSSProperties } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { LoadedState } from \"../store\";\n\nimport { createSelector } from \"reselect\";\n\nimport { includes } from \"lodash/fp\";\nimport {\n  makeCountryToggleAction,\n  makeCoutrySearchChangedAction,\n} from \"../actions\";\nimport { IDataFrame } from \"data-forge\";\n\nimport { List, ListItem, Checkbox, TextField } from \"@material-ui/core\";\n\nimport { SpacedPaper } from \"./SpacedPaper\";\n\nconst dataSelector = (state: LoadedState) => state.data;\nconst pickedCountriesSelector = (state: LoadedState) =>\n  state.ui.pickedCountries;\nconst searchTextSelector = (state: LoadedState) => state.ui.searchText;\n\nconst countrySelector = createSelector(\n  dataSelector,\n  pickedCountriesSelector,\n  searchTextSelector,\n  (data: IDataFrame, pickedCountries: string[], searchText) =>\n    data\n      .select(\n        ({ iso_code, location }: { iso_code: string; location: string }) => ({\n          iso_code,\n          location,\n        }),\n      )\n      .distinct(row => row.iso_code)\n      .orderBy(row => row.location)\n      .toPairs()\n      .map(([_, row]) => ({\n        ...row,\n        active: includes(row.iso_code)(pickedCountries),\n      }))\n      .filter(\n        row =>\n          row.active ||\n          (searchText !== \"\" &&\n            row.location.toLowerCase().startsWith(searchText.toLowerCase())),\n      ),\n);\n\nexport const CountryPicker = () => {\n  const dispatch = useDispatch();\n\n  const autoWidthItem: CSSProperties = {\n    width: \"180px\",\n  };\n\n  const allCountries = useSelector(countrySelector).map(\n    ({ iso_code, location, active }) => (\n      <ListItem\n        button\n        key={iso_code}\n        onClick={_ => dispatch(makeCountryToggleAction(iso_code))}\n        style={autoWidthItem}\n      >\n        <Checkbox\n          edge=\"start\"\n          checked={active}\n          tabIndex={-1}\n          disableRipple\n          inputProps={{ \"aria-labelledby\": iso_code }}\n        />\n        {location}\n      </ListItem>\n    ),\n  );\n\n  const searchText = useSelector((state: LoadedState) => state.ui.searchText);\n\n  const flexContainer: CSSProperties = {\n    display: \"flex\",\n    padding: 0,\n    flexWrap: \"wrap\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  };\n\n  return (\n    <SpacedPaper elevation={3}>\n      <label>\n        <br />\n        <TextField\n          type=\"text\"\n          name=\"search\"\n          placeholder=\"Search Countries\"\n          onChange={e =>\n            dispatch(makeCoutrySearchChangedAction(e.target.value))\n          }\n          value={searchText}\n        />\n        <List id=\"countries\" style={flexContainer}>\n          {allCountries}\n        </List>\n      </label>\n    </SpacedPaper>\n  );\n};\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport MaterialTable, { Icons, Column } from \"material-table\";\nimport { SpacedPaper } from \"./SpacedPaper\";\nimport { LoadedState } from \"../store\";\n\nimport { forwardRef } from \"react\";\n\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport { ToggleButtonGroup, ToggleButton } from \"@material-ui/lab\";\n\nimport { makeDataTableDateSelectionChangedAction } from \"../actions\";\n\nimport { IDataFrame } from \"data-forge\";\nimport { Checkbox } from \"@material-ui/core\";\nimport { includes } from \"lodash/fp\";\n\nimport { makeCountryToggleAction } from \"../actions\";\nimport { Row } from \"../store/data\";\n\nconst tableIcons: Icons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst datesAreOnSameDay = (first: Date, second: Date) =>\n  first.getFullYear() === second.getFullYear() &&\n  first.getMonth() === second.getMonth() &&\n  first.getDate() === second.getDate();\n\nexport const DataTable = () => {\n  const data = useSelector((state: LoadedState) => state.data);\n\n  const pickedCountriesSelector = (state: LoadedState) =>\n    state.ui.pickedCountries;\n  const pickedCountries = useSelector(pickedCountriesSelector);\n  const isSelected = (iso_code: string) => includes(iso_code)(pickedCountries);\n\n  const dateToDisplay = useSelector(\n    (state: LoadedState) => state.ui.dataTable.dateToDisplay,\n  );\n\n  const today = new Date();\n  const dateOffset = 24 * 60 * 60 * 1000 * 1; // 1 day\n  let yesterday = new Date();\n  yesterday.setTime(yesterday.getTime() - dateOffset);\n\n  const selectedDate = dateToDisplay === \"today\" ? today : yesterday;\n\n  const findFirstRowMachingDate = (\n    group: IDataFrame<number, Row>,\n    date: Date,\n    field: keyof Row,\n  ) => {\n    const filtered: IDataFrame<\n      number,\n      Row\n    > = group.where((row: { date: Date }) =>\n      datesAreOnSameDay(row.date, selectedDate),\n    );\n\n    if (filtered.count() === 0) {\n      const filteredByAnythingPresent = group\n        .orderByDescending(row => row.date)\n        .where((row: Row) => row[field] !== undefined);\n\n      if (filteredByAnythingPresent.count() === 0) {\n        return undefined;\n      }\n\n      return filteredByAnythingPresent.first()[field];\n    }\n\n    return filtered.first()[field];\n  };\n\n  const tableData = data\n    .orderByDescending((row: Row) => row.date)\n    .groupBy((row: Row) => row.iso_code)\n    .select(group => ({\n      date: group.first().date,\n      iso_code: group.first().iso_code,\n      location: group.first().location,\n      total_cases: findFirstRowMachingDate(group, selectedDate, \"total_cases\"),\n      new_cases: findFirstRowMachingDate(group, selectedDate, \"new_cases\"),\n      total_tests: group\n        .getSeries(\"total_tests\")\n        .select(x => (x ? x : 0))\n        .max(),\n      population: group.first().population,\n    }))\n    .toArray()\n    .map(row => ({\n      ...row,\n      date: row.date.toString(),\n      tests_per_1m_population: Math.round(\n        (row.total_tests * 1000000) / row.population,\n      ),\n    }));\n\n  const numberWithCommas = (field: string) => (rowData: any) =>\n    rowData[field].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\n  const columns: Column<any>[] = [\n    {\n      title: \"Country\",\n      field: \"location\",\n      render: (row: Row) => (\n        <>\n          <Checkbox\n            checked={isSelected(row.iso_code)}\n            onChange={_ => dispatch(makeCountryToggleAction(row.iso_code))}\n          />{\" \"}\n          {row.location}\n        </>\n      ),\n    },\n    {\n      title: \"Total Cases\",\n      field: \"total_cases\",\n      type: \"numeric\",\n      defaultSort: \"desc\",\n      render: numberWithCommas(\"total_cases\"),\n    },\n    {\n      title: \"New Cases\",\n      field: \"new_cases\",\n      type: \"numeric\",\n      render: numberWithCommas(\"new_cases\"),\n    },\n    {\n      title: \"Tests per 1M population\",\n      field: \"tests_per_1m_population\",\n      type: \"numeric\",\n      render: numberWithCommas(\"tests_per_1m_population\"),\n    },\n    {\n      title: \"Total Tests\",\n      field: \"total_tests\",\n      type: \"numeric\",\n      render: numberWithCommas(\"total_tests\"),\n    },\n  ];\n\n  const dispatch = useDispatch();\n  const handleDateSelection = (_: any, newSetting: string | null) => {\n    if (!newSetting) {\n      return;\n    }\n\n    if (!(newSetting === \"today\" || newSetting === \"yesterday\")) {\n      return;\n    }\n\n    dispatch(makeDataTableDateSelectionChangedAction(newSetting));\n  };\n\n  const options = {\n    fixedColumns: {\n      left: 1,\n      right: 0,\n    },\n  };\n\n  return (\n    <SpacedPaper>\n      <ToggleButtonGroup\n        value={dateToDisplay}\n        onChange={handleDateSelection}\n        exclusive\n        aria-label=\"log axis setting\"\n      >\n        <ToggleButton value=\"today\" aria-label=\"today\">\n          today\n        </ToggleButton>\n        <ToggleButton value=\"yesterday\" aria-label=\"yesterday\">\n          yesterday\n        </ToggleButton>\n      </ToggleButtonGroup>\n      <MaterialTable\n        columns={columns}\n        data={tableData}\n        title=\"Country Table\"\n        icons={tableIcons}\n        options={options}\n      ></MaterialTable>\n    </SpacedPaper>\n  );\n};\n","import { Observable, of } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { fromCSV, IDataFrame, Series } from \"data-forge\";\n\nexport interface Row {\n  date: Date;\n  iso_code: string;\n  location: string;\n  total_cases: number;\n  new_cases: number;\n  total_deaths: number;\n  new_deaths: number;\n  total_tests: number;\n  new_tests: number;\n  population: number;\n  location_type: \"country\" | \"us-state\";\n}\n\ninterface CovidRow {\n  date: Date;\n  iso_code: string;\n  location: string;\n  total_cases: number;\n  new_cases: number;\n  total_deaths: number;\n  new_deaths: number;\n  total_tests: number;\n  new_tests: number;\n}\n\ninterface PopulationRow {\n  iso_code: string;\n  population: number;\n  year: number;\n}\n\nexport const parseCovidCSV = (data: string): Observable<IDataFrame> =>\n  of(fromCSV(data)).pipe(\n    map((df: IDataFrame): IDataFrame => df.parseDates(\"date\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"total_cases\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"new_cases\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"total_deaths\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"new_deaths\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"total_tests\")),\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"new_tests\")),\n  );\n\nexport const parsePopulationCSV = (data: string): Observable<IDataFrame> =>\n  of(fromCSV(data)).pipe(\n    map((df: IDataFrame): IDataFrame => df.parseInts([\"Value\", \"Year\"])),\n    map(\n      (df: IDataFrame): IDataFrame =>\n        df.renameSeries({\n          Year: \"year\",\n          \"Country Code\": \"iso_code\",\n          Value: \"population\",\n        }),\n    ),\n  );\n\nconst replaceEmptyBy0 = (field: string): string => (field === \"\" ? \"0\" : field);\n\nexport const parseUsCSV = (data: string): Observable<IDataFrame> =>\n  of(fromCSV(data)).pipe(\n    map((df: IDataFrame): IDataFrame => df.parseDates(\"date\", \"YYYYMMDD\")),\n    map(\n      (df: IDataFrame): IDataFrame =>\n        df.renameSeries({\n          state: \"iso_code\",\n          positive: \"total_cases\",\n          positiveIncrease: \"new_cases\",\n          death: \"total_deaths\",\n          deathIncrease: \"new_deaths\",\n          totalTestResults: \"total_tests\",\n          totalTestResultsIncrease: \"new_tests\",\n        }),\n    ),\n    map(\n      (df: IDataFrame): IDataFrame =>\n        df.transformSeries({\n          total_cases: replaceEmptyBy0,\n          new_cases: replaceEmptyBy0,\n          total_deaths: replaceEmptyBy0,\n          new_deaths: replaceEmptyBy0,\n          total_tests: replaceEmptyBy0,\n          new_tests: replaceEmptyBy0,\n        }),\n    ),\n    map(\n      (df: IDataFrame): IDataFrame =>\n        df.parseInts([\n          \"total_cases\",\n          \"new_cases\",\n          \"total_deaths\",\n          \"new_deaths\",\n          \"total_tests\",\n          \"new_tests\",\n        ]),\n    ),\n  );\n\nexport const parseUsStateInfoCSV = (data: string): Observable<IDataFrame> =>\n  of(fromCSV(data)).pipe(\n    map((df: IDataFrame): IDataFrame => df.parseInts(\"population\")),\n  );\n\nexport const transformCsvData = (data: IDataFrame): IDataFrame => data;\n\ntype Maximums = Map<string, number>;\n\ntype Accumulator = {\n  maximums: Maximums;\n  result: IDataFrame;\n};\n\nconst computeLatestPopulation = (population: IDataFrame): IDataFrame =>\n  population\n    .groupBy(row => row.iso_code)\n    .select(group => {\n      const { year: maxYear } = group.summarize({ year: Series.max });\n      const pop = group.where(row => row.year === maxYear).first().population;\n      return {\n        iso_code: group.first().iso_code,\n        population: pop,\n      };\n    })\n    .inflate();\n\nexport const mergeData = (\n  covid: IDataFrame,\n  population: IDataFrame,\n  us: IDataFrame,\n  stateInfo: IDataFrame,\n): IDataFrame<number, Row> => {\n  const populationLatest = computeLatestPopulation(population);\n\n  const joinedUsData: IDataFrame<number, Row> = us.join(\n    stateInfo,\n    row => row.iso_code,\n    row => row.code,\n    (dataRow, infoRow) => ({\n      ...dataRow,\n      location: infoRow ? infoRow.state : \"unknown location name\",\n      population: infoRow.population,\n      location_type: \"us-state\",\n    }),\n  );\n\n  const joinedWorldData: IDataFrame<number, Row> = covid.join(\n    populationLatest,\n    (covid: CovidRow) => covid.iso_code,\n    (pop: PopulationRow) => pop.iso_code,\n    (covid: CovidRow, pop: PopulationRow | null) => ({\n      ...covid,\n      population: pop ? pop.population : 0,\n      location_type: \"country\",\n    }),\n  );\n\n  const combined = joinedUsData.concat(joinedWorldData);\n\n  return combined;\n};\n\nexport const smooth = (amount: number, series: number[][]): number[][] => {\n  amount = Math.ceil(Math.abs(amount));\n  let results: Array<Array<number>> = [];\n  for (let i = 0; i < series.length; i++) {\n    let [x] = series[i];\n\n    let valuesInAverage = 0;\n    let sum = 0;\n    for (let j = amount * -1; j <= amount; j++) {\n      if (series[i + j] === undefined) {\n        // ignore edges\n        continue;\n      }\n\n      sum = sum + series[i + j][1];\n      valuesInAverage = valuesInAverage + 1;\n    }\n\n    results.push([x, sum / valuesInAverage]);\n  }\n  return results;\n};\n","import React from \"react\";\n\nimport Highcharts, { SeriesOptionsType } from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport { useSelector } from \"react-redux\";\nimport { IDataFrame } from \"data-forge\";\nimport { createSelector } from \"reselect\";\n\nimport { useMediaQuery } from \"@material-ui/core\";\n\nimport { smooth } from \"../store/data\";\n\nimport { SpacedPaper } from \"./SpacedPaper\";\n\nimport {\n  pickedCountriesSelector,\n  dataSelector,\n  colorMapSelector,\n  countryNameSelector,\n} from \"../selectors\";\n\nconst deathCurveSelector = (\n  pickedCountries: string[],\n  data: IDataFrame,\n  colorMap: Map<string, string>,\n  countryNameMap: Map<string, string>,\n): SeriesOptionsType[] =>\n  pickedCountries.map(country => {\n    const filteredByCountry = data.where(row => row.iso_code === country);\n\n    const deaths = filteredByCountry.select(row => ({\n      iso_code: row.iso_code,\n      total_deaths: row.total_deaths,\n      population: row.population,\n      new_deaths: row.new_deaths,\n    }));\n\n    return {\n      name: countryNameMap.get(country),\n      type: \"line\",\n      color: colorMap.get(country),\n      data: smooth(\n        7,\n        deaths\n          .toArray()\n          .map(row => [\n            row.total_deaths / row.population,\n            row.new_deaths / row.population,\n          ])\n          .sort(([a, _], [b, __]) => (a < b ? -1 : 1)),\n      ).filter(([x, y]) => x !== 0 && y !== 0),\n    };\n  });\n\nexport const DeathCurve = () => {\n  const deaths = useSelector(\n    createSelector(\n      pickedCountriesSelector,\n      dataSelector,\n      colorMapSelector,\n      countryNameSelector,\n      deathCurveSelector,\n    ),\n  );\n\n  const wide = useMediaQuery(\"(min-width:600px)\");\n\n  const options: Highcharts.Options = {\n    title: {\n      text: \"\",\n    },\n    chart: {\n      height: wide ? \"50%\" : \"100%\",\n      zoomType: \"xy\",\n    },\n    xAxis: {\n      type: \"logarithmic\",\n      title: {\n        text: \"Fraction of dead population\",\n      },\n      min: 1e-6,\n      tickInterval: 0.1,\n      labels: {\n        step: wide ? 1 : 5,\n        formatter: function () {\n          return this.value.toExponential(1);\n        },\n        rotation: -45,\n      },\n    },\n    yAxis: {\n      type: \"logarithmic\",\n      title: {\n        text: \"Fraction of dead population per day (smoothed)\",\n      },\n      tickInterval: 0.1,\n      labels: {\n        step: 1,\n        formatter: function () {\n          return this.value.toExponential(1);\n        },\n      },\n    },\n    series: deaths,\n    credits: {\n      enabled: false,\n    },\n  };\n\n  return (\n    <SpacedPaper id=\"deathcurve\" elevation={3}>\n      <h2>\n        Robins Death Curve\n        <span role=\"img\" aria-label=\"tm\">\n          ™️\n        </span>\n      </h2>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </SpacedPaper>\n  );\n};\n","import React from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { IDataFrame } from \"data-forge\";\nimport { createSelector } from \"reselect\";\nimport Highcharts, { SeriesOptionsType } from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport { smooth } from \"../store/data\";\nimport { SpacedPaper } from \"./SpacedPaper\";\nimport {\n  pickedCountriesSelector,\n  dataSelector,\n  colorMapSelector,\n  countryNameSelector,\n} from \"../selectors\";\n\nimport { Row } from \"../store/data\";\n\nimport { red } from \"@material-ui/core/colors\";\n\nconst newSelector = (selector: (row: any) => number, title: string) => (\n  pickedCountries: string[],\n  data: IDataFrame,\n  colorMap: Map<string, string>,\n  countryNameMap: Map<string, string>,\n) =>\n  pickedCountries.map(country => {\n    const countryData = {\n      name: countryNameMap.get(country),\n      type: \"column\",\n      color: colorMap.get(country),\n      data: data\n        .where(\n          (row: Row) =>\n            row.iso_code === country && row.date > new Date(2020, 2, 14),\n        )\n        .toArray()\n        .map(row => [row.date.getTime(), selector(row)])\n        .sort(),\n    };\n\n    const movingAverage: SeriesOptionsType = {\n      name: \"7 day average\",\n      data: smooth(3, countryData.data),\n      type: \"line\",\n      color: red[900],\n      enableMouseTracking: false,\n    };\n\n    const options: Highcharts.Options = {\n      chart: {\n        height: \"300\",\n        width: \"300\",\n      },\n      title: {\n        text: countryNameMap.get(country),\n      },\n      xAxis: {\n        type: \"datetime\",\n        tickInterval: 7 * 24 * 3600 * 1000,\n      },\n      yAxis: {\n        min: 0,\n        title: {\n          text: title,\n        },\n      },\n      legend: {\n        enabled: false,\n      },\n      series: [countryData as SeriesOptionsType, movingAverage],\n      credits: {\n        enabled: false,\n      },\n    };\n\n    return (\n      <Grid item key={country}>\n        <HighchartsReact highcharts={Highcharts} options={options} />\n      </Grid>\n    );\n  });\n\nexport const NewCaseChart = () => {\n  const countryCharts = useSelector(\n    createSelector(\n      pickedCountriesSelector,\n      dataSelector,\n      colorMapSelector,\n      countryNameSelector,\n      newSelector(\n        (row: Row) => (row.new_cases * 1000000) / row.population,\n        \"daily new cases per 1M population\",\n      ),\n    ),\n  );\n\n  return (\n    <SpacedPaper elevation={3} id=\"new-cases\">\n      <h2>New Cases</h2>\n      <Grid container justify=\"center\" spacing={0}>\n        {countryCharts}\n      </Grid>\n    </SpacedPaper>\n  );\n};\n\nexport const NewDeathChart = () => {\n  const countryCharts = useSelector(\n    createSelector(\n      pickedCountriesSelector,\n      dataSelector,\n      colorMapSelector,\n      countryNameSelector,\n      newSelector(\n        (row: Row) => (row.new_deaths * 1000000) / row.population,\n        \"daily new deaths per 1M population\",\n      ),\n    ),\n  );\n\n  return (\n    <SpacedPaper elevation={3} id=\"new-deaths\">\n      <h2>New Deaths</h2>\n      <Grid container justify=\"center\" spacing={0}>\n        {countryCharts}\n      </Grid>\n    </SpacedPaper>\n  );\n};\n","import React from \"react\";\n\nimport { CaseChart, DeathChart } from \"./CaseChart\";\nimport { CountryPicker } from \"./CountryPicker\";\nimport { DataTable } from \"./DataTable\";\nimport { DeathCurve } from \"./DeathCurve\";\nimport { NewCaseChart, NewDeathChart } from \"./NewCaseChart\";\n\nconst centered: React.CSSProperties = { textAlign: \"center\" };\n\nexport const Loaded = () => {\n  return (\n    <div>\n      <h1>Covid Stats</h1>\n      <DataTable />\n      <CountryPicker />\n      <NewCaseChart />\n      <NewDeathChart />\n      <CaseChart />\n      <DeathChart />\n      <DeathCurve />\n      <div style={centered}>\n        data from{\" \"}\n        <a href=\"https://covid.ourworldindata.org\">Our World In Data</a>,{\" \"}\n        <a href=\"https://github.com/datasets/population\">\n          datahub.io via the World Bank\n        </a>{\" \"}\n        , <a href=\"https://covidtracking.com/\">The Covid Tracking Project</a>{\" \"}\n        and <a href=\"https://civil.services\">Civil Services</a>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { ErrorState } from \"../store\";\nimport { useSelector } from \"react-redux\";\n\nexport const Error = () => {\n  const message = useSelector((state: ErrorState) => state.message);\n  return <div>Error: {message}</div>;\n};\n","export function assertNever(x: never): never {\n    throw new Error(\"Unexpected object: \" + x);\n}","import Highcharts from \"highcharts\";\n\nconst theme: Highcharts.Options = {\n  colors: [\n    \"#058DC7\",\n    \"#50B432\",\n    \"#ED561B\",\n    \"#DDDF00\",\n    \"#24CBE5\",\n    \"#64E572\",\n    \"#FF9655\",\n    \"#FFF263\",\n    \"#6AF9C4\",\n  ],\n  chart: {\n    backgroundColor: \"#FFFFFF\",\n    plotBackgroundColor: \"rgba(255, 255, 255, .9)\",\n    plotShadow: false,\n    plotBorderWidth: 0,\n  },\n  title: {\n    style: {\n      color: \"#000\",\n      font: 'bold 16px \"Trebuchet MS\", Verdana, sans-serif',\n    },\n  },\n  subtitle: {\n    style: {\n      color: \"#666666\",\n      font: 'bold 12px \"Trebuchet MS\", Verdana, sans-serif',\n    },\n  },\n  xAxis: {\n    gridLineWidth: 1,\n    lineColor: \"#000\",\n    tickColor: \"#000\",\n    labels: {\n      style: {\n        color: \"#000\",\n        font: \"11px Trebuchet MS, Verdana, sans-serif\",\n      },\n    },\n    title: {\n      style: {\n        color: \"#333\",\n        fontWeight: \"bold\",\n        fontSize: \"12px\",\n        fontFamily: \"Trebuchet MS, Verdana, sans-serif\",\n      },\n    },\n  },\n  yAxis: {\n    minorTickInterval: \"auto\",\n    lineColor: \"#000\",\n    lineWidth: 1,\n    tickWidth: 1,\n    tickColor: \"#000\",\n    labels: {\n      style: {\n        color: \"#000\",\n        font: \"11px Trebuchet MS, Verdana, sans-serif\",\n      },\n    },\n    title: {\n      style: {\n        color: \"#333\",\n        fontWeight: \"bold\",\n        fontSize: \"12px\",\n        fontFamily: \"Trebuchet MS, Verdana, sans-serif\",\n      },\n    },\n  },\n  legend: {\n    itemStyle: {\n      font: \"9pt Trebuchet MS, Verdana, sans-serif\",\n      color: \"black\",\n    },\n    itemHoverStyle: {\n      color: \"#039\",\n    },\n    itemHiddenStyle: {\n      color: \"gray\",\n    },\n  },\n  navigation: {\n    buttonOptions: {\n      theme: {\n        stroke: \"#CCCCCC\",\n      },\n    },\n  },\n};\n\nHighcharts.setOptions(theme);\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"./App.css\";\nimport \"github-fork-ribbon-css/gh-fork-ribbon.css\";\n\nimport { State } from \"../store\";\n\nimport { Loading } from \"./Loading\";\nimport { Loaded } from \"./Loaded\";\nimport { Error } from \"./Error\";\n\nimport { assertNever } from \"../utils\";\nimport \"./highchartsTheme\";\n\nimport Box from \"@material-ui/core/Box\";\n\nexport const App = () => {\n  const type = useSelector<State, State[\"type\"]>(state => state.type);\n\n  return (\n    <>\n      <a\n        className=\"github-fork-ribbon right-top\"\n        href=\"https://github.com/jupp0r/covid-stats\"\n        data-ribbon=\"Fork me on GitHub\"\n        title=\"Fork me on GitHub\"\n      >\n        Fork me on GitHub\n      </a>\n      <Box px={3} py={3} my={3} textAlign=\"center\">\n        {((type: State[\"type\"]) => {\n          switch (type) {\n            case \"loading\":\n              return <Loading />;\n            case \"loaded\":\n              return <Loaded />;\n            case \"error\":\n              return <Error />;\n            default:\n              return assertNever(type);\n          }\n        })(type)}\n      </Box>\n    </>\n  );\n};\n","import { Action } from \"../actions\";\nimport { State } from \"../store\";\n\nimport { Store } from \"redux\";\n\nimport { makeUrlUpdated } from \"../actions\";\nimport { defaultCountries } from \"../store\";\n\n\nexport const updateCountriesInPathName = (\n  urlString: string,\n  countries: string[],\n): string => {\n  const url = new URL(urlString);\n  const params = new URLSearchParams(url.search);\n  params.set(\"countries[]\", JSON.stringify(countries));\n  url.search = params.toString();\n  return url.toString();\n};\n\nexport const getPickedCountriesFromUrl = (urlString: string): string[] => {\n  const url = new URL(urlString);\n  const params = new URLSearchParams(url.search);\n  const countries = params.get(\"countries[]\");\n  if (!countries) {\n    return defaultCountries;\n  }\n\n  const parsedCountries: string[] = JSON.parse(countries);\n\n  if (!Array.isArray(parsedCountries)) {\n    console.error(\"invalid url params\");\n    return defaultCountries;\n  }\n\n  return parsedCountries;\n};\n\nexport const setupRouting = (store: Store<State, Action>) => {\n  window.addEventListener(\"popstate\", () => {\n    store.dispatch(makeUrlUpdated(window.location.toString()));\n  });\n\n  store.subscribe(() => {\n    const { url } = store.getState().routing;\n    if (window.location.toString() !== url) {\n      window.history.pushState(null, \"\", url);\n      document.body.scrollTop = 0;\n    }\n  });\n};\n","import { initialState, State, LoadedState, LoadingState } from \"../store\";\n\nimport { Action } from \"../actions\";\nimport { transformCsvData } from \"../store/data\";\n\nimport { assertNever } from \"../utils\";\n\nimport { includes, filter } from \"lodash/fp\";\n\nimport { getPickedCountriesFromUrl, updateCountriesInPathName } from \"./router\";\n\nconst errorReducer = (state: State, action: Action): State => state;\n\nconst loadingReducer = (state: LoadingState, action: Action): State => {\n  switch (action.type) {\n    case \"fetch-success\":\n      const pickedCountries = getPickedCountriesFromUrl(state.routing.url);\n      return {\n        ...state,\n        type: \"loaded\",\n        data: transformCsvData(action.response),\n        ui: {\n          pickedCountries,\n          searchText: \"\",\n          caseChart: {\n            logSetting: \"linear\",\n          },\n          dataTable: {\n            dateToDisplay: \"yesterday\",\n          },\n        },\n        routing: {\n          url: updateCountriesInPathName(state.routing.url, pickedCountries),\n        },\n      };\n    case \"progress\":\n      return {\n        ...state,\n        progress: {\n          ...state.progress,\n          [action.target]: {\n            done: action.done,\n            total: Math.max(state.progress[action.target].total, action.done),\n            ...(action.total !== 0 && {\n              total: Math.max(action.total, action.done),\n            }),\n          },\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nconst loadedReducer = (state: LoadedState, action: Action): State => {\n  switch (action.type) {\n    case \"country-toggled\":\n      const toggleCountryToPicked = (\n        country: string,\n        countries: string[],\n      ): string[] => {\n        if (includes(country)(countries)) {\n          return filter(c => c !== country, countries);\n        }\n\n        return [country, ...countries];\n      };\n\n      const newCountries = toggleCountryToPicked(\n        action.countryCode,\n        state.ui.pickedCountries,\n      );\n\n      return {\n        ...state,\n        ui: {\n          ...state.ui,\n          pickedCountries: newCountries,\n        },\n        routing: {\n          url: updateCountriesInPathName(state.routing.url, newCountries),\n        },\n      };\n    case \"country-search-changed\":\n      return { ...state, ui: { ...state.ui, searchText: action.search } };\n    case \"case-chart-log-setting-changed\":\n      return {\n        ...state,\n        ui: {\n          ...state.ui,\n          caseChart: { ...state.ui.caseChart, logSetting: action.newSetting },\n        },\n      };\n    case \"data-table-date-selection-changed\":\n      return {\n        ...state,\n        ui: {\n          ...state.ui,\n          dataTable: {\n            ...state.ui.dataTable,\n            dateToDisplay: action.newSetting,\n          },\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport const reducer = (state: State = initialState, action: Action): State => {\n  if (action.type === \"url-updated\") {\n    return { ...state, routing: { ...state.routing, url: action.url } };\n  }\n\n  switch (state.type) {\n    case \"error\":\n      return errorReducer(state, action);\n    case \"loading\":\n      return loadingReducer(state, action);\n    case \"loaded\":\n      return loadedReducer(state, action);\n    default:\n      return assertNever(state);\n  }\n};\n","import { Observable, merge } from \"rxjs\";\nimport { filter, flatMap, map } from \"rxjs/operators\";\nimport { IDataFrame } from \"data-forge\";\nimport { Action, ProgressAction, makeProgressAction, DownloadCategory } from \"../actions\";\n\nexport type DataResult =\n  | { type: \"success\"; data: IDataFrame }\n  | { type: \"error\"; reason: string };\n\nexport interface Progress {\n  done: number;\n  total: number;\n}\n\nconst fromXhr = (\n  url: string,\n): {\n  progress: Observable<Progress>;\n  result: Observable<string>;\n} => {\n  const xhr = new XMLHttpRequest();\n  xhr.responseType = \"text\";\n  const progress$ = new Observable<Progress>((subscriber): void => {\n    xhr.addEventListener(\"progress\", ev =>\n      subscriber.next({\n        done: ev.loaded,\n        total: ev.total,\n      }),\n    );\n  });\n\n  const result$ = new Observable<string>(subscriber => {\n    xhr.addEventListener(\"readystatechange\", ev => {\n      if (xhr.readyState !== 4) {\n        return;\n      }\n\n      if (xhr.status === 200) {\n        subscriber.next(xhr.response);\n        subscriber.complete();\n      } else {\n        subscriber.error(xhr.response);\n      }\n    });\n  });\n\n  xhr.open(\"GET\", url);\n  xhr.send();\n  return { progress: progress$, result: result$ };\n};\n\nexport const makeProgressStream = (\n  action$: Observable<Action>,\n  url: string,\n  csvParser: (data: string) => Observable<IDataFrame>,\n  target: DownloadCategory,\n): Observable<ProgressAction | DataResult> =>\n  action$.pipe(\n    filter((action: Action) => action.type === \"initialized\"),\n    flatMap(() => {\n      const { progress, result } = fromXhr(url);\n      const progress$ = progress.pipe(\n        map((update: Progress) =>\n          makeProgressAction({ ...update, target }),\n        ),\n      );\n\n      const result$ = result.pipe(\n        flatMap(csvParser),\n        map((data: IDataFrame): DataResult => ({ type: \"success\", data })),\n      );\n\n      return merge(progress$, result$);\n    }),\n  );\n","import { Observable, zip, merge } from \"rxjs\";\n\nimport { filter, map } from \"rxjs/operators\";\n\nimport { ofType } from 'redux-observable';\n\nimport { Action, ProgressAction } from \"../actions\";\n\nimport { combineEpics } from \"redux-observable\";\n\nimport {\n  parseCovidCSV,\n  parsePopulationCSV,\n  parseUsCSV,\n  parseUsStateInfoCSV,\n  mergeData,\n} from \"../store/data\";\nimport { makeProgressStream, DataResult } from \"./util\";\n\nexport const startLoadingEpic = (\n  action$: Observable<Action>,\n): Observable<Action> => {\n  const covidData$ = makeProgressStream(\n    action$,\n    \"https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv\",\n    parseCovidCSV,\n    \"covid\",\n  );\n\n  const populationData$ = makeProgressStream(\n    action$,\n    \"https://raw.githubusercontent.com/datasets/population/master/data/population.csv\",\n    parsePopulationCSV,\n    \"population\"\n  );\n\n  const usData$ = makeProgressStream(\n    action$,\n    \"https://covidtracking.com/api/v1/states/daily.csv\",\n    parseUsCSV,\n    \"us\",\n  );\n\n  const stateInfo$ = makeProgressStream(\n    action$,\n    \"https://raw.githubusercontent.com/CivilServiceUSA/us-states/master/data/states.csv\",\n    parseUsStateInfoCSV,\n    \"stateInfo\",\n  );\n\n  const combinedProgress$: Observable<ProgressAction> = merge(\n    covidData$,\n    populationData$,\n    usData$,\n    stateInfo$,\n  ).pipe(\n    ofType(\"progress\"),\n  );\n\n  const filterForResult = (data$: Observable<ProgressAction | DataResult>) =>\n    data$.pipe(filter(item => item.type === \"success\"));\n\n  const combinedResults$: Observable<Action> = zip(\n    filterForResult(covidData$),\n    filterForResult(populationData$),\n    filterForResult(usData$),\n    filterForResult(stateInfo$),\n  ).pipe(\n    map(\n      ([covid, population, us, stateInfo]): Action => {\n        if (\n          covid.type === \"success\" &&\n          population.type === \"success\" &&\n          us.type === \"success\" &&\n          stateInfo.type === \"success\"\n        ) {\n          return {\n            type: \"fetch-success\",\n            response: mergeData(covid.data, population.data, us.data, stateInfo.data),\n          };\n        } else {\n          return {\n            type: \"error-during-fetch\",\n            message: `Error: ${covid} or ${population} failed to fetch`,\n          };\n        }\n      },\n    ),\n  );\n\n  return merge(combinedProgress$, combinedResults$);\n};\n\nexport const rootEpic = combineEpics(startLoadingEpic);\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { reducer } from \"../reducers/reducers\";\nimport { createEpicMiddleware } from \"redux-observable\";\nimport { rootEpic } from \"../epics\";\nimport { makeInitialized } from \"../actions\";\nimport { IDataFrame } from \"data-forge\";\nimport { Store as ReduxStore } from \"redux\";\nimport { Action } from \"../actions\";\nimport { setupRouting } from \"../reducers/router\";\nimport { Row } from \"./data\";\n\nexport type State = (LoadingState | LoadedState | ErrorState);\ninterface RoutingState {\n  routing: {\n    url: string,\n  }\n}\n\ninterface Progress {\n  done: number;\n  total: number;\n}\nexport type LoadingState = {\n  type: \"loading\";\n  progress: {\n    covid: Progress;\n    population: Progress;\n    us: Progress;\n    stateInfo: Progress;\n  };\n} & RoutingState;\n\nexport type UIState = {\n  pickedCountries: string[];\n  searchText: string;\n  caseChart: {\n    logSetting: \"linear\" | \"logarithmic\";\n  };\n  dataTable: {\n    dateToDisplay: \"today\" | \"yesterday\";\n  };\n}\n\nexport type LoadedState = {\n  type: \"loaded\";\n  data: IDataFrame<number, Row>;\n  ui: UIState;\n} & RoutingState\n\nexport type ErrorState = {\n  type: \"error\";\n  message: string;\n} & RoutingState;\n\n/// approximate download sizes for the progress bar in case servers don't send Content-Length\nconst covidSizeEstimate = 2459742;\nconst populationSizeEstimate = 487991;\nconst usDataEstimate = 679331;\nconst stateInfoEstimate = 30102;\n\nexport const initialState: State = {\n  type: \"loading\",\n  progress: {\n    covid: { done: 0, total: covidSizeEstimate },\n    population: { done: 0, total: populationSizeEstimate },\n    us: { done: 0, total: usDataEstimate },\n    stateInfo: { done: 0, total: stateInfoEstimate },\n  },\n  routing: {\n    url: window.location.toString(),\n  }\n};\n\nexport const defaultCountries = [\n         \"USA\",\n         \"DEU\",\n         \"SWE\",\n         \"ITA\",\n         \"NGA\",\n         \"RUS\",\n         \"BRA\",\n       ];\n\nexport type Store = ReduxStore<State, Action>;\n\nconst epicMiddleware = createEpicMiddleware();\nexport const store = configureStore({\n  reducer,\n  middleware: [epicMiddleware],\n});\nepicMiddleware.run(rootEpic);\n\nsetupRouting(store);\nstore.dispatch(makeInitialized());\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./components/App\";\n\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\nimport { createMuiTheme, ThemeProvider, CssBaseline } from \"@material-ui/core\";\n\nimport \"typeface-roboto\";\n\nconst rootElement = document.getElementById(\"root\");\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: \"light\",\n  },\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <ThemeProvider theme={darkTheme}>\n        <CssBaseline />\n        <App />\n      </ThemeProvider>\n    </React.StrictMode>\n  </Provider>,\n  rootElement,\n);\n"],"sourceRoot":""}